<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mowatermelon</title>
  <subtitle>studyNode</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mowatermelon.github.io/"/>
  <updated>2017-09-03T10:04:01.258Z</updated>
  <id>https://mowatermelon.github.io/</id>
  
  <author>
    <name>mowatermelon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Js学习之js数据类型</title>
    <link href="https://mowatermelon.github.io/2017/05/04/js%E5%AD%A6%E4%B9%A0%E4%B9%8Bjs%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://mowatermelon.github.io/2017/05/04/js学习之js数据类型/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-09-03T10:04:01.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前不久我了解了js数组相关操作，才发现我的js在<code>数据类型</code>这块的基础真的很薄弱，所以整理了些文档，重新学习了一下。</p>
</blockquote>
<ul>
<li><h3 id="1-DEFINTION"><a href="#1-DEFINTION" class="headerlink" title="1 DEFINTION"></a>1 DEFINTION</h3><code>数据类型</code>在<code>数据结构</code>中的定义是一个<code>值</code>的<code>集合</code>以及定义在这个<code>值集</code>上的一组<code>操作</code>。<br><code>变量</code>是用来<code>存储值</code>的<code>所在处</code>，它们有<code>名字</code>和<code>数据类型</code>。<code>变量</code>的<code>数据类型</code>决定了如何将代表这些<code>值</code>的<code>位存储</code>到计算机的<code>内存</code>中。在声明<code>变量</code>时也可指定它的<code>数据类型</code>。所有变量都具有<code>数据类型</code>，以决定能够存储<code>哪种数据</code>。<br><code>数据类型</code>包括<code>原始类型</code>、<code>多元组</code>、<code>记录单元</code>、<code>代数数据类型</code>、<code>抽象数据类型</code>、<code>参考类型</code>以及<code>函数类型</code>。<a id="more"></a></li>
<li><h3 id="2-PARAMETER"><a href="#2-PARAMETER" class="headerlink" title="2 PARAMETER"></a>2 PARAMETER</h3>在<code>JavaScript</code> 有 5 种原始类型（primitive type），即 <code>undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。</li>
</ul>
<p>在JavaScript中的数据类型主要有<code>数组</code>、<code>对象</code>。<br>并且JavaScript 拥有动态类型，这意味着相同的变量可用作不同的类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>)<span class="comment">//输出  undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>)<span class="comment">//输出  object</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">1</span>)<span class="comment">//输出  number</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">"undefined"</span>)<span class="comment">//输出  string!!!</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">"true"</span>)<span class="comment">//输出  string</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>)<span class="comment">//输出  boolean</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="2-1-undefined"><a href="#2-1-undefined" class="headerlink" title="2.1 undefined"></a>2.1 undefined</h4>当声明的变量未初始化时，该变量的默认值是<code>undefined</code>，即该值的数据类型和数据内容都是<code>undefined</code>。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oTemp;</div><div class="line">alert(<span class="keyword">typeof</span> oTemp); <span class="comment">//输出  undefined </span></div><div class="line">alert(oTemp ==<span class="literal">undefined</span>);<span class="comment">//输出  true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是，<strong>值   <code>undefined</code> 并不同于<code>未定义的值</code></strong>，<code>typeof</code> 运算符会将<code>未定义</code>和<code>未声明</code>的变量数据类型都打印为<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oTemp;</div><div class="line">alert(<span class="keyword">typeof</span> oTemp);  <span class="comment">//输出  undefined </span></div><div class="line">alert(<span class="keyword">typeof</span> oTemp2);  <span class="comment">//输出  undefined</span></div></pre></td></tr></table></figure>
<p><strong>请注意，对于<code>未声明的变量</code>使用除 <code>typeof</code> 之外的其他运算符的话，会引起错误，因为其他运算符只能用于<code>已声明</code>的变量上。</strong></p>
<p>例如，下面的代码将引发错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oTemp;</div><div class="line">alert(oTemp2 == <span class="literal">undefined</span>);</div></pre></td></tr></table></figure></p>
<p>当函数无明确返回值时，返回的也是值 <code>undefined</code>，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(testFunc() == <span class="literal">undefined</span>);  <span class="comment">//输出 "true"</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="2-2-Null"><a href="#2-2-Null" class="headerlink" title="2.2 Null"></a>2.2 Null</h4>它只有一个专用值 <code>null</code>，即它的<code>字面量</code>。值 <code>undefined</code> 实际上是从值 <code>null</code> 派生来的，因此 <code>ECMAScript</code>把它们定义为相等的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>);  <span class="comment">//输出 "true"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>尽管这两个值相等，但它们的含义不同。<code>undefined</code> 是声明了变量但未对其初始化时赋予该变量的值，<code>null</code> 则用于表示<code>尚未存在</code>的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是<code>对象</code>，那么找不到该对象时，返回的通常是 <code>null</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">null</span>)<span class="comment">// "object"</span></div><div class="line">alert(<span class="keyword">typeof</span> &#123;&#125;)<span class="comment">// "object"</span></div></pre></td></tr></table></figure></p>
<p><code>typeof</code> 运算符对于 <code>null</code> 值会返回 <code>Object</code>，这实际上是 <code>JavaScript</code> 最初实现中的一个错误，然后被 <code>ECMAScript</code> 沿用了。现在，<code>null</code> 被认为是<code>对象的占位符</code>，从而解释了这一矛盾，但从技术上来说，它仍然是<code>原始值</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> !<span class="number">0</span>)<span class="comment">//boolean</span></div><div class="line">alert(!<span class="number">0</span>)<span class="comment">//true</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="2-1-字符串"><a href="#2-1-字符串" class="headerlink" title="2.1 字符串"></a>2.1 字符串</h4><p>字符串是存储字符（比如 “Bill Gates”）的变量。<br>字符串可以是引号中的任意文本。可以使用单引号或双引号，也可以在字符串中使用引号，只要不匹配包围字符串的引号即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> answer=<span class="string">"Nice to meet you!"</span>;</div><div class="line"><span class="keyword">var</span> answer=<span class="string">"He is called 'Bill'"</span>;</div><div class="line"><span class="keyword">var</span> answer=<span class="string">'He is called "Bill"'</span>;</div></pre></td></tr></table></figure>
</li>
<li><h4 id="2-2-数字"><a href="#2-2-数字" class="headerlink" title="2.2 数字"></a>2.2 数字</h4><p>数字可以带小数点，也可以不带,极大或极小的数字可以通过科学（指数）计数法来书写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x1=<span class="number">34.00</span>;      <span class="comment">//使用小数点来写</span></div><div class="line"><span class="keyword">var</span> x2=<span class="number">34</span>;         <span class="comment">//不使用小数点来写</span></div><div class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></div><div class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></div></pre></td></tr></table></figure>
</li>
<li><h4 id="2-3-布尔"><a href="#2-3-布尔" class="headerlink" title="2.3 布尔"></a>2.3 布尔</h4><p>布尔（逻辑）只能有两个值：true 或 false。</p>
</li>
<li><h4 id="2-5-对象"><a href="#2-5-对象" class="headerlink" title="2.5 对象"></a>2.5 对象</h4></li>
</ul>
<ul>
<li><h4 id="2-4-数组"><a href="#2-4-数组" class="headerlink" title="2.4 数组"></a>2.4 数组</h4></li>
<li><h4 id="2-4-1-直接声明并赋值"><a href="#2-4-1-直接声明并赋值" class="headerlink" title="2.4.1 直接声明并赋值"></a>2.4.1 直接声明并赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cars=[<span class="string">"Audi"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p>
<ul>
<li><h4 id="2-4-2-利用array新建数组对象"><a href="#2-4-2-利用array新建数组对象" class="headerlink" title="2.4.2 利用array新建数组对象"></a>2.4.2 利用array新建数组对象</h4>Array 对象用于在单个的变量中存储多个值。<br>创建 Array 对象的语法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(size);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(element0, element1, ..., elementn);</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>参数</p>
</blockquote>
<p>参数 size 是期望的数组元素个数。返回的数组，length 字段将被设为 size 的值。<br>参数 element …, elementn 是参数列表。当使用这些参数来调用构造函数 Array() 时，新创建的数组的元素就会被初始化为这些值。它的 length 字段也会被设置为参数的个数。  </p>
<blockquote>
<p>返回值</p>
</blockquote>
<p>返回新创建并被初始化了的数组。<br>如果调用构造函数 Array() 时没有使用参数，那么返回的数组为空，length 字段为 0。<br>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为   <code>undefined</code> 的数组。<br>当其他参数调用 Array() 时，该构造函数将用参数指定的值初始化数组。<br>当把构造函数作为函数调用，不使用 new 运算符时，它的行为与使用 new 运算符调用它时的行为完全一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前不久我了解了js数组相关操作，才发现我的js在&lt;code&gt;数据类型&lt;/code&gt;这块的基础真的很薄弱，所以整理了些文档，重新学习了一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;1-DEFINTION&quot;&gt;&lt;a href=&quot;#1-DEFINTION&quot; class=&quot;headerlink&quot; title=&quot;1 DEFINTION&quot;&gt;&lt;/a&gt;1 DEFINTION&lt;/h3&gt;&lt;code&gt;数据类型&lt;/code&gt;在&lt;code&gt;数据结构&lt;/code&gt;中的定义是一个&lt;code&gt;值&lt;/code&gt;的&lt;code&gt;集合&lt;/code&gt;以及定义在这个&lt;code&gt;值集&lt;/code&gt;上的一组&lt;code&gt;操作&lt;/code&gt;。&lt;br&gt;&lt;code&gt;变量&lt;/code&gt;是用来&lt;code&gt;存储值&lt;/code&gt;的&lt;code&gt;所在处&lt;/code&gt;，它们有&lt;code&gt;名字&lt;/code&gt;和&lt;code&gt;数据类型&lt;/code&gt;。&lt;code&gt;变量&lt;/code&gt;的&lt;code&gt;数据类型&lt;/code&gt;决定了如何将代表这些&lt;code&gt;值&lt;/code&gt;的&lt;code&gt;位存储&lt;/code&gt;到计算机的&lt;code&gt;内存&lt;/code&gt;中。在声明&lt;code&gt;变量&lt;/code&gt;时也可指定它的&lt;code&gt;数据类型&lt;/code&gt;。所有变量都具有&lt;code&gt;数据类型&lt;/code&gt;，以决定能够存储&lt;code&gt;哪种数据&lt;/code&gt;。&lt;br&gt;&lt;code&gt;数据类型&lt;/code&gt;包括&lt;code&gt;原始类型&lt;/code&gt;、&lt;code&gt;多元组&lt;/code&gt;、&lt;code&gt;记录单元&lt;/code&gt;、&lt;code&gt;代数数据类型&lt;/code&gt;、&lt;code&gt;抽象数据类型&lt;/code&gt;、&lt;code&gt;参考类型&lt;/code&gt;以及&lt;code&gt;函数类型&lt;/code&gt;。
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据类型" scheme="https://mowatermelon.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Js学习之js函数hacker</title>
    <link href="https://mowatermelon.github.io/2017/05/03/js%E5%AD%A6%E4%B9%A0%E4%B9%8Bjs%E5%87%BD%E6%95%B0hacker/"/>
    <id>https://mowatermelon.github.io/2017/05/03/js学习之js函数hacker/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2017-09-03T09:51:02.029Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="1-定义式函数与赋值式函数"><a href="#1-定义式函数与赋值式函数" class="headerlink" title="1 定义式函数与赋值式函数"></a>1 定义式函数与赋值式函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Fn();  <span class="comment">//执行结果：console.log在控制台打印提示</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//声明式函数</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"执行了定义式函数"</span>);  </div><div class="line">&#125;          </div><div class="line"></div><div class="line">Fun();  <span class="comment">//执行结果：程序报错，提示函数未定义 </span></div><div class="line"><span class="keyword">var</span> Fun= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//赋值式函数</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"执行了赋值式函数"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>JS的解析过程分为两个阶段：<code>预编译期(预处理)</code>与<code>执行期</code>，页面加载过程中，浏览器会对页面上或载入的每个js代码块(或文件)进行扫描，如果遇到<code>定义式函数</code>，则进行<code>预处理</code>(类似于C等的编译)，处理完成之后再开始<code>由上至下</code>执行；遇到<code>赋值式函数</code>，则只是将<code>函数</code>赋给一个<code>变量</code>，不进行<code>预处理</code>，待调用到的时候才进行处理。<br><a id="more"></a></p>
<ul>
<li><h2 id="2-代码块及js文件的处理"><a href="#2-代码块及js文件的处理" class="headerlink" title="2 代码块及js文件的处理"></a>2 代码块及js文件的处理</h2><code>代码块</code>是指一对<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>标签包裹着的<code>JS</code>代码，<code>文件</code>就是指通过<code>src</code>导入页面的<code>JS文件</code>。<br>浏览器对每个<code>代码块</code>或<code>文件</code>进行独立的扫描，然后对全局的代码进行<code>顺序执行</code>。所以，在一个<code>代码块</code>(<code>文件</code>)中，<code>函数</code>可以在调用之后进行<code>定义式</code>定义(如案例一中的<code>Fn()</code>),但在两个独立的<code>代码块</code>中，<code>定义函数</code>所在的<code>代码块</code>必须在函数<code>被调用</code>的<code>代码块</code>之前。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123; </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>); </div><div class="line">&#125; </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </div><div class="line">Fun();<span class="comment">//控制台顺利打印，因为函数所在代码块在上一个代码块</span></div><div class="line">Fn(); <span class="comment">//报错，提示函数未定义，因为函数所在代码块在下一个代码块</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123; </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>); </div><div class="line">&#125; </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><h2 id="3-重复定义函数会覆盖前面的定义"><a href="#3-重复定义函数会覆盖前面的定义" class="headerlink" title="3 重复定义函数会覆盖前面的定义"></a>3 重复定义函数会覆盖前面的定义</h2><p>因为在<code>JS</code>中重名的函数，<code>后定义</code>的会覆盖<code>前面定义</code>的函数，这种策略和<code>JS</code>的顺序执行也是有关系的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fn(); <span class="comment">//控制台打印提示 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>); </div><div class="line">&#125; </div><div class="line">fn(); <span class="comment">//控制台打印提示 2</span></div></pre></td></tr></table></figure>
</li>
<li><h2 id="4-body的onload函数与body内部函数的执行"><a href="#4-body的onload函数与body内部函数的执行" class="headerlink" title="4 body的onload函数与body内部函数的执行"></a>4 body的onload函数与body内部函数的执行</h2><p><code>body</code>中<code>内部的函数</code>会先于<code>onload</code>的函数执行,<code>body</code>的<code>onload</code>事件触发条件是<code>body</code>内容加载完成，而<code>body</code>中的<code>JS</code>代码会在这一事件触发之前运行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnOnLoad</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I am outside the Wall!"</span>); </div><div class="line">&#125; </div><div class="line"><span class="built_in">window</span>.onload = fnOnLoad;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"I am inside the Wall.."</span>); </div><div class="line"><span class="comment">//先在控在控制台打印"I am inside the Wall.." </span></div><div class="line"><span class="comment">//后在控制台打印"I am outside the Wall!"</span></div></pre></td></tr></table></figure>
</li>
<li><h2 id="5-JS是多线程or单线程？"><a href="#5-JS是多线程or单线程？" class="headerlink" title="5 JS是多线程or单线程？"></a>5 JS是多线程or单线程？</h2><p>严格来说，<code>JS</code>是没有<code>多线程</code>概念的，所有的程序都是<code>单线程</code>依次执行的。  <code>延时执行</code>、<code>Ajax异步加载</code>只是看起来像<code>多线程</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我先调用"</span>) </div><div class="line">    &#125;,<span class="number">1000</span>); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我后调用"</span>); </div><div class="line">&#125; </div><div class="line">fn1(); </div><div class="line">fn2(); </div><div class="line"><span class="comment">// 先在控制台打印：“我后调用”， </span></div><div class="line"><span class="comment">// 1秒后在控制台打印：“我先调用”</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>看上去，<code>fn2()</code>和延时程序是分<code>两个过程</code>再走，但其实，这是<code>JS</code>中的<code>回调机制</code>在起作用，类似于操作系统中的<code>中断和响应</code> —— 延时程序设置一个<code>中断</code>，然后执行<code>fn2()</code>，待1000毫秒时间到后，再回调执行<code>fn1()</code>。<br>同样，4中<code>body</code>的<code>onload</code>事件调用的函数，也是利用了回调机制——body加载完成之后，回调执行<code>fnOnLoad()</code>函数。<br><code>Ajax请求</code>中的数据处理函数也是一样的道理。 </p>
<blockquote>
<p>参考网站</p>
<ul>
<li><a href="http://www.jb51.net/article/36755.htm">js 程序执行与顺序实现详解</a></li>
<li><a href="http://blog.csdn.net/hao134838/article/details/51778750">JS——声明式函数与赋值式函数</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;1-定义式函数与赋值式函数&quot;&gt;&lt;a href=&quot;#1-定义式函数与赋值式函数&quot; class=&quot;headerlink&quot; title=&quot;1 定义式函数与赋值式函数&quot;&gt;&lt;/a&gt;1 定义式函数与赋值式函数&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Fn();  &lt;span class=&quot;comment&quot;&gt;//执行结果：console.log在控制台打印提示&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//声明式函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;执行了定义式函数&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fun();  &lt;span class=&quot;comment&quot;&gt;//执行结果：程序报错，提示函数未定义 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Fun= &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//赋值式函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;执行了赋值式函数&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS的解析过程分为两个阶段：&lt;code&gt;预编译期(预处理)&lt;/code&gt;与&lt;code&gt;执行期&lt;/code&gt;，页面加载过程中，浏览器会对页面上或载入的每个js代码块(或文件)进行扫描，如果遇到&lt;code&gt;定义式函数&lt;/code&gt;，则进行&lt;code&gt;预处理&lt;/code&gt;(类似于C等的编译)，处理完成之后再开始&lt;code&gt;由上至下&lt;/code&gt;执行；遇到&lt;code&gt;赋值式函数&lt;/code&gt;，则只是将&lt;code&gt;函数&lt;/code&gt;赋给一个&lt;code&gt;变量&lt;/code&gt;，不进行&lt;code&gt;预处理&lt;/code&gt;，待调用到的时候才进行处理。&lt;br&gt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="hacker" scheme="https://mowatermelon.github.io/tags/hacker/"/>
    
  </entry>
  
  <entry>
    <title>Js学习之jq基础clone学习</title>
    <link href="https://mowatermelon.github.io/2017/05/02/js%E5%AD%A6%E4%B9%A0%E4%B9%8Bjq%E5%9F%BA%E7%A1%80clone%E5%AD%A6%E4%B9%A0/"/>
    <id>https://mowatermelon.github.io/2017/05/02/js学习之jq基础clone学习/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2017-09-03T10:07:04.708Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前情概要，项目中需要用到新增现有盒子和删除对应index盒子的需求，这边我之前做过这种类似的用的是自己手动拼接新增的字符串，感觉太浪费时间，所以这次想用到JQ中的clone，减少代码冗余</p>
</blockquote>
<ul>
<li><h1 id="1-点满bug"><a href="#1-点满bug" class="headerlink" title="1 点满bug"></a>1 点满bug</h1></li>
</ul>
<blockquote>
<ul>
<li>bug 1 </li>
</ul>
</blockquote>
<p>我使用class比较习惯，所以想通过class选择器，进行clone之后，再在进行重新绑定id之类的，结果发现，我点击一次，新增一个盒子，点击第二次，新增两个盒子，点击第三次，新增三个盒子，完全是群魔乱舞。</p>
<p>放上错误代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--html代码--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span>                  </div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-info userPanel"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-link text-center text-info"</span> <span class="attr">id</span>=<span class="string">"addUser"</span>&gt;</span>+新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javascript代码</span></div><div class="line">$(<span class="string">"#addUser"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.userPanel'</span>).append($(<span class="string">'.userPanel'</span>).clone());</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>bug原因:通过class获取没有唯一性，本意是再新增一行，但是由于class选择器做的是完全匹配，所以每一个对应的class之后都新增了一个盒子，修改为通过id获取clone对象，还有通过id获取需要添加盒子的对象。<br><br/><br><a id="more"></a></p>
<blockquote>
<ul>
<li>bug 2</li>
</ul>
</blockquote>
<p>修改为id获取之后我这边事件绑定又出现了问题，因为我是直接克隆的，没有修改id，导致这边id绑定有一定问题，出现了和上个bug一样的问题。</p>
<p>bug原因:绑定事件没有唯一性，所以我这边修改了页面标签结构，并同时修改了clone之后的对应id。</p>
<p>放上修改结构之后的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--html代码--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span>                  </div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-info userPanel"</span> <span class="attr">id</span>=<span class="string">"userPanel_01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"userNull"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-link text-center text-info"</span> <span class="attr">id</span>=<span class="string">"addUser"</span>&gt;</span>+新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> countU=<span class="number">2</span>;<span class="comment">//第一个userPanel是不能删除的，所以之后添加的面板序号默认是从第二个开始的，注意定义在$(function()&#123;&#125;)之外，因为之后外部的funciton需要调用到这个全局变量。</span></div><div class="line"><span class="comment">//javascript代码</span></div><div class="line">$(<span class="string">"#addUser"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#userPanel_01'</span>).clone(<span class="literal">true</span>)</div><div class="line">    <span class="keyword">var</span> _clonePanel = $(<span class="string">'#userPanel_01'</span>).clone(<span class="literal">true</span>);</div><div class="line">    _clonePanel.attr(<span class="string">'id'</span>, <span class="string">'userPanel_0'</span> + countU);</div><div class="line">    _clonePanel.find(<span class="string">'.panel-title'</span>).html(<span class="string">'信息('</span> + countU + <span class="string">')'</span>);</div><div class="line">    _clonePanel.find(<span class="string">'.deleteBtn'</span>).attr(<span class="string">'onclick'</span>, <span class="string">"deleteUser(userPanel_0"</span> + countU + <span class="string">")"</span>).removeClass(<span class="string">"hide"</span>).addClass(<span class="string">"show"</span>) ;<span class="comment">//通过attr绑定事件，不要通过prop绑定事件，$('.userNull')克隆到了之后，赶紧把`.deleteBtn`的hide样式移除掉</span></div><div class="line">    _clonePanel.appendTo(<span class="string">'.userNull'</span>);</div><div class="line">    ++countU;<span class="comment">//在克隆了之后，赶紧将序号自增一下</span></div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">  $(<span class="string">'.userNull'</span>).children(<span class="string">'.userPanel'</span>).eq(index<span class="number">-2</span>).remove();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>bug 3</li>
</ul>
</blockquote>
<p>我现在需要绑定删除事件，我前期思路是传对应的Index索引过去，然后在<code>.userNull</code>中找对应的索引进行移除操作，结果发现如果我不按照顺序删除，这边通过索引是找不到对应的子盒子的，比如我新增了三个子盒子，我在第二个子盒子点击了删除，我在第三个子盒子中点击删除，就没有用了。</p>
<p>bug原因:因为此时<code>.userNull</code>只有两个子盒子，这个时候再找它的第三个子盒子，那就真的是尬找，找不到的，捂脸.jpg。</p>
<p>放上修改结构之后的代码，html没有修改结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#addUser"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#userPanel_01'</span>).clone(<span class="literal">true</span>)</div><div class="line">    ···</div><div class="line">    _clonePanel.find(<span class="string">'.deleteBtn'</span>).attr(<span class="string">'onclick'</span>,<span class="string">"deleteUser(userPanel_0"</span> + countU+<span class="string">")"</span>);<span class="comment">//修改的地方</span></div><div class="line">    ···</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  $(<span class="string">'.userNull'</span>).find(id).remove();</div><div class="line">  --countU;<span class="comment">//在删除了之后，赶紧将序号自减一下</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>bug 4</li>
</ul>
</blockquote>
<p>我的页面新增三个子盒子，我把页面上的第二个删除之后，页面上显示的是’信息(01)’，’信息(02)’，’信息(04)’，这样肯定不合理，而且我的删除肯定是需要有个确认行为的，万一我误碰了怎么办，我也很无辜啊。</p>
<p>bug原因:正常逻辑这边应该在删除之后重新刷一遍页面已有的盒子id，我没有管她们，她们这些盒子也很绝望啊，不能怪她们。</p>
<p>放上修改结构之后的代码，html没有修改结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javascript代码 只修改了deleteUser方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  $(<span class="string">"#bsznModal"</span>).showmodal(&#123;<span class="comment">//这个是我自己基于bootstrap modal写的一个模态窗插件，支持自定义很多内容。</span></div><div class="line">      flag: <span class="string">"info"</span>,</div><div class="line">      title: <span class="string">"警告"</span>,    <span class="comment">//设置模态窗标题</span></div><div class="line">      content: <span class="string">"确认删除这条记录吗？"</span>,</div><div class="line">      Qclose: <span class="literal">true</span>,</div><div class="line">      fontSize: <span class="string">"18"</span></div><div class="line">  &#125;);</div><div class="line">  $(<span class="string">"#close"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击确认按钮之后，才执行删除操作</span></div><div class="line">      $(<span class="string">'.userNull'</span>).find(id).remove();</div><div class="line">      <span class="comment">/*</span></div><div class="line"><span class="comment">      *遍历$(".userNull").children(".userPanel")</span></div><div class="line"><span class="comment">      *注意each (function (index, data)&#123;&#125;)结构，这个不是each(index, data)&#123;&#125;</span></div><div class="line"><span class="comment">      *each 有两个参数，第一个是该子盒子的当前索引，第二个是她的内容</span></div><div class="line"><span class="comment">      *这边each默认索引是从0开始的，所以index需要在自身的索引增加2</span></div><div class="line"><span class="comment">      */</span></div><div class="line">      $(<span class="string">".userNull"</span>).children(<span class="string">".userPanel"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, data</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> _this = $(<span class="keyword">this</span>);</div><div class="line">          index = index + <span class="number">2</span>;<span class="comment">//索引增加2</span></div><div class="line">          _this.attr(<span class="string">'id'</span>, <span class="string">'userPanel_0'</span> + index);<span class="comment">//</span></div><div class="line">          _this.find(<span class="string">'.panel-title'</span>).html(<span class="string">'信息('</span> + index + <span class="string">')'</span>);</div><div class="line">          _this.find(<span class="string">'.deleteBtn'</span>).attr(<span class="string">'onclick'</span>, <span class="string">"deleteUser(userPanel_0"</span> + index + <span class="string">")"</span>);</div><div class="line">      &#125;)</div><div class="line">      --countU;<span class="comment">//注意这个时候索引自减实在点击了确认之后才进行，如果没有点击确认，不管不顾的之后在deleteUser()之后执行自减，这个会有问题哒。</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h1 id="2-触发技能"><a href="#2-触发技能" class="headerlink" title="2 触发技能"></a>2 触发技能</h1><ul>
<li>1 clone盒子成功拉 <code>clone()</code></li>
<li>2 clone并修改内容成功拉 <code>clone(true)</code></li>
<li>3 动态新增数据成功拉 <code>appendTo()</code></li>
<li>4 动态修改btn单击事件成功拉 <code>attr(&#39;onclick&#39;,&quot;···&quot;)</code></li>
<li>5 使用each进行遍历成功拉 <code>each (function (index, data){})</code></li>
<li>6 删除对应索引盒子成功拉 <code>remove()</code></li>
</ul>
</li>
<li><h1 id="3-整理思路"><a href="#3-整理思路" class="headerlink" title="3 整理思路"></a>3 整理思路</h1><p>  最近学习vue的使用，对于jquery的好感其实降到很低了，今天做这个功能其实比较小，整个做下来也感觉还算顺畅。就我目前学习的vue进度，这些如果在vue中做的话，其实也是比较麻烦的事情，数据驱动模式在dom动态新增上面只能通过字符串进行拼接，这边没有clone来的方便，而且在删除之后动态刷页面上的id内容，通过原生js比较繁琐，不过这边真的是需要注意细节，很多小细节，不要太粗心，不要浪费太多时间去回忆忘记的知识点，很多知识点忘记了之后，自己一个人尬想解决不了问题，还不如直接搜一下，也不是大事。</p>
</li>
</ul>
<ul>
<li><h1 id="4-放上完整代码"><a href="#4-放上完整代码" class="headerlink" title="4 放上完整代码"></a>4 放上完整代码</h1></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--html代码--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span>                  </div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-info userPanel"</span> <span class="attr">id</span>=<span class="string">"userPanel_01"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>信息(1)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pull-right deleteBtn hide btn btn-link"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container form-horizontal"</span> <span class="attr">id</span>=<span class="string">"userdiv"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"txtMC"</span> <span class="attr">class</span>=<span class="string">"col-xs-3 control-label"</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-9"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"txtMC"</span>   /&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"userNull"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-link text-center text-info"</span> <span class="attr">id</span>=<span class="string">"addUser"</span>&gt;</span>+新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javascript代码</span></div><div class="line"><span class="keyword">var</span> countU = <span class="number">2</span>;</div><div class="line">$(<span class="string">"#addUser"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _clonePanel = $(<span class="string">'#userPanel_01'</span>).clone(<span class="literal">true</span>);</div><div class="line">    _clonePanel.attr(<span class="string">'id'</span>, <span class="string">'userPanel_0'</span> + countU);</div><div class="line">    _clonePanel.find(<span class="string">'.panel-title'</span>).html(<span class="string">'信息('</span> + countU + <span class="string">')'</span>);</div><div class="line">    _clonePanel.find(<span class="string">'.deleteBtn'</span>).attr(<span class="string">'onclick'</span>, <span class="string">"deleteUser(userPanel_0"</span> + countU + <span class="string">")"</span>).removeClass(<span class="string">"hide"</span>).addClass(<span class="string">"show"</span>) ;</div><div class="line">    _clonePanel.appendTo(<span class="string">'.userNull'</span>);</div><div class="line">    ++countU;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    $(<span class="string">"#bsznModal"</span>).showmodal(&#123;</div><div class="line">        flag: <span class="string">"info"</span>,</div><div class="line">        title: <span class="string">"警告"</span>,    <span class="comment">//设置模态窗标题</span></div><div class="line">        content: <span class="string">"确认删除这条记录吗？"</span>,</div><div class="line">        Qclose: <span class="literal">true</span>,</div><div class="line">        fontSize: <span class="string">"18"</span></div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">"#close"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="string">'.userNull'</span>).find(id).remove();</div><div class="line">        $(<span class="string">".userNull"</span>).children(<span class="string">".userPanel"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, data</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> _this = $(<span class="keyword">this</span>);</div><div class="line">            index = index + <span class="number">2</span>;</div><div class="line">            _this.attr(<span class="string">'id'</span>, <span class="string">'userPanel_0'</span> + index);</div><div class="line">            _this.find(<span class="string">'.panel-title'</span>).html(<span class="string">'信息('</span> + index + <span class="string">')'</span>);</div><div class="line">            _this.find(<span class="string">'.deleteBtn'</span>).attr(<span class="string">'onclick'</span>, <span class="string">"deleteUser(userPanel_0"</span> + index + <span class="string">")"</span>);</div><div class="line">        &#125;)</div><div class="line">        --countU;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前情概要，项目中需要用到新增现有盒子和删除对应index盒子的需求，这边我之前做过这种类似的用的是自己手动拼接新增的字符串，感觉太浪费时间，所以这次想用到JQ中的clone，减少代码冗余&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;1-点满bug&quot;&gt;&lt;a href=&quot;#1-点满bug&quot; class=&quot;headerlink&quot; title=&quot;1 点满bug&quot;&gt;&lt;/a&gt;1 点满bug&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bug 1 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我使用class比较习惯，所以想通过class选择器，进行clone之后，再在进行重新绑定id之类的，结果发现，我点击一次，新增一个盒子，点击第二次，新增两个盒子，点击第三次，新增三个盒子，完全是群魔乱舞。&lt;/p&gt;
&lt;p&gt;放上错误代码&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--html代码--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;                  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel-info userPanel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn btn-block btn-link text-center text-info&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;addUser&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;+新增&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//javascript代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#addUser&quot;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&#39;.userPanel&#39;&lt;/span&gt;).append($(&lt;span class=&quot;string&quot;&gt;&#39;.userPanel&#39;&lt;/span&gt;).clone());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bug原因:通过class获取没有唯一性，本意是再新增一行，但是由于class选择器做的是完全匹配，所以每一个对应的class之后都新增了一个盒子，修改为通过id获取clone对象，还有通过id获取需要添加盒子的对象。&lt;br&gt;&lt;br/&gt;&lt;br&gt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="jq基础" scheme="https://mowatermelon.github.io/tags/jq%E5%9F%BA%E7%A1%80/"/>
    
      <category term="clone" scheme="https://mowatermelon.github.io/tags/clone/"/>
    
  </entry>
  
  <entry>
    <title>Js学习之jq基础</title>
    <link href="https://mowatermelon.github.io/2017/05/01/js%E5%AD%A6%E4%B9%A0%E4%B9%8Bjq%E5%9F%BA%E7%A1%80/"/>
    <id>https://mowatermelon.github.io/2017/05/01/js学习之jq基础/</id>
    <published>2017-04-30T16:00:00.000Z</published>
    <updated>2017-09-03T10:12:17.592Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h2 id="相关节点操作"><a href="#相关节点操作" class="headerlink" title="相关节点操作"></a>相关节点操作</h2></blockquote>
<p><code>jQuery.parent(expr)</code> 找父亲节点，可以传入<code>expr</code>进行过滤，比如<code>$(&quot;span&quot;).parent()</code>或者<code>$(&quot;span&quot;).parent(&quot;.class&quot;)</code></p>
<p><code>jQuery.parents(expr)</code>,类似于<code>jQuery.parents(expr)</code>,但是是查找所有祖先元素，不限于父元素</p>
<p><code>jQuery.children(expr)</code>.返回所有子节点，这个方法只会返回直接的孩子节点，不会返回所有的子孙节点</p>
<p><code>jQuery.contents()</code>,返回下面的所有内容，包括节点和文本。这个方法和children()的区别就在于，包括空白文本，也会被作为一个</p>
<p><code>jQuery</code>对象返回，<code>children()</code>则只会返回节点</p>
<a id="more"></a>
<p><code>jQuery.prev()</code>，返回上一个兄弟节点，不是所有的兄弟节点</p>
<p><code>jQuery.prevAll()</code>，返回所有之前的兄弟节点</p>
<p><code>jQuery.next()</code>,返回下一个兄弟节点，不是所有的兄弟节点</p>
<p><code>jQuery.nextAll()</code>，返回所有之后的兄弟节点</p>
<p><code>jQuery.siblings()</code>,返回兄弟姐妹节点，不分前后</p>
<p><code>jQuery.find(expr)</code>,跟<code>jQuery.filter(expr)</code>完全不一样。<code>jQuery.filter()</code>是从初始的<code>jQuery</code>对象集合中筛选出一部分，而<code>jQuery.find()</code>的返回结果，不会有初始集合中的内容，比如<code>$(&quot;p&quot;)</code>,<code>find(&quot;span&quot;)</code>,是从元素开始找,等同于$<code>(&quot;p span&quot;)</code></p>
<blockquote>
<h2 id="jquery判断子元素是否存在"><a href="#jquery判断子元素是否存在" class="headerlink" title="jquery判断子元素是否存在"></a>jquery判断子元素是否存在</h2></blockquote>
<h3 id="1-判断子元素是否存在"><a href="#1-判断子元素是否存在" class="headerlink" title="1 判断子元素是否存在"></a>1 判断子元素是否存在</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一级子元素 if($("#specialId&gt;img").length==0)</span></div><div class="line"><span class="keyword">if</span> ($( <span class="string">"#specialId:has(img)"</span> ).length==<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">//-----没有img子标记-----</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//-------有img子标记------</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-选择特定id元素下的特定id子元素"><a href="#2-选择特定id元素下的特定id子元素" class="headerlink" title="2 选择特定id元素下的特定id子元素"></a>2 选择特定id元素下的特定id子元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#form"</span> ).children( <span class="string">"#t"</span> )</div></pre></td></tr></table></figure>
<h3 id="3-选择特定id元素下的子元素"><a href="#3-选择特定id元素下的子元素" class="headerlink" title="3 选择特定id元素下的子元素"></a>3 选择特定id元素下的子元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul#u&gt;li:nth-child(2)"</span> )</div></pre></td></tr></table></figure>
<h3 id="4-判断某个元素是否存在"><a href="#4-判断某个元素是否存在" class="headerlink" title="4 判断某个元素是否存在"></a>4 判断某个元素是否存在</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($( <span class="string">"#myId"</span> ).length&gt;<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">//存在</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="jquery样式移除"><a href="#jquery样式移除" class="headerlink" title="jquery样式移除"></a>jquery样式移除</h2></blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="keyword">this</span>).children(<span class="string">".glyphicon-chevron-up"</span>)</div><div class="line">        .addClass(<span class="string">"glyphicon-chevron-down"</span>)</div><div class="line">        .removeClass(<span class="string">"glyphicon-chevron-up"</span>);</div></pre></td></tr></table></figure>
<p> 在选择器使用上面，通过某个样式进行选择，但是<code>同时需要</code>移除该样式，添加新样式，可以先<code>添加</code>新样式，再<code>移除</code>样式</p>
<blockquote>
<h2 id="按钮禁用"><a href="#按钮禁用" class="headerlink" title="按钮禁用"></a>按钮禁用</h2></blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#btnBack"</span>).addClass(<span class="string">"disabled hidden"</span>);</div><div class="line">$(<span class="string">'#btnBack'</span>).prop(<span class="string">'disabled'</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="监听回车事件"><a href="#监听回车事件" class="headerlink" title="监听回车事件"></a>监听回车事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">            <span class="comment">//定义回车事件  </span></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//如果是Firefox  </span></div><div class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">"keypress"</span>, fireFoxHandler, <span class="literal">true</span>);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> &#123;  </div><div class="line">                <span class="built_in">document</span>.attachEvent(<span class="string">"onkeypress"</span>, ieHandler);  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fireFoxHandler</span>(<span class="params">evt</span>) </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">if</span> (evt.keyCode == <span class="number">13</span>) &#123;  </div><div class="line"></div><div class="line">                    $(<span class="string">"#btnLogin"</span>)[<span class="number">0</span>].click();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">ieHandler</span>(<span class="params">evt</span>) </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">if</span> (evt.keyCode == <span class="number">13</span>) &#123;  </div><div class="line">                    $(<span class="string">"#btnLogin"</span>)[<span class="number">0</span>].click();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line"></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;相关节点操作&quot;&gt;&lt;a href=&quot;#相关节点操作&quot; class=&quot;headerlink&quot; title=&quot;相关节点操作&quot;&gt;&lt;/a&gt;相关节点操作&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;jQuery.parent(expr)&lt;/code&gt; 找父亲节点，可以传入&lt;code&gt;expr&lt;/code&gt;进行过滤，比如&lt;code&gt;$(&amp;quot;span&amp;quot;).parent()&lt;/code&gt;或者&lt;code&gt;$(&amp;quot;span&amp;quot;).parent(&amp;quot;.class&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.parents(expr)&lt;/code&gt;,类似于&lt;code&gt;jQuery.parents(expr)&lt;/code&gt;,但是是查找所有祖先元素，不限于父元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.children(expr)&lt;/code&gt;.返回所有子节点，这个方法只会返回直接的孩子节点，不会返回所有的子孙节点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.contents()&lt;/code&gt;,返回下面的所有内容，包括节点和文本。这个方法和children()的区别就在于，包括空白文本，也会被作为一个&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery&lt;/code&gt;对象返回，&lt;code&gt;children()&lt;/code&gt;则只会返回节点&lt;/p&gt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="jq基础" scheme="https://mowatermelon.github.io/tags/jq%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js学习之FX获取文件路径方法</title>
    <link href="https://mowatermelon.github.io/2017/04/30/js%E5%AD%A6%E4%B9%A0%E4%B9%8BFX%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%96%B9%E6%B3%95/"/>
    <id>https://mowatermelon.github.io/2017/04/30/js学习之FX获取文件路径方法/</id>
    <published>2017-04-29T16:00:00.000Z</published>
    <updated>2017-09-03T10:13:38.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>FX获取文件路径方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileFirefox</span>(<span class="params">fileBrowser</span>) </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  netscape.security.PrivilegeManager.enablePrivilege(<span class="string">"UniversalXPConnect"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  alert(<span class="string">'无法访问本地文件，由于浏览器安全设置。为了克服这一点，请按照下列步骤操作：(1)在地址栏输入"about:config";(2) 右键点击并选择 New-&gt;Boolean; (3) 输入"signed.applets.codebase_principal_support" （不含引号）作为一个新的首选项的名称;(4) 点击OK并试着重新加载文件'</span>);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> fileName = fileBrowser.value; <span class="comment">//这一步就能得到客户端完整路径。下面的是否判断的太复杂，还有下面得到ie的也很复杂。</span></div><div class="line"><span class="keyword">var</span> file = Components.classes[<span class="string">"@mozilla.org/file/local;1"</span>].createInstance(Components.interfaces.nsILocalFile);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">// Back slashes for windows</span></div><div class="line">  file.initWithPath(fileName.replace( <span class="comment">///g, "\\") );</span></div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">if</span> (e.result != Components.results.NS_ERROR_FILE_UNRECOGNIZED_PATH) <span class="keyword">throw</span> e;</div><div class="line">    alert(<span class="string">"File '"</span> + fileName + <span class="string">"' cannot be loaded: relative paths are not allowed. Please provide an absolute path to this file."</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (file.exists() == <span class="literal">false</span>) &#123;</div><div class="line">    alert(<span class="string">"File '"</span> + fileName + <span class="string">"' not found."</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> file.path;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//根据不同浏览器获取路径</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getvl</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//判断浏览器</span></div><div class="line">    <span class="keyword">var</span> Sys = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</div><div class="line">    <span class="keyword">var</span> s;</div><div class="line">    (s = ua.match(<span class="regexp">/msie ([d.]+)/</span>)) ? Sys.ie = s[<span class="number">1</span>] : (s = ua.match(<span class="regexp">/firefox/</span> ([d.] + ) / )) ? Sys.firefox = s[<span class="number">1</span>] : (s = ua.match(<span class="regexp">/chrome/</span> ([d.] + ) / )) ? Sys.chrome = s[<span class="number">1</span>] : (s = ua.match(<span class="regexp">/opera.([d.]+)/</span>)) ? Sys.opera = s[<span class="number">1</span>] : (s = ua.match(<span class="regexp">/version/</span> ([d.] + ). * safari / )) ? Sys.safari = s[<span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> file_url = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (Sys.ie &lt;= <span class="string">"6.0"</span>) &#123;</div><div class="line">      <span class="comment">//ie5.5,ie6.0</span></div><div class="line">      file_url = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).value;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Sys.ie &gt;= <span class="string">"7.0"</span>) &#123;</div><div class="line">      <span class="comment">//ie7,ie8</span></div><div class="line">      <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</div><div class="line">      file.select();</div><div class="line">      file_url = <span class="built_in">document</span>.selection.createRange().text;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Sys.firefox) &#123;</div><div class="line">      <span class="comment">//fx</span></div><div class="line">      <span class="comment">//file_url = document.getElementById("file").files[0].getAsDataURL();//获取的路径为FF识别的加密字符串</span></div><div class="line">      file_url = readFileFirefox(<span class="built_in">document</span>.getElementById(<span class="string">"file"</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//alert(file_url);</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).innerHTML = <span class="string">"获取文件域完整路径为："</span> + file_url;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;FX获取文件路径方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/di
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="获取文件路径" scheme="https://mowatermelon.github.io/tags/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"/>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>js学习之修改相关浏览URL</title>
    <link href="https://mowatermelon.github.io/2017/04/29/js%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%AE%E6%94%B9%E7%9B%B8%E5%85%B3%E6%B5%8F%E8%A7%88URL/"/>
    <id>https://mowatermelon.github.io/2017/04/29/js学习之修改相关浏览URL/</id>
    <published>2017-04-28T16:00:00.000Z</published>
    <updated>2017-09-03T10:34:31.387Z</updated>
    
    <content type="html"><![CDATA[<p>1 c#后台获取当前界面的url<br>如果测试的url地址是<code>http://www.test.com/testweb/default.aspx</code>, 结果如下：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Request.ApplicationPath:                /testweb</div><div class="line">Request.CurrentExecutionFilePath:       /testweb/default.aspx</div><div class="line">Request.FilePath:                       /testweb/default.aspx</div><div class="line">Request.Path:                           /testweb/default.aspx</div><div class="line">Request.PhysicalApplicationPath:        E:\WWW\testwebRequest.</div><div class="line">PhysicalPath:                   E:\WWW\testweb\default.aspx</div><div class="line">Request.RawUrl:                         /testweb/default.aspx</div><div class="line">Request.Url.AbsolutePath:               /testweb/default.aspx</div><div class="line">Request.Url.AbsoluteUrl:                http://www.test.com/testweb/default.aspx</div><div class="line">Request.Url.Host:                       http://www.test.com/</div><div class="line">Request.Url.LocalPath:                  /testweb/default.aspx</div></pre></td></tr></table></figure></p>
  <a id="more"></a>
<p>2 前台修改相关url</p>
<ul>
<li>html标签跳转<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 以下方式只是刷新不跳转到其他页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 以下方式定时转到其他页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5;url=hello.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>优点：简单<br>缺点：<code>Struts Tiles</code>中无法使用</p>
</blockquote>
<ul>
<li>控制<code>parent</code>页面跳转，这个其实用不到<code>jQuery</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.parent.location.href = <span class="string">"*****"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>调用<code>parent</code>页面的函数，其实也不用<code>jQuery</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.parent.method(para);</div></pre></td></tr></table></figure>
<ul>
<li>操作<code>parent</code>的<code>DOM</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".test"</span>, <span class="built_in">window</span>.parent.document).remove();</div></pre></td></tr></table></figure>
<ul>
<li><p><code>location.href</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.loction.href=<span class="string">"/url"</span></div><div class="line"><span class="built_in">window</span>.location.href=<span class="string">"/url"</span></div></pre></td></tr></table></figure>
<p>  以上两个用法相同均为在当前页面打开URL页面</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.location.href=<span class="string">"/url"</span></div></pre></td></tr></table></figure>
<p>  当前页面打开URL</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parent.location.href=<span class="string">"/url"</span></div></pre></td></tr></table></figure>
<p>  在父页面打开新页面，如果页面中自定义了<code>frame</code>，那么可将<code>parent</code> <code>self</code> <code>top</code>换为自定义<code>frame</code>的名称,效果是在<code>frame</code>窗口打开url地址</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top.location.href=<span class="string">"/url"</span></div></pre></td></tr></table></figure>
<p>  在顶层页面打开新页面</p>
</li>
<li><p>关于刷新页面</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.location.href=<span class="built_in">window</span>.location.href</div><div class="line"></div><div class="line"><span class="built_in">window</span>.location.Reload()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>都是刷新当前页面。区别在于是否有提交数据。当有提交数据时，第二种会提示是否提交，第一种则是向指定的<code>url</code>提交数据</p>
<ul>
<li><code>js</code>获取<code>url</code>相关参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取地址栏的参数数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParams</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> search = <span class="built_in">window</span>.location.search;</div><div class="line">    <span class="comment">// 写入数据字典</span></div><div class="line">    <span class="keyword">var</span> tmparray = search.substr(<span class="number">1</span>, search.length).split(<span class="string">"&amp;"</span>);</div><div class="line">    <span class="keyword">var</span> paramsArray = <span class="keyword">new</span> <span class="built_in">Array</span>;</div><div class="line">    <span class="keyword">if</span> (tmparray != <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tmparray.length; i++) &#123;</div><div class="line">            <span class="keyword">var</span> reg = <span class="regexp">/[=|^==]/</span>;    <span class="comment">// 用=进行拆分，但不包括==</span></div><div class="line">            <span class="keyword">var</span> set1 = tmparray[i].replace(reg, <span class="string">'&amp;'</span>);</div><div class="line">            <span class="keyword">var</span> tmpStr2 = set1.split(<span class="string">'&amp;'</span>);</div><div class="line">            <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>;</div><div class="line">            array[tmpStr2[<span class="number">0</span>]] = tmpStr2[<span class="number">1</span>];</div><div class="line">            paramsArray.push(array);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将参数数组进行返回</span></div><div class="line">    <span class="keyword">return</span> paramsArray;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 根据参数名称获取参数值  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParamValue</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> paramsArray = getUrlParams();</div><div class="line">    <span class="keyword">if</span> (paramsArray != <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paramsArray.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> paramsArray[i]) &#123;</div><div class="line">                <span class="keyword">if</span> (j == name) &#123;</div><div class="line">                    <span class="keyword">return</span> paramsArray[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>js设置url相关参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Js修改Url参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeURLPar</span>(<span class="params">url, ref, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">'?'</span>) != <span class="number">-1</span>)</div><div class="line">        str = url.substr(url.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + ref + <span class="string">"="</span> + value;</div><div class="line">    <span class="keyword">var</span> returnurl = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> setparam = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> arr;</div><div class="line">    <span class="keyword">var</span> modify = <span class="string">"0"</span>;</div><div class="line">    <span class="keyword">if</span> (str.indexOf(<span class="string">'&amp;'</span>) != <span class="number">-1</span>) &#123;</div><div class="line">        arr = str.split(<span class="string">'&amp;'</span>);</div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> arr) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i].split(<span class="string">'='</span>)[<span class="number">0</span>] == ref) &#123;</div><div class="line">                setparam = value;</div><div class="line">                modify = <span class="string">"1"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                setparam = arr[i].split(<span class="string">'='</span>)[<span class="number">1</span>];</div><div class="line">            &#125;  </div><div class="line">            returnurl = returnurl + arr[i].split(<span class="string">'='</span>)[<span class="number">0</span>] + <span class="string">"="</span> + setparam + <span class="string">"&amp;"</span>;</div><div class="line">        &#125;</div><div class="line">        returnurl = returnurl.substr(<span class="number">0</span>, returnurl.length - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (modify == <span class="string">"0"</span>)</div><div class="line">            <span class="keyword">if</span> (returnurl == str)</div><div class="line">                returnurl = returnurl + <span class="string">"&amp;"</span> + ref + <span class="string">"="</span> + value;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">if</span> (str.indexOf(<span class="string">'='</span>) != <span class="number">-1</span>) &#123;</div><div class="line">            arr = str.split(<span class="string">'='</span>);</div><div class="line">            <span class="keyword">if</span> (arr[<span class="number">0</span>] == ref) &#123;</div><div class="line">                setparam = value;</div><div class="line">                modify = <span class="string">"1"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                setparam = arr[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            returnurl = arr[<span class="number">0</span>] + <span class="string">"="</span> + setparam;</div><div class="line">            <span class="keyword">if</span> (modify == <span class="string">"0"</span>)</div><div class="line">                <span class="keyword">if</span> (returnurl == str)</div><div class="line">                    returnurl = returnurl + <span class="string">"&amp;"</span> + ref + <span class="string">"="</span> + value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            returnurl = ref + <span class="string">"="</span> + value;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> url.substr(<span class="number">0</span>, url.indexOf(<span class="string">'?'</span>)) + <span class="string">"?"</span> + returnurl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://www.qttc.net/static/demo/html5_20130320/test.html">HTML5无刷新修改URL</a></p>
<p>HTML5新添加了两个<code>api</code>分别是<code>pushState</code>和<code>replaceState</code>，DOM中的<code>window</code>对象通过<code>window.history方</code>法提供了对浏览器历史记录的读取，可以在用户的访问记录中前进和后退，我们可以开始操作这个历史记录堆栈。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5无刷修改url - XXX<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeURL</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> url = <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).value;</span></div><div class="line"><span class="javascript">            <span class="built_in">window</span>.history.pushState(&#123;&#125;,<span class="number">0</span>,<span class="string">'http://'</span>+<span class="built_in">window</span>.location.host+<span class="string">'/'</span>+url);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>html5无刷新改变url<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"info"</span> <span class="attr">style</span>=<span class="string">"margin:30px 0;"</span>&gt;</span></div><div class="line">        页面真实地址:</div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="built_in">window</span>.location.href);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    请输入要改变地URL字符串：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'url'</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"changeURL();"</span>&gt;</span>点击无刷改变url<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red;margin-top:30px;"</span>&gt;</span>请使用支持html5的浏览器访问<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:30px;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.qttc.net/201303292.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>《html5无刷新改变URL》<span class="tag">&lt;/<span class="name">a</span>&gt;</span> - XXX<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="http://www.qttc.net/static/demo/html5_20130320/demo-page.html">HTML5模拟翻页效果</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> changeURL = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(location.href.indexOf(<span class="string">"?"</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">var</span> arr = location.href.split(<span class="string">'?'</span>);</div><div class="line">        <span class="keyword">var</span> urlbase = arr[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> pageObj = arr[<span class="number">1</span>].match(<span class="regexp">/page=(\d+)/</span>);</div><div class="line">        <span class="keyword">var</span> page = <span class="built_in">Number</span>(pageObj[<span class="number">1</span>]) || <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">var</span> urlbase = location.href;</div><div class="line">        <span class="keyword">var</span> page = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    load = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);   </div><div class="line">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">    <span class="comment">// 调用数据回掉函数</span></div><div class="line">    <span class="keyword">var</span> ajaxCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ajax.readyState == <span class="number">4</span>)&#123;</div><div class="line">            load = <span class="literal">false</span>;</div><div class="line">            result = <span class="built_in">eval</span>(<span class="string">'('</span>+ajax.responseText+<span class="string">')'</span>);</div><div class="line">            content.innerHTML = result.data;</div><div class="line">            next.href = urlbase + <span class="string">"?page="</span> + (page + <span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="comment">// push到历史记录里，可以在点击后退时从历史记录里恢复内容</span></div><div class="line">            <span class="comment">// 并且无刷修改url地址</span></div><div class="line">            <span class="built_in">window</span>.history.pushState(&#123;<span class="attr">content</span>:content.innerHTML,<span class="attr">page</span>:page&#125;,page,urlbase + <span class="string">"?page="</span> + page);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 点击事件</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'next'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!load)&#123;</div><div class="line">            load = <span class="literal">true</span>;</div><div class="line">            content.innerHTML = <span class="string">'加载中数据中...(注意看数据返回后url改变)'</span>;</div><div class="line">            page++;</div><div class="line">            ajax.open(<span class="string">'GET'</span>,<span class="string">'shuju.php?page='</span>+page, <span class="literal">true</span>);</div><div class="line">            ajax.onreadystatechange = ajaxCallback;</div><div class="line">            ajax.send(<span class="string">''</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">      <span class="comment">// 记录到历史里，当点击后退按钮还退回上次页面请求前的页面内容</span></div><div class="line">      <span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          content.innerHTML = history.state.content;</div><div class="line">          page = history.state.page;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 修改当前页面在 history 中的记录</span></div><div class="line">      <span class="built_in">window</span>.history.replaceState(&#123;<span class="attr">content</span>:content.innerHTML,<span class="attr">page</span>:page&#125;,page,urlbase + (page &gt; <span class="number">1</span> ? <span class="string">'?page='</span> + page : <span class="string">''</span> ));</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 检测是否支持</span></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="comment">//监听事件</span></div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, changeURL, <span class="literal">false</span>);</div><div class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">        alert(<span class="string">'浏览器不支持，请使用支持html5的浏览器'</span>);</div><div class="line">    &#125;</div><div class="line">  &lt;div id=<span class="string">"content"</span> style=<span class="string">"width:300px;height:100px;border:1px solid #999;"</span>&gt;第<span class="number">1</span>页的内容&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;div&gt;&lt;a id="next" href="?page=2"&gt;下一页&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"></div><div class="line">  &lt;div style=<span class="string">"color:red; margin-top:30px;"</span>&gt;请使用支持html5的浏览器测试&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;div&gt;&lt;a href="http:/</span><span class="regexp">/www.XXX.net"&gt;xxx&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>html5hash</p>
<p>  比如：我点击页面上的一个按钮，网址栏中的地址发生改变，但是页面不跳转也不刷新，但是我手动刷新此页面的时候，实际要刷新地址栏中的新地址  其实<code>HTML5</code>早就帮我们解决了 用<code>history.pushState</code> 详情： <a href="https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history">https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history</a>  </p>
<p>  <code>pushState</code>方法<br> <code>pushState()</code>有三个参数:<code>state</code>对象，<code>标题</code>(现在是被忽略，未作处理)，<code>URL</code>(可选)。具体细节</p>
<blockquote>
<p><code>state</code>对象</p>
</blockquote>
<p>  是一个<code>JavaScript</code>对象，它关系到由<code>pushState()</code>方法创建出来的新的<code>history</code>实体。用以存储关于你所要插入到历史记录的条目的相关信息。<code>State</code>对象可以是任何<code>Json</code>字符串。因为<code>firefox</code>会使用用户的硬盘来存取<code>state</code>对象，这个对象的最大存储空间为<code>640k</code>。如果大于这个数 值，则<code>pushState()</code>方法会抛出一个异常。如果确实需要更多的空间来存储，请使用本地存储。</p>
<blockquote>
<p>title</p>
</blockquote>
<p>  <code>firefox</code>现在回忽略这个参数，虽然它可能将来会被使用上。而现在最安全的使用方式是传一个空字符串，以防止将来的修改。或者可以传一个简短的标题来表示<code>state</code></p>
<blockquote>
<p>URL</p>
</blockquote>
<p>  这个参数用来传递新的<code>history</code>实体的<code>URL</code>，注意浏览器将不会在调用<code>pushState()</code>方法后加载这个<code>URL</code>。但也许会过一会尝试加载这个<code>URL</code>。比如在用户重启了浏览器后，新的<code>url</code>可以不是绝对路径。如果是相对路径，那么它会相对于现有的<code>url</code>。新的<code>url</code>必须和现有的<code>url</code>同域，否则<code>pushState()</code>将抛出异常。这个参数是选填的，如果为空，则会被置为<code>document</code>当前的<code>url</code>。</p>
<p>  某种意义上来说，调用<code>pushState()</code>方法很像设置了<code>window.location = “#foo”</code>,这两者都会<code>创建</code>和<code>激活</code>另一个关联到当前<code>document</code>的<code>history</code>实体，但<code>pushState()</code>另外有一些优点：</p>
<ul>
<li><p>新的<code>url</code>可以是任何和当前<code>url</code>同域的<code>url</code>，相比之下，如果只设置<code>hash</code>，<code>window.location</code>会保持在同一个<code>document</code>。</p>
</li>
<li><p>如果不需要，你可以不修改<code>url</code>。对比而言，设置<code>window.location = “#foo”;</code>仅产生新的<code>history</code>实体，如果你当前的<code>hash</code>不是<code>#foo</code></p>
</li>
<li><p>你可以将任意的数据与你的新<code>history</code>实体关联。使用基于<code>hash</code>的方法，需要将所有相关的数据编码为一个短字符串。</p>
<p>注意，<code>pushState()</code>方法不会使<code>hashchange</code>时间发生，即使是新旧<code>url</code>只是<code>hash</code>不同。</p>
<p>如浏览器地址为<code>http://localhost:8080/tts6/user/teachertts6?pMUploadHomework=success</code> 改变为<code>http://localhost:8080/tts6/user/teachertts6</code>   不用请求后台，直接改变<code>url</code>地址，怎么办了？很简单一句话</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//window.location为//http://localhost:8080/tts6/user/teachertts6?pMUploadHomework=success</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> state = &#123;<span class="attr">title</span>:<span class="string">''</span>,<span class="attr">url</span>:<span class="built_in">window</span>.location.href.split(<span class="string">"?"</span>)[<span class="number">0</span>]&#125;;</div><div class="line"></div><div class="line">    history.pushState(state,<span class="string">''</span>,<span class="string">'teachertts6'</span>);</div><div class="line"></div><div class="line"><span class="comment">//现在浏览器的地址变为//http://localhost:8080/tts6/user/teachertts6</span></div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 c#后台获取当前界面的url&lt;br&gt;如果测试的url地址是&lt;code&gt;http://www.test.com/testweb/default.aspx&lt;/code&gt;, 结果如下：&lt;br&gt;  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Request.ApplicationPath:                /testweb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.CurrentExecutionFilePath:       /testweb/default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.FilePath:                       /testweb/default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.Path:                           /testweb/default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.PhysicalApplicationPath:        E:\WWW\testwebRequest.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PhysicalPath:                   E:\WWW\testweb\default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.RawUrl:                         /testweb/default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.Url.AbsolutePath:               /testweb/default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.Url.AbsoluteUrl:                http://www.test.com/testweb/default.aspx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.Url.Host:                       http://www.test.com/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Request.Url.LocalPath:                  /testweb/default.aspx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="修改URL" scheme="https://mowatermelon.github.io/tags/%E4%BF%AE%E6%94%B9URL/"/>
    
  </entry>
  
  <entry>
    <title>Js学习之禁用常用按键事件</title>
    <link href="https://mowatermelon.github.io/2017/04/27/js%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A6%81%E7%94%A8%E5%B8%B8%E7%94%A8%E6%8C%89%E9%94%AE%E4%BA%8B%E4%BB%B6/"/>
    <id>https://mowatermelon.github.io/2017/04/27/js学习之禁用常用按键事件/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-09-03T09:50:40.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天项目需求，我在项目中使用backspace可以在input中进行删除事件，但是不能让backspace触发回退历史上一级的事件</p>
</blockquote>
<p>1 最开始我是准备直接监听backspace的keydown事件，直接禁用的，后期才发现，页面上有input是需要执行删除事件的这个也是需要判断的，这个时候是不能进行屏蔽的<code>event.returnValue = true</code>，后期才发现如果想禁用回退，也需要禁用<code>alt+&lt;-</code>,还有<code>alt+-&gt;</code>这边直接整合了一个版本，避免以后再次使用搜索。<br><a id="more"></a><br>2 jq中<code>event.which</code>返回: <code>Number</code><br>描述: 针对键盘和鼠标事件，这个属性能确定你到底按的是哪个键。</p>
<p><code>event.which</code> 将 <code>event.keyCode</code> 和 <code>event.charCode</code> 标准化了。推荐用 <code>event.which</code> 来监视键盘输入。更多细节请参阅： <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode#Notes"><code>event.charCode on the MDC</code></a>.</p>
<p><code>event.which</code>也将正常化的按钮按下(<code>mousedown</code> 和 <code>mouseupevents</code>)，左键报告<code>1</code>，中间键报告<code>2</code>，右键报告<code>3</code>。使用<code>event.which</code>代替<code>event.button</code>。所以代码中的没有出现<code>event.keyCode</code></p>
<p>3 万恶的ie，我这边主要在页面主框架页面调用了<code>checkBack()</code>,以为就好了，界面在页面中的<code>iframe</code>中还是会触发回退事件，结果我在第二级子页面框架中也调用了<code>checkBack()</code>，这边效果才好，在谷歌中其他按钮事件好像就禁用了，但是在<code>ie</code>中还是有部分问题，第一次认识到<code>iframe</code>其实内部回退机制和在主框架中的回退机制不同，这边之前只把它当作普通标签对，真的对不起他啊.还有在div中其实也可触发回退事件，我感觉我的真的是太乐观了。</p>
<p>4 上完整代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//页面上进行调用</span></div><div class="line">$(<span class="string">"body,iframe"</span>).bind(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    &lt;%</div><div class="line">    Response.Buffer=<span class="literal">true</span>;                 <span class="comment">//在asp中可以这个样子设置清除缓存</span></div><div class="line">    Response.CacheControl=<span class="string">"no-cache"</span>;    <span class="comment">//'禁止代理服务器缓存本页面</span></div><div class="line">    Response.Expires=<span class="number">-1000</span>;                        <span class="comment">//'让页面立即过期(这儿最好设置一个绝对值较大的负数)</span></div><div class="line">    %&gt;</div><div class="line">    checkBack();</div><div class="line">&#125;);</div><div class="line"><span class="comment">//监听backspace的操作对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBack</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 兼容FF和IE和Opera    </span></div><div class="line">        <span class="keyword">var</span> Event = event || <span class="built_in">window</span>.event;    </div><div class="line">        <span class="comment">//获取事件对象    </span></div><div class="line">        <span class="keyword">var</span> elem = Event.relatedTarget || Event.srcElement || Event.target || Event.currentTarget;</div><div class="line">        <span class="comment">//console.log("Event.which" + Event.which);</span></div><div class="line">        <span class="keyword">if</span> (Event.which == <span class="number">8</span>) &#123;<span class="comment">//判断按键为backSpace键    </span></div><div class="line"></div><div class="line">                <span class="comment">//获取按键按下时光标做指向的element    </span></div><div class="line">                <span class="keyword">var</span> elem = Event.srcElement || Event.currentTarget;     </div><div class="line"></div><div class="line">                <span class="comment">//判断是否需要阻止按下键盘的事件默认传递    </span></div><div class="line">                <span class="keyword">var</span> name = elem.nodeName;    </div><div class="line"></div><div class="line">                <span class="keyword">if</span>(name!=<span class="string">'INPUT'</span> &amp;&amp; name!=<span class="string">'TEXTAREA'</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> _stopIt(Event);    </div><div class="line">                &#125;    </div><div class="line">                <span class="keyword">var</span> type_e = elem.type.toUpperCase();    </div><div class="line">                <span class="keyword">if</span>(name==<span class="string">'INPUT'</span> &amp;&amp; (type_e!=<span class="string">'TEXT'</span> &amp;&amp; type_e!=<span class="string">'TEXTAREA'</span> &amp;&amp; type_e!=<span class="string">'PASSWORD'</span> &amp;&amp; type_e!=<span class="string">'FILE'</span>))&#123;</div><div class="line">                    <span class="keyword">return</span> _stopIt(Event);    </div><div class="line">                &#125;    </div><div class="line">                <span class="keyword">if</span>(name==<span class="string">'INPUT'</span> &amp;&amp; (elem.readOnly==<span class="literal">true</span> || elem.disabled ==<span class="literal">true</span>))&#123;</div><div class="line">                    <span class="keyword">return</span> _stopIt(Event);    </div><div class="line">                &#125;</div><div class="line">                &#125;</div><div class="line">        $(<span class="built_in">window</span>).bind(<span class="string">"help"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             <span class="keyword">return</span> <span class="literal">false</span>      <span class="comment">//屏蔽F1帮助  </span></div><div class="line">         &#125;);</div><div class="line">         $(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              event.returnValue = <span class="literal">false</span>; <span class="comment">//屏蔽鼠标右键</span></div><div class="line">         &#125;);</div><div class="line">         onkeydown(Event);</div><div class="line"></div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="comment">//判断是否需要阻断backspace的事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_stopIt</span>(<span class="params">e</span>)</span>&#123;    </div><div class="line">        <span class="keyword">if</span>(e.returnValue)&#123;    </div><div class="line">            e.returnValue = <span class="literal">false</span> ;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">if</span>(e.preventDefault )&#123;    </div><div class="line">            e.preventDefault();    </div><div class="line">        &#125;                   </div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听其他按键的事件执行状态</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onkeydown</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">//console.log("event.which" + event.which);</span></div><div class="line">    <span class="keyword">if</span> ((event.altKey) &amp;&amp;((event.which == <span class="number">37</span>) || <span class="comment">//屏蔽Alt+方向键←    </span></div><div class="line"></div><div class="line">2(event.which == <span class="number">39</span>))) &#123; <span class="comment">//屏蔽Alt+方向键→</span></div><div class="line"></div><div class="line">        <span class="comment">//console.log("不准你使用ALT+方向键前进或后退网页！");</span></div><div class="line"></div><div class="line">        event.returnValue = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((event.which == <span class="number">116</span>) || <span class="comment">//屏蔽F5刷新键    </span></div><div class="line"></div><div class="line">2(event.ctrlKey &amp;&amp; event.which == <span class="number">82</span>)) &#123; <span class="comment">//Ctrl+R    </span></div><div class="line"></div><div class="line">        event.which = <span class="number">0</span>;</div><div class="line"></div><div class="line">        event.returnValue = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (event.which == <span class="number">122</span>) &#123;</div><div class="line">        event.which = <span class="number">0</span>;</div><div class="line">        event.returnValue = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="comment">//屏蔽F11    </span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (event.ctrlKey &amp;&amp; event.which == <span class="number">78</span>) event.returnValue = <span class="literal">false</span>; <span class="comment">//屏蔽Ctrl+n    </span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (event.shiftKey &amp;&amp; event.which == <span class="number">121</span>) event.returnValue = <span class="literal">false</span>; <span class="comment">//屏蔽shift+F10    </span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (event.srcElement.tagName == <span class="string">"A"</span> &amp;&amp; event.shiftKey)</div><div class="line"></div><div class="line">        event.returnValue = <span class="literal">false</span>; <span class="comment">//屏蔽shift加鼠标左键新开一网页    </span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((event.altKey) &amp;&amp; (event.which == <span class="number">115</span>)) &#123; <span class="comment">//屏蔽Alt+F4     </span></div><div class="line"></div><div class="line">        showModelessDialog(<span class="string">"about:blank"</span>, <span class="string">""</span>, <span class="string">"dialogWidth:1px;dialogheight:1px"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>5 后续更新</p>
<p>我最初在需要禁用的主页面框架中添加的是如下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//版本一</span></div><div class="line">$(<span class="string">"document,iframe"</span>).bind(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    &lt;%</div><div class="line">    Response.Buffer=<span class="literal">true</span>;</div><div class="line">    Response.CacheControl=<span class="string">"no-cache"</span>;    <span class="comment">//'禁止代理服务器缓存本页面</span></div><div class="line">    Response.Expires=<span class="number">-1000</span>;                        <span class="comment">//'让页面立即过期(这儿最好设置一个绝对值较大的负数)</span></div><div class="line">    %&gt;</div><div class="line">    checkBack();</div><div class="line">&#125;);</div><div class="line"><span class="comment">//版本二</span></div><div class="line"><span class="built_in">window</span>.onload =<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].onkeydown = checkBack;</div><div class="line">&#125;</div><div class="line"><span class="comment">//版本三</span></div><div class="line"><span class="built_in">window</span>.onload =<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      checkBack();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//版本四</span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//禁止后退键 作用于Firefox、Opera</span></div><div class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].onkeypress = checkBack;</div><div class="line">  <span class="comment">//禁止后退键  作用于IE、Chrome</span></div><div class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].onkeydown = checkBack;  </div><div class="line">&#125;)</div><div class="line"><span class="comment">//控制流程相关核心代码</span></div><div class="line">url = url + <span class="string">"?XXXX="</span> + XXXX +<span class="string">'&amp;new='</span> + <span class="built_in">Math</span>.random();</div><div class="line">$(<span class="string">"#XXX"</span>).attr(<span class="string">"src"</span>, url);</div><div class="line"><span class="comment">//控制流程代码方式切换尝试</span></div><div class="line"><span class="comment">//XXX.location.repalce(url + '?new=' + Math.random());</span></div><div class="line"><span class="comment">//alert(XXX.Src);</span></div><div class="line"><span class="comment">//XXX.location.repalce=url + '?new=' + Math.random();</span></div><div class="line"><span class="comment">//XXX.location.href=url + '?new=' + Math.random();</span></div></pre></td></tr></table></figure></p>
<p>然后在谷歌中页面大部分都好了，流程中的iframe也不会乱跳,但是在ie中就是不听话咯，所以我想了一个比较笨的方法，每个页面都添加了<code>checkBack()</code>,结果在ie9中点击iframe空白处还是会触发<code>iframe</code>回退,这边我尝试修改页面跳转方式，这边还是有些问题，不过在我本机的ie11中点击流程的<code>iframe</code>空白处,暂时没有触发回退事件，这边希望之后找到更好的解决办法，再来更新一波。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天项目需求，我在项目中使用backspace可以在input中进行删除事件，但是不能让backspace触发回退历史上一级的事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1 最开始我是准备直接监听backspace的keydown事件，直接禁用的，后期才发现，页面上有input是需要执行删除事件的这个也是需要判断的，这个时候是不能进行屏蔽的&lt;code&gt;event.returnValue = true&lt;/code&gt;，后期才发现如果想禁用回退，也需要禁用&lt;code&gt;alt+&amp;lt;-&lt;/code&gt;,还有&lt;code&gt;alt+-&amp;gt;&lt;/code&gt;这边直接整合了一个版本，避免以后再次使用搜索。&lt;br&gt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="禁用按键" scheme="https://mowatermelon.github.io/tags/%E7%A6%81%E7%94%A8%E6%8C%89%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Js学习之获取当前的屏幕相关高度</title>
    <link href="https://mowatermelon.github.io/2017/04/26/js%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9A%84%E5%B1%8F%E5%B9%95%E7%9B%B8%E5%85%B3%E9%AB%98%E5%BA%A6/"/>
    <id>https://mowatermelon.github.io/2017/04/26/js学习之获取当前的屏幕相关高度/</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-09-03T10:38:38.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Javascript:</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//IE中：</span></div><div class="line"><span class="built_in">document</span>.body.clientWidth <span class="comment">// BODY对象宽度</span></div><div class="line"><span class="built_in">document</span>.body.clientHeight <span class="comment">// BODY对象高度</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientWidth <span class="comment">// 可见区域宽度</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientHeight <span class="comment">// 可见区域高度</span></div><div class="line"><span class="comment">//FireFox中：</span></div><div class="line"><span class="built_in">document</span>.body.clientWidth <span class="comment">// BODY对象宽度</span></div><div class="line"><span class="built_in">document</span>.body.clientHeight <span class="comment">// BODY对象高度</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientWidth <span class="comment">// 可见区域宽度</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientHeight <span class="comment">// 可见区域高度</span></div><div class="line"><span class="comment">//Opera中：</span></div><div class="line"><span class="built_in">document</span>.body.clientWidth <span class="comment">// 可见区域宽度</span></div><div class="line"><span class="built_in">document</span>.body.clientHeight <span class="comment">// 可见区域高度</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientWidth <span class="comment">// 页面对象宽度（即BODY对象宽度加上Margin宽）</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientHeight <span class="comment">// 页面对象高度（即BODY对象高度加上Margin高）</span></div><div class="line"></div><div class="line"><span class="comment">//通用：</span></div><div class="line"><span class="built_in">document</span>.body.clientWidth<span class="comment">//网页可见区域宽</span></div><div class="line"><span class="built_in">document</span>.body.clientHeight<span class="comment">//网页可见区域高</span></div><div class="line"><span class="built_in">document</span>.body.offsetWidth <span class="comment">//网页可见区域宽(包括边线的宽)</span></div><div class="line"><span class="built_in">document</span>.body.offsetHeight <span class="comment">//网页可见区域高(包括边线的高)</span></div><div class="line"><span class="built_in">document</span>.body.scrollWidth<span class="comment">//网页正文全文宽</span></div><div class="line"><span class="built_in">document</span>.body.scrollHeight<span class="comment">//网页正文全文高</span></div><div class="line"><span class="built_in">document</span>.body.scrollTop<span class="comment">//网页被卷去的高</span></div><div class="line"><span class="built_in">document</span>.body.scrollLeft<span class="comment">//网页被卷去的左</span></div><div class="line"><span class="built_in">window</span>.screenTop<span class="comment">//网页正文部分上</span></div><div class="line"><span class="built_in">window</span>.screenLeft<span class="comment">//网页正文部分左</span></div><div class="line"><span class="built_in">window</span>.screen.height<span class="comment">//屏幕分辨率的高</span></div><div class="line"><span class="built_in">window</span>.screen.width<span class="comment">//屏幕分辨率的宽</span></div><div class="line"><span class="built_in">window</span>.screen.availHeight<span class="comment">//屏幕可用工作区高度</span></div><div class="line"><span class="built_in">window</span>.screen.availWidth<span class="comment">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>
<blockquote>
<p>JQ</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).height() <span class="comment">//浏览器当前窗口可视区域高度</span></div><div class="line">$(<span class="built_in">document</span>).height() <span class="comment">//浏览器当前窗口文档的高度</span></div><div class="line">$(<span class="built_in">document</span>.body).height()/浏览器当前窗口文档body的高度</div><div class="line">$(<span class="built_in">document</span>.body).outerHeight(<span class="literal">true</span>)<span class="comment">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class="line">$(<span class="built_in">window</span>).width()<span class="comment">//浏览器当前窗口可视区域宽度</span></div><div class="line">$(<span class="built_in">document</span>).width()<span class="comment">//浏览器当前窗口文档对象宽度</span></div><div class="line">$(<span class="built_in">document</span>.body).width()<span class="comment">//浏览器当前窗口文档body的宽度</span></div><div class="line">$(<span class="built_in">document</span>.body).outerWidth(<span class="literal">true</span>)<span class="comment">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Javascript:&lt;/p&gt;
&lt;/blockquote&gt;
  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="屏幕参数" scheme="https://mowatermelon.github.io/tags/%E5%B1%8F%E5%B9%95%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>知识储备之Html5本地存储学习</title>
    <link href="https://mowatermelon.github.io/2017/04/25/html5%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://mowatermelon.github.io/2017/04/25/html5本地存储学习/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2017-09-03T10:44:39.009Z</updated>
    
    <content type="html"><![CDATA[<p>参考网站<a href="http://www.cnblogs.com/st-leslie/p/5617130.html">博客园–谢灿勇</a>,<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage">developer.mozilla</a><br>localStorage只支持string类型的存储,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 保存数据到localStorage</span></div><div class="line"><span class="built_in">window</span>.localStorage.setItem(<span class="string">'key'</span>, <span class="string">'value'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 从localStorage获取数据</span></div><div class="line"><span class="keyword">var</span> data = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'key'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 从localStorage删除保存的数据</span></div><div class="line"><span class="built_in">window</span>.localStorage.removeItem(<span class="string">'key'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 从localStorage删除所有保存的数据</span></div><div class="line"><span class="built_in">window</span>.localStorage.clear();</div><div class="line"></div><div class="line"><span class="comment">// 保存数据到sessionStorage</span></div><div class="line"><span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'key'</span>, <span class="string">'value'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 从sessionStorage获取数据</span></div><div class="line"><span class="keyword">var</span> data = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'key'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 从sessionStorage删除保存的数据</span></div><div class="line"><span class="built_in">window</span>.sessionStorage.removeItem(<span class="string">'key'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 从sessionStorage删除所有保存的数据</span></div><div class="line"><span class="built_in">window</span>.sessionStorage.clear();</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>localStorage使用的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> storage=<span class="built_in">window</span>.localStorage;</div><div class="line">            <span class="keyword">var</span> data=&#123;</div><div class="line">                name:<span class="string">'xiecanyong'</span>,</div><div class="line">                sex:<span class="string">'man'</span>,</div><div class="line">                hobby:<span class="string">'program'</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">var</span> d=<span class="built_in">JSON</span>.stringify(data);</div><div class="line">            storage.setItem(<span class="string">"data"</span>,d);</div><div class="line">            <span class="comment">//将JSON字符串转换成为JSON对象输出</span></div><div class="line">            <span class="keyword">var</span> json=storage.getItem(<span class="string">"data"</span>);</div><div class="line">            <span class="keyword">var</span> jsonObj=<span class="built_in">JSON</span>.parse(json);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> jsonObj);</div></pre></td></tr></table></figure></p>
<p>sessionStorage使用的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取文本输入框</span></div><div class="line"><span class="keyword">var</span> field = <span class="built_in">document</span>.getElementById(<span class="string">"field"</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 检测是否存在 autosave 键值</span></div><div class="line"><span class="comment">// (这个会在页面偶然被刷新的情况下存在)</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"autosave"</span>)) &#123;</div><div class="line">  <span class="comment">// 恢复文本输入框的内容</span></div><div class="line">  field.value = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"autosave"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 监听文本输入框的 change 事件</span></div><div class="line">field.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 保存结果到 sessionStorage 对象中</span></div><div class="line">  <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"autosave"</span>, field.value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>目前pc浏览器支持状态</p>
<table>
<thead>
<tr>
<th style="text-align:left">Feature</th>
<th style="text-align:left">Chrome</th>
<th style="text-align:left">Firefox (Gecko)</th>
<th style="text-align:left">Internet Explorer</th>
<th style="text-align:left">Opera</th>
<th style="text-align:left">Safari (WebKit)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">localStorage</td>
<td style="text-align:left">4</td>
<td style="text-align:left">3.5</td>
<td style="text-align:left">8</td>
<td style="text-align:left">10.50</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">sessionStorage</td>
<td style="text-align:left">5</td>
<td style="text-align:left">2</td>
<td style="text-align:left">8</td>
<td style="text-align:left">10.50</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<p>目前手机浏览器支持状况</p>
<table>
<thead>
<tr>
<th style="text-align:left">Feature</th>
<th style="text-align:left">Android</th>
<th style="text-align:left">Firefox Mobile (Gecko)</th>
<th style="text-align:left">IE Phone</th>
<th style="text-align:left">Opera Mobile</th>
<th style="text-align:left">Safari Mobile</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Basic support</td>
<td style="text-align:left">2.1</td>
<td style="text-align:left">?</td>
<td style="text-align:left">8</td>
<td style="text-align:left">11</td>
<td style="text-align:left">iOS 3.2</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考网站&lt;a href=&quot;http://www.cnblogs.com/st-leslie/p/5617130.html&quot;&gt;博客园–谢灿勇&lt;/a&gt;,&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage&quot;&gt;developer.mozilla&lt;/a&gt;&lt;br&gt;localStorage只支持string类型的存储,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 保存数据到localStorage&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.setItem(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从localStorage获取数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.getItem(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从localStorage删除保存的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.removeItem(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从localStorage删除所有保存的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.clear();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 保存数据到sessionStorage&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.sessionStorage.setItem(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从sessionStorage获取数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.sessionStorage.getItem(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从sessionStorage删除保存的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.sessionStorage.removeItem(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从sessionStorage删除所有保存的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.sessionStorage.clear();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="知识储备" scheme="https://mowatermelon.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
      <category term="html5" scheme="https://mowatermelon.github.io/tags/html5/"/>
    
      <category term="localStorage" scheme="https://mowatermelon.github.io/tags/localStorage/"/>
    
      <category term="知识储备" scheme="https://mowatermelon.github.io/tags/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>知识储备之`体素`了解（转载）</title>
    <link href="https://mowatermelon.github.io/2017/04/24/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%E4%B9%8B%E4%BD%93%E7%B4%A0%E4%BA%86%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://mowatermelon.github.io/2017/04/24/知识储备之体素了解（转载）/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2017-09-03T11:08:41.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么是体素（Voxel）"><a href="#为什么是体素（Voxel）" class="headerlink" title="为什么是体素（Voxel）"></a>为什么是<code>体素</code>（<code>Voxel</code>）</h1><blockquote>
<p><a href="http://www.weibo.com/p/1001603815576152719467">原文地址</a></p>
</blockquote>
<p>tags:<code>程序员</code>,<code>Unity3D</code>,<code>游戏设计</code></p>
<p>&nbsp;&nbsp;“对不起，美术外包这件事情，多少钱也不能接了。”朋友在微信里面发消息过来，“现在活儿太多，都忙不过来了。”</p>
<p>然后我就知道我们的游戏似乎找不到美术帮忙做特效了，如果有朋友看到这里，碰巧有认识的朋友在做这方面的工作，不妨给介绍一下。</p>
<p>回想起刚毕业那段日子里，对程序员来说真是 很好的时代。那时候程序员到哪里都是团队的核心。经常会有一些有创意的美术会找我们，就算是年长十岁的前辈，也会低声下气的请吃一顿饭，然后说：我有一个不错的游戏创意，求帮忙实现一下吧。然后毕恭毕敬的倒上一杯啤酒。<br><a id="more"></a><br>许久之后之后，但不知道确切是从什么时候开始的，现在想起来似乎可能是Unity3D引擎出现之后吧，这个好日子就到头了。那些 美术家发现，用了引擎之后，原来写个程序也不是什么很困难的事情啊。随便学一些脚本，加上美术资源，套用一些流行的插件，两三个月之后，一个还不错的，很漂亮的游戏就能制作出来了。从此之后，美术家再也不需要搭理我们这些屌丝程序员了。</p>
<p>好的工具和引擎，让开发过程变得简单易用，这必是极好的 事情。但是作为一个程序员，难免有些孤寂的落寞。</p>
<p>所以我需要找到一个可以不需要依赖别的美术家就能自己开发游戏的方法和工具，这时候，看到了<code>体素</code>（<code>Voxel</code>）。</p>
<p><code>体素</code>简单来说就是立体像素，是用一个个立方体来组成三维模型的方法。就如同一个生物是由很多细胞组成的一样，<code>体素</code>认为一个3D模型是有很多细微的单元组成，相对于传统的三角片表示，这更接近于物理的真实。</p>
<p>但在这里，出于我们的需要，我们只关注<code>体素</code>的艺术概念，而不是技术方向。所谓<code>体素艺术</code>，是用尽量少的<code>体素</code>元素来组成的3D模型。对于很多人来说，这种类似于2D像素风格的表现形式，能给他们带来简单而变态的美感。</p>
<p>我看到<code>体素艺术</code>，不单独是因为我对艺术的修养，而是没有艺术基础的我只能搞这个。相对于其他艺术形式，<code>体素艺术</code>更适合于程序员来操控，因为其3D的特性，我们可以用很多图形学或游戏物理学的手段建立很多漂亮的特效和动画。</p>
<p>但是这里最大的问题是，我如何能创造出<code>体素</code>模型呢，三年前的<code>GameJam</code>上面我曾经自己做了一个<code>体素</code>编辑器，也做过一个简单的游戏，但是因为超级难用也不怎么好看我也就把它遗忘在尘封的往事中了。</p>
<p>我开始寻找好的<code>体素</code>编辑器，我在网上搜索到<code>Magica Voxel</code>这个很不错的工具，虽然不是开源 但是其文件格式是开放的就能很好的应用到我将来的游戏里面。然后我就开始找这个资料，在微博里面看到<a href="http://weibo.com/gltracy"><code>@gltracyl</code></a>也发了很多关于<code>Magica Voxel</code>的帖子，我说：兄弟好巧啊，幸会，你也在研究这个工具<br>。<code>@gltracyl</code> 说，啊，不好意思啊，那个<code>Magica Voxel</code> 是我在开发和维护的。 ——请收下我的膝盖。</p>
<table>
<thead>
<tr>
<th style="text-align:left">layout</th>
<th style="text-align:left">title</th>
<th style="text-align:left">subtitle</th>
<th style="text-align:left">tags</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">post</td>
<td style="text-align:left"><code>Magica Voxel</code> <code>体素</code>建模软件</td>
<td style="text-align:left"><code>Magica Voxel</code>：A free lightweight 8-bit <code>Voxel</code> editor and interactive path tracing renderer, enjoy :)</td>
<td style="text-align:left"><code>美术</code>,<code>建模</code>,<code>体素</code></td>
</tr>
</tbody>
</table>
<p>像素画，这个词想必都听说过。像下面这样的美术风格，我们可能就比较宽泛的定义为像素画，点阵图等等。以其特殊的美术风格以及这两年的怀旧兴起，像素风格普遍的应用在这几年在国内外的游戏中。</p>
<p>好吧，之后考虑如何在游戏里面使用，为了自己能得到更多的可控性，我决定自己写一个<code>Unity3D</code>里面的文件解析工具，然后自己渲染出来。 在开始时候我有个想法是这个东西最终要在手机上面进行，所以尽量能提高渲染效率而不是渲染效果，所以从开始的时候就没打算用任何光照，也基本上没用什么纹理，然后通过比较傻瓜的算法让整个模型只有一个渲染批次这样渲染效率理应会快很多。</p>
<p>然后我又开始做一些比如爆炸什么的效果，在爆炸瞬间，模型从一个完整的<code>Mesh</code>分解成很多很多立方体<code>Voxel</code>，然后崩裂出去。我也做了变型效果，单没有想象的那么漂亮。</p>
<blockquote>
<p>在这个过程中发现了<code>体素</code>的更多的奇妙的优点：</p>
</blockquote>
<p>1 <code>体素</code>模型是基于 数据而不是基于资源，所以占用内存和硬盘的空间会非常小，如果用点心，几百个游戏可能只有几兆字节这样的极限也可能达到。</p>
<p>2 <code>体素</code>是真实的一个一个的体积元素，他们是真实的物理数据，如果开发者愿意，可以在这个数据上添加更多的流量咯信息，比如一把<code>体素</code>剑，你可以把其中一个元素绑定冰属性 攻击，另外一个元素绑定火属性攻击。如果这样做，在游戏的逻辑的配合下下能带来无尽的可能。</p>
<p>3 易创造，相对于传统的基于三角面的三维模型而言，<code>体素</code>是更接近于物理真实状态的模型。更适合人类创建编辑。打个比方说，我给你一个<code>体素</code>堆，用户可以 好像木雕一样直接从上面销出一个喜欢的杯子或者足球。但是一样三角面模型，你不得不去考虑每个面片之间的拓扑关系。对于非专业的模型创建者，<code>体素</code>模型更适合，</p>
<p>4 易编辑，因为是基于数据本身而不是资源，<code>体素</code>模型更容易被编辑，特别是程序运行期间编辑，比如你可以在游戏中用<code>体素</code>模型给自己铸造一个武器，拼装一个机器战甲这些，对于<code>体素</code>模型来说，都是手到擒来的事情。</p>
<p>发现到这些，我的野心开始慢慢的膨胀了。这不单单是一堆方块而已，而是屌丝程序员对土豪美术家的集体逆袭啊。</p>
<p>我打算把我的（简陋的）代码公布出去，然后把自己使用的以及在网上找到的美术资源也一起放到网上去让所有被美术家抛弃的角落里破落的程序员能得到充足的弹药反击。</p>
<hr>
<p>这时候我看到了 国外一个网站<code>Sketchfab</code>，它号称自己是<code>3D模型</code>的<code>YouTube</code>，他让用户可以上传自己的<code>3D模型</code>然后展示给别人，然后他们用这个点子忽悠了很多钱。</p>
<p>然后我忽然醒悟，我TMD可以直接<code>致敬</code>他们的网站啊， 只是我的网站不是传统的模型，而只是<code>体素</code>而已。他们是高大上的只有专业人士才能开发的模型，而我这里只需要保存每个普通人都能构建的“乐高积木”就好。我也想了个口号，我们是<code>3D模型</code>的<code>twitter</code>。任何人都可以简单创造分享获得一个艺术话的<code>体素</code>模型。</p>
<p>我的投资人提出一点质疑 ，说人家的模型是大众化的，你的太小众了吧。</p>
<p>我想了一下，其实然也不然，本质上我们的网站和<code>Sketchfab</code>完全不同，他是一个专业的<code>SaaS</code> （软件既服务）网站，提供给专业人士专业的服务。而我们是一个简单的快乐的<code>UGC</code>（用户创造内容），让每个黎民百姓都可以低成本的展示自己的点子和创意。他们是贵族的雕塑学院，我们就只要做幼儿园的<code>乐高积木</code>游戏班就好。</p>
<blockquote>
<p>对没错，我们有自己的优势：</p>
</blockquote>
<p>1 我们可以提供在线编辑功能，任何人十分钟就可以创造一个新的模型。</p>
<p>2 我们的所有的资源风格统一，你可以任意组合别人的模型创建巨大的艺术场景。</p>
<p>3 我们可以简单的实体化，通过3D打印机和软陶等技术我们可以把模型做成现实的艺术品，你说传统模型也能做啊，但是我告诉你这个成本是天壤之别。</p>
<p>4 我们是游戏的胚胎，一个专业的模型因为精度的原因未必能很好的适应游戏开发，但我们的模型天生就是为了游戏开发而做的，在 后面我们可以提供大量的游戏资源而Sketchfab基本做不到。</p>
<blockquote>
<p>也就是说，我们的表现差但是受众更广阔，我们是模型届的 twitter，或者也可以说我们是模型届的新浪微博把。</p>
</blockquote>
<p>说做就做，我学了一点<code>bootstrap</code>的皮毛就开始建立网站了。因为我之前用<code>Unity3D</code>做了<code>体素</code>的渲器，所以在开始的时候我打算直接用<code>Unity3D</code>导出一个网页版本的插件就直接放在网站上，这样可以让我的工作量最少并且可以让代码的复用律最高。</p>
<p><em>但是华丽丽的失败了。</em></p>
<p>因为<code>Unity3D</code>网页导出根本没办法适应所有的浏览器，层次没办法管理，载入时间过长，不同浏览器表现效果迥异。我他妈的真想放弃了，再去看看<code>Sketchfab</code>，因为是使用<code>Html5</code>进行渲染，所以可以很好的适配不同的平台和浏览器。</p>
<p>摆在我面前两条路，一是等<code>Unity3D</code>之后出了<code>Html5</code>导出插件我再去做这个网站 ，二是摆脱<code>Unity3D</code>重新写一个<code>Html5</code>的<code>Voxel</code>渲染器。尼玛，<strong>屌丝程序员的逆袭是不可阻挡和耽误的</strong>，我选择了后者。</p>
<p>可这个选择谈何容易，我基本上已经两三年没碰过Html5的代码，在技术日新月异的今天，基本上等于重新学习一门新的技术了。而且我是一个35岁的老程序员了，随着年龄的增加，智商这东西也飞流直下三千尺了。一点一点肯文档也谈何容易。</p>
<p>但是俗话说的好：功夫不负苦心人，屌丝也有出头日。<strong>我他妈的就真正的搞出来了_</strong>，底层用了<strong>three.js库</strong>，因为这个原因，比 <code>Sketchfab</code>还牛，在不支持<code>WebGL</code>的平台上，<code>three.js</code>帮我使用了软渲染功能来模型三维模型。也就是说，我们的网站基本上可以跑在任何平台上了。</p>
<blockquote>
<p>总结下，这世界上有两个东西是拦不住的，一个是<strong>土豪的钱</strong>，一个是<strong>屌丝逆袭的心</strong>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么是体素（Voxel）&quot;&gt;&lt;a href=&quot;#为什么是体素（Voxel）&quot; class=&quot;headerlink&quot; title=&quot;为什么是体素（Voxel）&quot;&gt;&lt;/a&gt;为什么是&lt;code&gt;体素&lt;/code&gt;（&lt;code&gt;Voxel&lt;/code&gt;）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.weibo.com/p/1001603815576152719467&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tags:&lt;code&gt;程序员&lt;/code&gt;,&lt;code&gt;Unity3D&lt;/code&gt;,&lt;code&gt;游戏设计&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;“对不起，美术外包这件事情，多少钱也不能接了。”朋友在微信里面发消息过来，“现在活儿太多，都忙不过来了。”&lt;/p&gt;
&lt;p&gt;然后我就知道我们的游戏似乎找不到美术帮忙做特效了，如果有朋友看到这里，碰巧有认识的朋友在做这方面的工作，不妨给介绍一下。&lt;/p&gt;
&lt;p&gt;回想起刚毕业那段日子里，对程序员来说真是 很好的时代。那时候程序员到哪里都是团队的核心。经常会有一些有创意的美术会找我们，就算是年长十岁的前辈，也会低声下气的请吃一顿饭，然后说：我有一个不错的游戏创意，求帮忙实现一下吧。然后毕恭毕敬的倒上一杯啤酒。&lt;br&gt;
    
    </summary>
    
      <category term="知识储备" scheme="https://mowatermelon.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
      <category term="知识储备" scheme="https://mowatermelon.github.io/tags/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
      <category term="体素了解" scheme="https://mowatermelon.github.io/tags/%E4%BD%93%E7%B4%A0%E4%BA%86%E8%A7%A3/"/>
    
      <category term="转载" scheme="https://mowatermelon.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>样式之OOCSS</title>
    <link href="https://mowatermelon.github.io/2017/04/23/%E6%A0%B7%E5%BC%8F%E4%B9%8BOOCSS/"/>
    <id>https://mowatermelon.github.io/2017/04/23/样式之OOCSS/</id>
    <published>2017-04-22T16:00:00.000Z</published>
    <updated>2017-09-03T10:53:53.844Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>1 定义<br> OOCSS将页面可重用元素抽象成一个类，用class加以描述，而其对应的html即可以堪称是此类的一个实例，具有封装，继承，对象特性</p>
</li>
<li><p>2 作用</p>
<ul>
<li>2.1 加强代码复用方便维护</li>
<li>2.2 减少体积</li>
<li>2.3 提升渲染效率</li>
<li>2.4 组件库思想，栅格布局可共用，减少选择器，方便扩展</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>3 注意事项</p>
<ul>
<li><p>3.1 不要直接定义子节点，使用多层嵌套后代选择器，应该把共性声明放到父类中</p>
<blockquote>
<p>即可继承的样式，就直接在父级定义</p>
</blockquote>
</li>
<li><p>3.2 结构和皮肤像分离</p>
<blockquote>
<p>可分离的样式应该分开独立，减少耦合</p>
</blockquote>
</li>
<li><p>3.3 容器和内容相分离</p>
<blockquote>
<p>大体框架控制布局，具体板块的样式，不要先选择父级再用后代选择器选自己，子类自己玩自己的，方便后期还可以换父级</p>
</blockquote>
</li>
<li><p>3.4 抽象出可复用的元素，建好组件库，在组件库内租着可用的元素组装页面</p>
</li>
<li><p>3.5 往你想要扩展的对象本身增加class，而不是他的父节点</p>
</li>
<li><p>3.6 对象应保持独立性，</p>
<blockquote>
<p>正确使用<code>语义化</code></p>
</blockquote>
</li>
<li><p>3.7 避免使用<code>id</code>选择器，权重太高，无法重用</p>
</li>
<li><p>3.8 保证选择器相同的权重</p>
</li>
<li><p>3.9 避免位置相关的样式</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span> <span class="selector-class">.container</span>&#123;&#125;</div><div class="line"><span class="selector-class">.footer</span> <span class="selector-class">.container</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>  这样不太好</p>
</li>
<li><p>3.10 类名简短，清晰，<code>语义化</code>，<code>class</code>命名不影响<code>html</code>的<code>语义化</code></p>
<blockquote>
<p>SEO主要针对<code>标签对</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 定义&lt;br&gt; OOCSS将页面可重用元素抽象成一个类，用class加以描述，而其对应的html即可以堪称是此类的一个实例，具有封装，继承，对象特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2 作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.1 加强代码复用方便维护&lt;/li&gt;
&lt;li&gt;2.2 减少体积&lt;/li&gt;
&lt;li&gt;2.3 提升渲染效率&lt;/li&gt;
&lt;li&gt;2.4 组件库思想，栅格布局可共用，减少选择器，方便扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="OOCSS" scheme="https://mowatermelon.github.io/tags/OOCSS/"/>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>样式之Ioshacker</title>
    <link href="https://mowatermelon.github.io/2017/04/22/%E6%A0%B7%E5%BC%8F%E4%B9%8Bioshacker/"/>
    <id>https://mowatermelon.github.io/2017/04/22/样式之ioshacker/</id>
    <published>2017-04-21T16:00:00.000Z</published>
    <updated>2017-09-03T11:16:50.472Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>微信项目迁移pc项目功能的时候，发现原有流程中的iframe滚动条没有出来，总结操作过程</p>
</blockquote>
<ul>
<li><p>1 前情概要</p>
<p><code>-webkit-overflow-scrolling</code> 属性控制元素在移动设备上是否使用滚动回弹效果：<a href="http://www.cnblogs.com/xcrh/p/6164622.html">参考</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>; <span class="comment">/* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span></div><div class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">auto</span>; <span class="comment">/* 当手指从触摸屏上移开，滚动会立即停止 */</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>2 放上完整代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>flowDemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.flow</span> <span class="selector-class">.flowListBox</span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#flowDiv</span></span></div><div class="line"><span class="undefined">&#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">-webkit-overflow-scrolling</span><span class="selector-pseudo">:touch</span>;<span class="comment">/*重要代码*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">overflow</span><span class="selector-pseudo">:auto</span>;<span class="comment">/*重要代码*/</span></span></div><div class="line"><span class="undefined">    width: 100%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-tag">iframe</span><span class="selector-id">#iList</span>&#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">width</span>: 100%;<span class="comment">/*重要代码*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;<span class="comment">/*重要代码*/</span></span></div><div class="line"><span class="css">    <span class="selector-tag">border</span><span class="selector-pseudo">:0</span> <span class="selector-tag">none</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">background-color</span>:<span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">    word-wrap: break-word;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-tag">button</span><span class="selector-class">.flowBtn</span>&#123;<span class="attribute">width</span>:<span class="number">41.666666%</span>&#125;</span></div><div class="line"><span class="css"><span class="selector-tag">button</span><span class="selector-class">.flowBtn</span><span class="selector-id">#btnTJ</span>&#123;<span class="attribute">float</span>:right&#125;</span></div><div class="line"><span class="css"><span class="selector-tag">button</span><span class="selector-class">.flowBtn</span><span class="selector-id">#btnBack</span>&#123;<span class="attribute">float</span>:left&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span> <span class="attr">id</span>=<span class="string">"fList"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flow"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flowListBox"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">h1</span>&gt;</span>步骤条<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!--第一步/--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span> <span class="attr">id</span>=<span class="string">"flowDiv"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iList"</span> <span class="attr">name</span>=<span class="string">"iframeSelf"</span> <span class="attr">src</span>=<span class="string">"demo.html"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-sm-8 col-sm-offset-2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary flowBtn"</span> <span class="attr">id</span>=<span class="string">"btnBack"</span>&gt;</span>上一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary flowBtn"</span> <span class="attr">id</span>=<span class="string">"btnTJ"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-2.1.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/modal.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">  ReFlowHeight();</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">//页面重新加载的时候计算iframe高度</span></span></div><div class="line"><span class="javascript">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">    ReFlowHeight();</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="javascript"><span class="comment">//重新加载界面计算相关高度</span></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">ReFlowHeight</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> bodyH = <span class="built_in">document</span>.documentElement.clientHeight - <span class="number">150</span>;</span></div><div class="line"><span class="javascript">    $(<span class="string">"#flowDiv"</span>).css(&#123; <span class="string">"height"</span>: bodyH + <span class="string">"px"</span> &#125;);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>3 错误总结</p>
<p>我在很早就搜了这个代码，通过多层选择器给<code>iframe</code>的父级<code>div</code>添加了这个样式，结果一直没有效果，今天一看，样式根本就没有绑上去，所以这边还是通过唯一的id选择器，样式就绑上去了，然后这边<code>ios</code>看iframe就可以正常滚动了，但是还是有一丢丢不太友好就是在屏幕点击触发的时候，有的时候触发的是父级<code>body</code>的点击事件，可是父级<code>body</code>的<code>overflow</code>是<code>hidden</code>的，导致页面<code>iframe</code>滚动机制触发有点不太友好，所以估计后期可能会找看看还有没有其他解决机制优化一下效果。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;微信项目迁移pc项目功能的时候，发现原有流程中的iframe滚动条没有出来，总结操作过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 前情概要&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-webkit-overflow-scrolling&lt;/code&gt; 属性控制元素在移动设备上是否使用滚动回弹效果：&lt;a href=&quot;http://www.cnblogs.com/xcrh/p/6164622.html&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-webkit-overflow-scrolling&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;touch&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* 当手指从触摸屏上移开，会保持一段时间的滚动 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-webkit-overflow-scrolling&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;auto&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* 当手指从触摸屏上移开，滚动会立即停止 */&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="ioshacker" scheme="https://mowatermelon.github.io/tags/ioshacker/"/>
    
  </entry>
  
  <entry>
    <title>样式之CSS变量</title>
    <link href="https://mowatermelon.github.io/2017/04/21/%E6%A0%B7%E5%BC%8F%E4%B9%8Bcss%E5%8F%98%E9%87%8F/"/>
    <id>https://mowatermelon.github.io/2017/04/21/样式之css变量/</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-09-03T11:11:51.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在上个月了解到<code>CSS变量</code>，懒惰如我，就没有好好看一下，只是惊讶了一下，今天想做一个皮肤切换的功能所以想到了这个，好好研究之后，希望能够极大提高渲染效率。<a href="http://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/">日常搬运</a></p>
</blockquote>
<ul>
<li><h1 id="1-现有浏览器支持情况"><a href="#1-现有浏览器支持情况" class="headerlink" title="1 现有浏览器支持情况"></a>1 现有浏览器支持情况</h1><p><img src="../../../../img/cssvar.png" alt="cssvar支持情况"><br><code>Chrome/Firefox/Safari</code>浏览器对于<code>cssvar</code>兼容性较为良好，我自己做的项目暂时不需要支持太多的低版本浏览器，也不认为我会去支持<code>ie</code>，结论可以上手了。</p>
</li>
<li><h1 id="2-CSS变量var-语法和用法和特性"><a href="#2-CSS变量var-语法和用法和特性" class="headerlink" title="2 CSS变量var()语法和用法和特性"></a>2 <code>CSS变量</code>var()语法和用法和特性</h1></li>
<li><h2 id="2-1-基础语法"><a href="#2-1-基础语法" class="headerlink" title="2.1 基础语法"></a>2.1 基础语法</h2></li>
</ul>
<p>CSS中原生的变量定义语法是：<code>--*</code>，变量使用语法是：var(<code>--*</code>)，其中<code>*</code>表示我们的<code>变量名称</code>。关于命名这个东西，各种语言都有些显示，例如<code>CSS选择器</code>不能是数字开头，JS中的变量是不能直接数值的，但是，在<code>CSS变量</code>中，这些限制通通没有，例如：</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line">  --1: #369;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="注：但是，不能包含-，-，-，-，-等字符，普通字符局限在只要是“数字-0-9-”“字母-a-zA-Z-”“下划线-”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如："><a href="#注：但是，不能包含-，-，-，-，-等字符，普通字符局限在只要是“数字-0-9-”“字母-a-zA-Z-”“下划线-”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如：" class="headerlink" title="注：但是，不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如："></a>注：但是，不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如：</h4>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  --深蓝: #369;</div><div class="line">  <span class="selector-tag">background-color</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--</span>深蓝);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  所以，我们就可以直接使用中文名称作为变量，即使英语4级没过的小伙伴也不会有压力了，我们也不需要随时挂个翻译器在身边了。  </p>
<p>  无论是变量的定义和使用只能在声明块{}里面，例如，下面这样是无效的：<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">--</span>深蓝: <span class="selector-id">#369</span>;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--深蓝);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  变量的定义，或者说声明跟CSS计数器的声明类似的，你应该摆脱Sass/Less等预编译工具语法先入为主的语法影响，把CSS的原生变量理解为一种CSS属性。</p>
<p>  例如下面这个例子：</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123; <span class="attribute">--color</span>: purple; &#125;</div><div class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">--color</span>: green; &#125;</div><div class="line"><span class="selector-id">#alert</span> &#123; <span class="attribute">--color</span>: red; &#125;</div><div class="line">* &#123; <span class="attribute">color</span>: <span class="built_in">var</span>(--color); &#125;</div></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的紫色继承于根元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我的绿色来自直接设置<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'alert'</span>&gt;</span></div><div class="line">  ID选择器权重更高，因此阿拉是红色！</div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我也是红色，占了继承的光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  上面这个例子我们可以获得这些信息：</p>
<p>  变量也是跟着<code>CSS选择器</code>走的，如果变量所在的选择器和使用变量的元素没有交集，是没有效果的。例如#alert定义的变量，只有id为alert的元素才能享有。如果你想变量全局使用，则你可以设置在:root选择器上；<br>  当存在多个同样名称的变量时候，变量的覆盖规则由<code>CSS选择器</code>的权重决定的，但并无<code>!important</code>这种用法，因为没有必要，<code>!important</code>设计初衷是干掉JS的style设置，但对于变量的定义则没有这样的需求。<br>  CSS属性名可以走变量吗？</p>
<p>  类似下面这样：</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">--bc</span>: background-color;    </div><div class="line">    var(--bc): #369;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  答案是<code>不可以</code>，要是可以支持的话，那CSS的压缩可就要逆天了，估计所有的属性都会变成1~2个字符，<code>CSS变量</code>不支持同时多个声明。</p>
<p>  <code>CSS变量</code>使用完整语法<br>  <code>CSS变量</code>使用的完整语法为：var( [, ]? )，用中文表示就是：var( &lt;自定义属性名&gt; [, &lt;默认值 ]? )，</p>
<p>  意思就是，如果我们使用的变量没有定义（注意，仅限于没有定义），则使用后面的值作为元素的属性值。举个例子：</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">--1: #369;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line"><span class="attribute">background-color</span>: <span class="built_in">var</span>(--1, #cd0000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  则此时的背景色是<code>#cd0000</code></p>
<ul>
<li><h2 id="2-2-CSS变量不合法的缺省特性"><a href="#2-2-CSS变量不合法的缺省特性" class="headerlink" title="2.2 CSS变量不合法的缺省特性"></a>2.2 <code>CSS变量</code>不合法的缺省特性</h2></li>
</ul>
<p>请看下面这个例子：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--color</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#369</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color, #cd0000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述<code>&lt;body&gt;</code>的背景色会是<code>transparent</code>,对于<code>CSS变量</code>，只要语法是正确的，就算变量里面的值是个乱七八糟的东西，也是会作为正常的声明解析，如果发现变量值是不合法的，例如上面背景色显然不能是20px，则使用背景色的缺省值，也就是默认值代替，于是，上面CSS等同于：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line"><span class="attribute">--color</span>: <span class="number">20px</span>;</div><div class="line"><span class="attribute">background-color</span>: <span class="number">#369</span>;</div><div class="line"><span class="attribute">background-color</span>: transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>千万不能想当然得认为等同于<code>background-color:20px</code>，这也是为什么上面要强调CSS默认值的使用仅限于<code>变量未定义</code>的情况，并不包括<code>变量不合法</code>。</p>
<ul>
<li><h2 id="2-3-CSS变量的空格尾随特性"><a href="#2-3-CSS变量的空格尾随特性" class="headerlink" title="2.3 CSS变量的空格尾随特性"></a>2.3 <code>CSS变量</code>的空格尾随特性</h2></li>
</ul>
<p>请看下面这个例子：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--size</span>: <span class="number">20</span>;   </div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--size)<span class="built_in">px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上，此处<code>font-size:var(--size)px</code>等同于<code>font-size:20 px</code>，注意，<code>20</code>后面有个空格，所以，这里的<code>font-size</code>使用的是<code>&lt;body&gt;</code>元素默认的大小。因此，就不要妄图取消就使用一个数值来贯穿全场，还是使用稳妥的做法：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--size</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--size);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者使用<code>CSS3 calc()</code>计算：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--size</span>: <span class="number">20</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(var(--size) * <span class="number">1px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，<code>&lt;body&gt;</code>的<code>font-size</code>大小才是<code>20px</code>，</p>
<ul>
<li><h2 id="2-4-CSS变量的相互传递特性"><a href="#2-4-CSS变量的相互传递特性" class="headerlink" title="2.4 CSS变量的相互传递特性"></a>2.4 <code>CSS变量</code>的相互传递特性</h2></li>
</ul>
<p>就是说，我们在<code>CSS变量</code>定义的时候可以直接引入其他变量给自己使用，例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--green</span>: <span class="number">#4CAF50</span>;</div><div class="line">  <span class="attribute">--backgroundColor</span>: <span class="built_in">var</span>(--green);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者更复杂的使用<code>CSS3 calc()</code>计算，例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">--columns</span>: <span class="number">4</span>;</div><div class="line">  <span class="attribute">--margins</span>: <span class="built_in">calc</span>(24px / var(--columns));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于复杂布局，<code>CSS变量</code>的这种相互传递和直接引用特性可以简化我们的代码和实现成本，尤其和动态布局在一起的时候，无论是CSS的响应式后者是JS驱动的布局变化。</p>
<p>随着浏览器宽度减小，demo中的4栏可能就变成3栏，2栏甚至1栏，实际开发的时候，显然不仅仅是栏目数量变化，宽度小，往往意味着访问设备尺寸有限，此时我们往往会缩小空白间距以及文字字号大小，这样，有限屏幕才能显示更多内容。</p>
<p>也就是说，当我们响应式变化的时候，改变的CSS属性值不是1个，而是3个或者更多，如果我们有3个响应点，是不是就至少需要9个CSS声明？但是，由于我们有了<code>CSS变量</code>，同时，<code>CSS变量</code>可以传递，当我们遭遇响应点的时候，我们只需要改变一个CSS属性值就可以了。</p>
<p>下面就是本demo核心CSS代码（只需要改变–columns这一个变量即可）：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">--columns</span>: <span class="number">4</span>;</div><div class="line">    <span class="attribute">--margins</span>: <span class="built_in">calc</span>(24px / var(--columns));</div><div class="line">    <span class="attribute">--space</span>: <span class="built_in">calc</span>(4px * var(--columns));</div><div class="line">    <span class="attribute">--fontSize</span>: <span class="built_in">calc</span>(20px - 4 / var(--columns));</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">1200px</span>) &#123;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">--columns</span>: <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">900px</span>) &#123;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">--columns</span>: <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">600px</span>) &#123;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">--columns</span>: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h1 id="3-整理思路"><a href="#3-整理思路" class="headerlink" title="3 整理思路"></a>3 整理思路</h1></li>
</ul>
<p><code>CSS变量</code>有<code>继承性</code>，<code>变量合法的缺省特性</code>，<code>空格尾随特性</code>，<code>内部传递特性</code>,特别是结合了<code>calc</code>之后，在页面布局这一块还是很有作用的，在响应式布局中，也可以不依赖外部样式进行布局，但是这边还没有看到我想要的效果，我希望能够一个css全局去传，但是我在js中之中也可以进行控制，做到切换皮肤的效果，没有看到，不知道这边应该怎样玩耍，没有思路，希望之后可以继续补充，还有今天还看了<code>count()</code>属性，似乎挺有用，但是想了一下，现在一般都是<code>json</code>串遍历，在遍历的过程中index索引是可以传递的，所以不知道这个在实际项目中的用处，不过，<code>content: counter(wangxiaoer, lower-roman);</code>、<code>counter-reset</code>、<code>counter-increment</code>这个我在去年好像就看过，结果到现在再看，还是感觉像看新的一样，捂脸.jpg。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在上个月了解到&lt;code&gt;CSS变量&lt;/code&gt;，懒惰如我，就没有好好看一下，只是惊讶了一下，今天想做一个皮肤切换的功能所以想到了这个，好好研究之后，希望能够极大提高渲染效率。&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/&quot;&gt;日常搬运&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;1-现有浏览器支持情况&quot;&gt;&lt;a href=&quot;#1-现有浏览器支持情况&quot; class=&quot;headerlink&quot; title=&quot;1 现有浏览器支持情况&quot;&gt;&lt;/a&gt;1 现有浏览器支持情况&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;../../../../img/cssvar.png&quot; alt=&quot;cssvar支持情况&quot;&gt;&lt;br&gt;&lt;code&gt;Chrome/Firefox/Safari&lt;/code&gt;浏览器对于&lt;code&gt;cssvar&lt;/code&gt;兼容性较为良好，我自己做的项目暂时不需要支持太多的低版本浏览器，也不认为我会去支持&lt;code&gt;ie&lt;/code&gt;，结论可以上手了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h1 id=&quot;2-CSS变量var-语法和用法和特性&quot;&gt;&lt;a href=&quot;#2-CSS变量var-语法和用法和特性&quot; class=&quot;headerlink&quot; title=&quot;2 CSS变量var()语法和用法和特性&quot;&gt;&lt;/a&gt;2 &lt;code&gt;CSS变量&lt;/code&gt;var()语法和用法和特性&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;2-1-基础语法&quot;&gt;&lt;a href=&quot;#2-1-基础语法&quot; class=&quot;headerlink&quot; title=&quot;2.1 基础语法&quot;&gt;&lt;/a&gt;2.1 基础语法&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS中原生的变量定义语法是：&lt;code&gt;--*&lt;/code&gt;，变量使用语法是：var(&lt;code&gt;--*&lt;/code&gt;)，其中&lt;code&gt;*&lt;/code&gt;表示我们的&lt;code&gt;变量名称&lt;/code&gt;。关于命名这个东西，各种语言都有些显示，例如&lt;code&gt;CSS选择器&lt;/code&gt;不能是数字开头，JS中的变量是不能直接数值的，但是，在&lt;code&gt;CSS变量&lt;/code&gt;中，这些限制通通没有，例如：&lt;/p&gt;
  &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --1: #369;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt;(--1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="CSS变量" scheme="https://mowatermelon.github.io/tags/CSS%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>样式之Csshacker</title>
    <link href="https://mowatermelon.github.io/2017/04/21/%E6%A0%B7%E5%BC%8F%E4%B9%8Bcsshacker/"/>
    <id>https://mowatermelon.github.io/2017/04/21/样式之csshacker/</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-09-03T09:46:31.092Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1 按钮和input在谷歌中会有一个默认蓝色边框，由于我用的是bootstrap，所以我这边直接就btn的总样式改了，还有加了input的选中样式修改。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>,<span class="selector-class">.btn</span>&#123;</div><div class="line">  <span class="attribute">outline</span>:<span class="number">0</span> none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span>,</div><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">:focus</span>,</div><div class="line"><span class="selector-class">.btn</span><span class="selector-class">.active</span><span class="selector-pseudo">:focus</span>,</div><div class="line"><span class="selector-class">.btn</span><span class="selector-class">.focus</span>,</div><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active.focus</span>,</div><div class="line"><span class="selector-class">.btn</span><span class="selector-class">.active</span><span class="selector-class">.focus</span> &#123;</div><div class="line">  <span class="attribute">outline</span>:<span class="number">0</span> none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:active</span>&#123;</div><div class="line">  <span class="attribute">outline</span>:<span class="number">0</span> none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>2 自动填充的文本框默认有个黄色背景<br>由于chrome浏览器默认的给自动填充的文本框添加了背景样式属性</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*谷歌默认样式*/</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">select</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(250, 255, 189);</div><div class="line">    <span class="attribute">background-image</span>: none;</div><div class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(0, 0, 0);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*修改版本一 没有用*/</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">select</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">background-image</span>: none;</div><div class="line">    color: var(--c);//用了一个css变量</div><div class="line">&#125;</div><div class="line"><span class="comment">/*最终建议修改样式*/</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>3 让文本自动换行</p>
<blockquote>
<p>做网页的时候，我们很经常碰到文本的显示，通常来说，文本太长就会很难看，可以用CSS控制文本自动换行。</p>
</blockquote>
</li>
</ul>
<p>方法一：你定死盒子的宽度，即给盒子一个宽度值（是数值，不是百分比）  </p>
<p>方法二：强制不换行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    white-space：normal;</div><div class="line">    //默认不换行;</div><div class="line">    <span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>; </div><div class="line">    //nowrap强制在同一行内显示所有文本，</div><div class="line">    //直到文本结束或者遭遇 &lt;br/&gt; 对象</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法三：自动换行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123; </div><div class="line">    <span class="attribute">word-wrap</span>: break-word;</div><div class="line">    //normal 亚洲语言和非亚洲语言的文本规则，</div><div class="line">    //允许在字内换行</div><div class="line">    <span class="selector-tag">word-break</span>: <span class="selector-tag">normal</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>方法四：强制英文单词断行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">word-break</span>:break-all;</div><div class="line">    //word-break可以设置强行换行;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法五 另外，只要在CSS中定义了如下句子，可保网页不会再被撑开了，以表格为例。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">td</span>&#123;</div><div class="line">    <span class="attribute">word-break</span>: break-all; </div><div class="line">    <span class="attribute">word-wrap</span>:break-word;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法六 既防止表格/层撑破又防止单词断裂，以表格为例。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span> &#123; </div><div class="line">    <span class="attribute">table-layout</span>: fixed;</div><div class="line">    <span class="attribute">word-wrap</span>:break-word;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span> &#123; </div><div class="line">    <span class="attribute">word-wrap</span>:break-word;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1 按钮和input在谷歌中会有一个默认蓝色边框，由于我用的是bootstrap，所以我这边直接就btn的总样式改了，还有加了input的选中样式修改。&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;,&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;outline&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:active&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.focus&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:active.focus&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.btn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.focus&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;outline&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:active&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;outline&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="csshacker" scheme="https://mowatermelon.github.io/tags/csshacker/"/>
    
  </entry>
  
  <entry>
    <title>样式之页面整体设计</title>
    <link href="https://mowatermelon.github.io/2017/04/20/%E6%A0%B7%E5%BC%8F%E4%B9%8B%E9%A1%B5%E9%9D%A2%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1/"/>
    <id>https://mowatermelon.github.io/2017/04/20/样式之页面整体设计/</id>
    <published>2017-04-19T16:00:00.000Z</published>
    <updated>2017-09-03T11:17:58.709Z</updated>
    
    <content type="html"><![CDATA[<p><strong>今天主要是做页面的设计</strong></p>
<blockquote>
<p>主要是做注册和登录界面,用了很多媒体查询感觉还不错的样子</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by wu Eva on 2017/03/23.</span></div><div class="line"><span class="comment">*/</span></div><div class="line">@<span class="keyword">charset</span> <span class="string">"utf-8"</span>;</div><div class="line"></div><div class="line">* &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">visibility</span>: hidden;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"."</span>;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-table;</div><div class="line">  <span class="attribute">zoom</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h3</span> &#123;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-class">.clearfix</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1%</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">list-style</span>: none</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">text-decoration</span>: none;</div><div class="line">  <span class="attribute">cursor</span>:pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span><span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">* &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*header---------------------------------------------------*/</span></div><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#5bc0de</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.headerBox</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../Image/Login/logo.png"</span>);</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span> <span class="number">70%</span>;</div><div class="line">  <span class="attribute">background-position</span>: <span class="number">30px</span> center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.headerBox</span> <span class="selector-class">.Rtitle</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">word-break</span>: keep-all;<span class="comment">/* 不换行 */</span></div><div class="line">  <span class="attribute">white-space</span>: nowrap;<span class="comment">/* 不换行 */</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/*main---------------------------------------------------*/</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 页面整体设置</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">3%</span>;</div><div class="line">  <span class="attribute">-moz-box-shadow</span>: inset <span class="number">0</span> <span class="number">0.2em</span> <span class="number">1em</span> <span class="number">0.2em</span> <span class="built_in">rgba</span>(205, 255, 246, 0.83);</div><div class="line"><span class="comment">/* Firefox */</span></div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0.2em</span> <span class="number">1em</span> <span class="number">0.2em</span> <span class="built_in">rgba</span>(205, 255, 246, 0.83);</div><div class="line"><span class="comment">/* Safari 和 Chrome */</span></div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0.2em</span> <span class="number">1em</span> <span class="number">0.2em</span> <span class="built_in">rgba</span>(205, 255, 246, 0.83);</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">1em</span>;</div><div class="line"><span class="comment">/* Firefox */</span></div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">1em</span>;</div><div class="line"><span class="comment">/* Safari 和 Chrome */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">1em</span>;</div><div class="line"><span class="comment">/* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width:<span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-id">#header</span> <span class="selector-class">.headerBox</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width:<span class="number">992px</span>) &#123;</div><div class="line">  <span class="selector-id">#header</span> <span class="selector-class">.headerBox</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.main</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">700px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">650px</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.main</span> <span class="selector-class">.row</span> <span class="selector-id">#mainBox</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">5%</span> <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@media(min-width:1200px) &#123;</div><div class="line">  <span class="selector-id">#header</span> <span class="selector-class">.headerBox</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.main</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">710px</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.main</span> <span class="selector-class">.row</span> <span class="selector-id">#mainBox</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">5%</span> <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;今天主要是做页面的设计&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是做注册和登录界面,用了很多媒体查询感觉还不错的样子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="整体设计" scheme="https://mowatermelon.github.io/tags/%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>样式之横竖屏判断</title>
    <link href="https://mowatermelon.github.io/2017/04/19/%E6%A0%B7%E5%BC%8F%E4%B9%8B%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%A4%E6%96%AD/"/>
    <id>https://mowatermelon.github.io/2017/04/19/样式之横竖屏判断/</id>
    <published>2017-04-18T16:00:00.000Z</published>
    <updated>2017-09-03T09:46:18.892Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 竖屏 */</span>  </div><div class="line">@<span class="keyword">media</span> screen and (orientation: portrait) and (max-width: <span class="number">720px</span>) &#123; 对应样式 &#125;  </div><div class="line">  </div><div class="line"><span class="comment">/* 横屏 */</span>  </div><div class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123; 对应样式 &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="横竖屏判断" scheme="https://mowatermelon.github.io/tags/%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>样式表小白之路</title>
    <link href="https://mowatermelon.github.io/2017/04/18/%E6%A0%B7%E5%BC%8F%E8%A1%A8%E5%B0%8F%E7%99%BD%E4%B9%8B%E8%B7%AF/"/>
    <id>https://mowatermelon.github.io/2017/04/18/样式表小白之路/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-09-03T11:18:23.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>做了一个图片居中的效果，学习到媒体查询的使用方法</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"03.jpg"</span>);</div><div class="line">  <span class="attribute">background-position</span>: center center;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</div><div class="line"></div><div class="line">  <span class="selector-class">.col-md-8</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">300px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen  (min-width: <span class="number">992px</span>)  and  (min-width:<span class="number">768px</span>)  &#123;</div><div class="line"></div><div class="line">  <span class="selector-class">.col-md-8</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">300px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;做了一个图片居中的效果，学习到媒体查询的使用方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="小白之路" scheme="https://mowatermelon.github.io/tags/%E5%B0%8F%E7%99%BD%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>样式表之媒体查询</title>
    <link href="https://mowatermelon.github.io/2017/04/17/%E6%A0%B7%E5%BC%8F%E8%A1%A8%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>https://mowatermelon.github.io/2017/04/17/样式表媒体查询/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-09-03T11:21:50.513Z</updated>
    
    <content type="html"><![CDATA[<p>来至<a href="http://www.cnblogs.com/tdalcn/p/3512140.html">搬运工</a></p>
<blockquote>
<p>媒体查询相关关键词 @media only screen and</p>
</blockquote>
<ul>
<li>only(限定某种设备)</li>
<li>screen 是媒体类型里的一种</li>
<li>and 被称为关键字，其他关键字还包括 not(排除某种设备)</li>
</ul>
<hr>
<blockquote>
<p>常用类型</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">all</td>
<td style="text-align:left">所有设备</td>
</tr>
<tr>
<td style="text-align:left">braille</td>
<td style="text-align:left">盲文</td>
</tr>
<tr>
<td style="text-align:left">embossed</td>
<td style="text-align:left">盲文打印</td>
</tr>
<tr>
<td style="text-align:left">handheld</td>
<td style="text-align:left">手持设备</td>
</tr>
<tr>
<td style="text-align:left">print</td>
<td style="text-align:left">文档打印或打印预览模式</td>
</tr>
<tr>
<td style="text-align:left">projection</td>
<td style="text-align:left">项目演示，比如幻灯</td>
</tr>
<tr>
<td style="text-align:left">screen</td>
<td style="text-align:left">彩色电脑屏幕</td>
</tr>
<tr>
<td style="text-align:left">speech</td>
<td style="text-align:left">演讲</td>
</tr>
<tr>
<td style="text-align:left">tty</td>
<td style="text-align:left">固定字母间距的网格的媒体，比如电传打字机</td>
</tr>
<tr>
<td style="text-align:left">tv</td>
<td style="text-align:left">电视</td>
</tr>
</tbody>
</table>
<p>ps:screen一般用的比较多，下面是我自己的尝试，列出常用的设备的尺寸，然后给页面分了几个尺寸的版本。</p>
<hr>
<a id="more"></a>
<blockquote>
<p> 常用设备</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">设备</th>
<th style="text-align:left">屏幕尺寸</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">显示器</td>
<td style="text-align:left">1280 x 800</td>
</tr>
<tr>
<td style="text-align:left">ipad</td>
<td style="text-align:left">1024 x 768</td>
</tr>
<tr>
<td style="text-align:left">Android</td>
<td style="text-align:left">800 x 480</td>
</tr>
<tr>
<td style="text-align:left">iPhone</td>
<td style="text-align:left">640 x 960</td>
</tr>
</tbody>
</table>
<p>两种方式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">&lt;link rel="stylesheet" type="text/css" href="styleB.css" media="screen and (min-width: 600px) and (max-width: 800px)"&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">意思是当屏幕的宽度大于600小于800时，应用styleB.css</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">600px</span>) &#123; <span class="comment">/*当屏幕尺寸小于600px时，应用下面的CSS样式*/</span></div><div class="line">  <span class="selector-class">.class</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>媒体查询相关关键词 device-aspect-ratio</p>
</blockquote>
<p>  device-aspect-ratio可以用来适配特定屏幕长宽比的设备，这也是一个很有用的属性，比如，我们的页面想要对长宽比为4:3的普通屏幕定义一种样式，然后对于16:9和16:10的宽屏，定义另一种样式，比如自适应宽度和固定宽度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> only screen and (device-aspect-ratio:<span class="number">4</span>/<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p>-webkit-min-device-pixel-ratio的常见值对比（是设备上物理像素和设备独立像素，设备像素比率）</p>
<table>
<thead>
<tr>
<th style="text-align:left">设备</th>
<th style="text-align:left">分辨率</th>
<th style="text-align:left">设备像素比率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Android LDPI</td>
<td style="text-align:left">320×240</td>
<td style="text-align:left">0.75</td>
</tr>
<tr>
<td style="text-align:left">Iphone 3 &amp; Android MDPI</td>
<td style="text-align:left">320×480</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">Android HDPI</td>
<td style="text-align:left">480×800</td>
<td style="text-align:left">1.5</td>
</tr>
<tr>
<td style="text-align:left">Iphone 4</td>
<td style="text-align:left">960×640</td>
<td style="text-align:left">2.0</td>
</tr>
</tbody>
</table>
<blockquote>
<p>-webkit-min-device-pixel-ratio: 1.0</p>
</blockquote>
<pre><code>所有非 Retina 的 Mac
所有非 Retina 的 iOS 设备
Acer Iconia A500
Samsung Galaxy Tab 10.1
Samsung Galaxy S
</code></pre><p>其他设备</p>
<blockquote>
<p>-webkit-min-device-pixel-ratio为1.3</p>
</blockquote>
<pre><code>Google Nexus 7
</code></pre><blockquote>
<p>-webkit-min-device-pixel-ratio为1.5</p>
</blockquote>
<pre><code>Google Nexus S
Samsung Galaxy S II
HTC Desire
HTC Desire HD
HTC Incredible S
HTC Velocity
HTC Sensation
</code></pre><blockquote>
<p>-webkit-min-device-pixel-ratio为2.0</p>
</blockquote>
<pre><code>iPhone 4
iPhone 4S
iPhone 5
iPad (3rd generation)
iPad 4
所有Retina displays 的MAC
Google Galaxy Nexus
Google Nexus 4
Google Nexus 10
Samsung Galaxy S III
Samsung Galaxy Note II
Sony Xperia S
HTC One X
</code></pre><blockquote>
<p>-webkit-min-device-pixel-ratio: 3.0</p>
</blockquote>
<pre><code>1.HTC Butterfly
2.Sony Xperia S
</code></pre><hr>
<blockquote>
<p>@media only screen and (min-resolution:144dpi)<resolution>（分辨率）</p>
</blockquote>
<p>使用于：位图媒体类型,接受<code>max/min</code>前缀：<br><code>resolution</code>媒体特性描述输出设备的分辨率，例如，像素密度。若查询设备的非方形像素，在<code>min-resolution</code>查询中指定的值必须与最稀疏尺寸进行比较，在<code>max-resolution</code>查询中必须与最密集尺寸进行比较。对于<code>resolution</code>（没有<code>min-</code>或<code>max-</code>前缀）查询从不查询设备的非方形像素。</p>
<p>对于印刷机，相当于分辨率（任意颜色的绘制点的分辨率）。</p>
<p>举例说明：该媒体查询表示样式表适用于分辨率大于每英寸144点的设备：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> print and (min-resolution: <span class="number">144dpi</span>) &#123; … &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来至&lt;a href=&quot;http://www.cnblogs.com/tdalcn/p/3512140.html&quot;&gt;搬运工&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;媒体查询相关关键词 @media only screen and&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;only(限定某种设备)&lt;/li&gt;
&lt;li&gt;screen 是媒体类型里的一种&lt;/li&gt;
&lt;li&gt;and 被称为关键字，其他关键字还包括 not(排除某种设备)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;常用类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;all&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;所有设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;braille&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;盲文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;embossed&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;盲文打印&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;handheld&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;手持设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;print&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;文档打印或打印预览模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;projection&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;项目演示，比如幻灯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;screen&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;彩色电脑屏幕&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;speech&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;演讲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;tty&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;固定字母间距的网格的媒体，比如电传打字机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;tv&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;电视&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ps:screen一般用的比较多，下面是我自己的尝试，列出常用的设备的尺寸，然后给页面分了几个尺寸的版本。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="样式表" scheme="https://mowatermelon.github.io/categories/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
    
      <category term="样式表" scheme="https://mowatermelon.github.io/tags/%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    
      <category term="媒体查询" scheme="https://mowatermelon.github.io/tags/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>软件折腾之Vscode小白入门</title>
    <link href="https://mowatermelon.github.io/2017/04/17/%E8%BD%AF%E4%BB%B6%E6%8A%98%E8%85%BE%E4%B9%8Bvscode%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8/"/>
    <id>https://mowatermelon.github.io/2017/04/17/软件折腾之vscode小白入门/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-09-03T09:45:59.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前情概要 </p>
</blockquote>
<p>我主要用过的编辑器是Hbuilder和atom，但是Hbuilder的界面感觉不太好看而且启动很慢。atom最近被我装一堆插件，好像玩坏了，每次一开软件，就各种报错，直接提示是否强制关闭，看到尤大也用vscode了就看看这个软件。</p>
<h1 id="1-下载过程"><a href="#1-下载过程" class="headerlink" title="1 下载过程"></a>1 下载过程</h1><p>打开官网进行<a href="https://code.visualstudio.com/Download">下载</a>,在我点击下载之后，网址跳转到<a href="https://vscode-update.azurewebsites.net/latest/win32-x64/stable">https://vscode-update.azurewebsites.net/latest/win32-x64/stable</a>,没有正在下载的提示，页面直接显示</p>
<h2 id="无法访问此网站"><a href="#无法访问此网站" class="headerlink" title="无法访问此网站"></a><strong>无法访问此网站</strong></h2><h2 id="连接已重置。"><a href="#连接已重置。" class="headerlink" title="连接已重置。"></a><strong>连接已重置。</strong></h2><p>整个人很懵，感觉到了深深的恶意，你好歹能让我下软件，瞅两眼去下载插件的时候再显示这个，我倒还有些心理安慰，我赶紧翻了个墙，插播广告<code>影梭大法</code>好,软件下载还是很快的只有40.5 MB，下载的文件名是<code>VSCodeSetup-x64-1.15.1.exe</code>。</p>
<h1 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2 安装过程"></a>2 安装过程</h1><p>作为一个英语战五渣的人，幸好没有一路点击next，在选择完软件安装路径之后，同意了软件安装协议之后，出现选项<code>是否将vscode添加到右键查看</code>就是在文件管理器选择对应文件夹和文件时能不能通过右键之间选择<code>vscode</code>查看，真的是多看了一眼，赶紧勾选，还有<code>是否将vscode在桌面生成快捷方式</code>，赶紧勾选。<br>之后就是慢慢安装了，感觉安装过程有丢丢慢，我感觉我都刷了半天知乎了，还没安装完。<br><a id="more"></a></p>
<h1 id="3-软件初体验"><a href="#3-软件初体验" class="headerlink" title="3 软件初体验"></a>3 软件初体验</h1><p>软件安装完成之后，会默认直接运行<code>VSCODE</code>,当然这也是我想要的，我就直接点击确定了。<br><code>VSCODE</code>一打开，第一反应就是安装插件，感觉<code>VSCODE</code>的图标提示作用对我这种小白不太明显，除去header中的一些默认功能，在软件最左侧有些快捷跳转。</p>
<h2 id="files-文件管理器"><a href="#files-文件管理器" class="headerlink" title="files-文件管理器"></a>files-文件管理器</h2><p>通过这个入口可以管理当前打开文件夹的目录树，也可以管理当前打开的面板，下载对应的文件图标管理插件，界面显示效果挺好。</p>
<h2 id="find-单独的搜索界面"><a href="#find-单独的搜索界面" class="headerlink" title="find-单独的搜索界面"></a>find-单独的搜索界面</h2><p>在<code>VSCODE</code>中通过<code>ctrl+H/F</code>快捷键出来的搜索框只能在当前面板最上方进行显示，并不能移动位置，这个体验有丢丢不太好，所以为了弥补这个在左侧专门弄了一个入口可以将搜索框固定在左侧，可以选择需要查询和替换的文件范围，也可以排除一定文件，对于经常在<code>Studio</code>中在当前项目中进行全部匹配的查找之后，忘记改回仅在当前文档中进行替换的我来说，这个体验要点赞。</p>
<p>可是显示了固定了搜索面板之后，目录树面板就不能显示，感觉体验也不太好，全部替换按钮有丢丢隐蔽，那个按钮我还以为是切换英文大小写。</p>
<p>我写好要查找条件和替换结果之后完全不知道要干嘛，只能尝试性的用了一下<code>ENTER</code>,这个是对当前文件夹下的所有文件进行匹配查询返回查询结果，有多少文件中包含该查询条件，在每个包含中显示当前文件中使用到的次数，我就在查询反馈的结果中选择替换，每一次替换，右侧文件预览的页面就会跳出修改结果的版本对比，感觉这个功能有丢丢鸡肋，我就替换了几个小地方，结果你给我开了一堆面板，这个不太好吧。</p>
<h2 id="git-版本管理入口"><a href="#git-版本管理入口" class="headerlink" title="git-版本管理入口"></a>git-版本管理入口</h2><p>我对于git指令几乎就是不熟悉，完全就是开心的把所有的按钮都点击了一遍，日常骄傲.jpg。</p>
<p>首先打开对应的包含<code>.git</code>管理文件夹<br>第一步 先选择同步/<em>避免相关修改冲突</em>/<br>第二步  进行相关修改<br>第三步  暂存所有修改<br>第四步  commit所有修改<br>第五步  拉取所有修改<code>git pull</code><br>第六步  推送所有修改<code>git push</code><br>第七步  输入当前git对应文件的远程仓库用户名和密码<br>第八步 如果输出控制台没有任何报错，则说明push成功，如果说有报错请按照报错说明对文件进行相关修改。</p>
<h2 id="debugging-调试入口"><a href="#debugging-调试入口" class="headerlink" title="debugging-调试入口"></a>debugging-调试入口</h2><p>这个我目前没有使用到，对于软件主要是编辑markdown和写一些html，以后用到再说。</p>
<h2 id="plugin-插件管理入口"><a href="#plugin-插件管理入口" class="headerlink" title="plugin-插件管理入口"></a>plugin-插件管理入口</h2><p>这里说些我目前觉得必装的插件</p>
<p><code>Auto-Open Markdown Preview</code></p>
<p>你打开一个markdown文件，右侧会对当前文件进行预览显示。</p>
<p><code>Markdown Preview Github Style</code></p>
<p>你打开一个markdown文件，预览效果与你在<code>Github</code>上的预览效果是一样的，<code>VSCODE</code>上默认的预览高亮不会改变背景颜色，只会改变字体颜色，还有和平常使用atom预览的效果有很多不同，所以你如果要用<code>VSCODE</code>写markdown，建议要安装这个。</p>
<p><code>markdownlint</code></p>
<p>管理现有markdown的格式正确性</p>
<p><code>anyview</code></p>
<p>原本专门下载了<code>html preview</code>,结果效果不太好，当时一起下载了好几个关于html预览的插件，感觉这个还不错。</p>
<p><code>Git History</code></p>
<p>可以在控制台直接打印当前版本操作的git指令，推荐安装。</p>
<p><code>Material Icon Theme</code></p>
<p>根据文件类型，自动显示对应的文件图标，这个是我看几个主题中，显示的比较友好的一款，推荐安装。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前情概要 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我主要用过的编辑器是Hbuilder和atom，但是Hbuilder的界面感觉不太好看而且启动很慢。atom最近被我装一堆插件，好像玩坏了，每次一开软件，就各种报错，直接提示是否强制关闭，看到尤大也用vscode了就看看这个软件。&lt;/p&gt;
&lt;h1 id=&quot;1-下载过程&quot;&gt;&lt;a href=&quot;#1-下载过程&quot; class=&quot;headerlink&quot; title=&quot;1 下载过程&quot;&gt;&lt;/a&gt;1 下载过程&lt;/h1&gt;&lt;p&gt;打开官网进行&lt;a href=&quot;https://code.visualstudio.com/Download&quot;&gt;下载&lt;/a&gt;,在我点击下载之后，网址跳转到&lt;a href=&quot;https://vscode-update.azurewebsites.net/latest/win32-x64/stable&quot;&gt;https://vscode-update.azurewebsites.net/latest/win32-x64/stable&lt;/a&gt;,没有正在下载的提示，页面直接显示&lt;/p&gt;
&lt;h2 id=&quot;无法访问此网站&quot;&gt;&lt;a href=&quot;#无法访问此网站&quot; class=&quot;headerlink&quot; title=&quot;无法访问此网站&quot;&gt;&lt;/a&gt;&lt;strong&gt;无法访问此网站&lt;/strong&gt;&lt;/h2&gt;&lt;h2 id=&quot;连接已重置。&quot;&gt;&lt;a href=&quot;#连接已重置。&quot; class=&quot;headerlink&quot; title=&quot;连接已重置。&quot;&gt;&lt;/a&gt;&lt;strong&gt;连接已重置。&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;整个人很懵，感觉到了深深的恶意，你好歹能让我下软件，瞅两眼去下载插件的时候再显示这个，我倒还有些心理安慰，我赶紧翻了个墙，插播广告&lt;code&gt;影梭大法&lt;/code&gt;好,软件下载还是很快的只有40.5 MB，下载的文件名是&lt;code&gt;VSCodeSetup-x64-1.15.1.exe&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;2-安装过程&quot;&gt;&lt;a href=&quot;#2-安装过程&quot; class=&quot;headerlink&quot; title=&quot;2 安装过程&quot;&gt;&lt;/a&gt;2 安装过程&lt;/h1&gt;&lt;p&gt;作为一个英语战五渣的人，幸好没有一路点击next，在选择完软件安装路径之后，同意了软件安装协议之后，出现选项&lt;code&gt;是否将vscode添加到右键查看&lt;/code&gt;就是在文件管理器选择对应文件夹和文件时能不能通过右键之间选择&lt;code&gt;vscode&lt;/code&gt;查看，真的是多看了一眼，赶紧勾选，还有&lt;code&gt;是否将vscode在桌面生成快捷方式&lt;/code&gt;，赶紧勾选。&lt;br&gt;之后就是慢慢安装了，感觉安装过程有丢丢慢，我感觉我都刷了半天知乎了，还没安装完。&lt;br&gt;
    
    </summary>
    
      <category term="软件折腾" scheme="https://mowatermelon.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="软件折腾" scheme="https://mowatermelon.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%8A%98%E8%85%BE/"/>
    
      <category term="vscode" scheme="https://mowatermelon.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>前端知识之学习之Vue学习</title>
    <link href="https://mowatermelon.github.io/2017/04/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%B9%8Bvue%E5%AD%A6%E4%B9%A0/"/>
    <id>https://mowatermelon.github.io/2017/04/16/前端知识之vue学习/</id>
    <published>2017-04-15T16:00:00.000Z</published>
    <updated>2017-09-03T11:30:42.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很早就知道了vue，在很早之前看过一丢丢官网，上个周末看了一个关于使用了<code>vue-resources</code>插件的<code>vue购物车</code>应用，功能比较齐全，但是代码极为简约，才发现这个使用了<code>mvvm</code>思维的<code>vue</code>是多么方便开发，所以来重新学习一下。搬运<a href="">vue官网</a></p>
</blockquote>
<ul>
<li>一 安装vue</li>
<li>1.1 直接下载对应的js，Vue 会被注册为一个全局变量。<strong>重要提示：在开发时请用开发版本，遇到常见错误它会给出友好的警告。</strong><ul>
<li><a href="http://vuejs.org/js/vue.js">开发版</a> <code>包含完整的警告和调试模式</code></li>
<li><a href="http://vuejs.org/js/vue.min.js">生产版</a> <code>删除了警告，24.72kb min+gzip</code></li>
<li>CDN<ul>
<li>推荐：<code>[unpkg](https://unpkg.com/vue@2.3.0/dist/vue.js)</code>, 会保持和 npm 发布的最新的版本一致。可以在 <code>[unpkg.com/vue/](https://unpkg.com/vue)</code> 浏览 npm 包资源。</li>
<li>也可以从 <code>[jsdelivr](https://cdn.jsdelivr.net/vue/2.1.3/vue.js)</code> 或 <code>[cdnjs](https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js)</code> 获取，不过这两个服务版本更新可能略滞后。</li>
</ul>
</li>
<li><code>&lt;script src=&quot;js/vue.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>  <h3 id="tip"><a href="#tip" class="headerlink" title="tip:"></a><code>tip</code>:</h3> 开发环境不要用最小压缩版，不然就失去了错误提示和警告!</li>
</ul>
<hr>
<a id="more"></a>  </li>
<li><p>1.2 npm</p>
<blockquote>
<ul>
<li>推荐</li>
</ul>
</blockquote>
<p>在用 Vue.js 构建大型应用时推荐使用 NPM 安装， NPM 能很好地和诸如 <code>[Webpack](http://webpack.github.io/)</code> 或 <code>[Browserify](http://browserify.org/)</code> 模块打包器配合使用。 Vue.js 也提供配套工具来开发<code>[单文件组件](https://cn.vuejs.org/v2/guide/single-file-components.html)</code>。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># shell</span></div><div class="line"><span class="comment"># 最新稳定版</span></div><div class="line">$ npm install vue</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>独立构建 vs 运行时构建</li>
</ul>
</blockquote>
<p>  有两种构建方式，独立构建和运行构建。它们的区别在于前者包含模板编译器而后者不包含。</p>
<p>  模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 <code>template</code> 选项，你就需要编译器。</p>
<p>  独立构建包含模板编译器并支持 <code>template</code> 选项。 它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。</p>
<p>  运行时构建不包含模板编译器，因此不支持 <code>template</code> 选项，只能用 <code>render</code> 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 <code>render</code> 函数。运行时构建比独立构建要轻量<code>30%</code>，只有 <code>17.14 Kb min+gzip</code>大小。</p>
<p>  默认 <code>NPM</code> 包导出的是 运行时 构建。为了使用独立构建，在 <code>webpack</code> 配置中添加下面的别名：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">                            <span class="comment">// javascript</span></div><div class="line">resolve: &#123;</div><div class="line">  alias: &#123;</div><div class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.common.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  对于Browserify，可以添加一个别名到 package.json 中：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">                            <span class="comment">// javascript</span></div><div class="line"><span class="string">"browser"</span>: &#123;</div><div class="line">  <span class="string">"vue"</span>: <span class="string">"vue/dist/vue.common"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>1.3 CSP 环境<br><br>有些环境，如 <code>Google Chrome Apps</code> ，强制应用内容安全策略 (<code>CSP</code>) ，不能使用 <code>new Function()</code> 对表达式求值。这时可以用 <code>CSP</code> 兼容版本。独立的构建取决于该功能编译模板，所以无法使用这些环境。<br>另一方面，运行时构建的是完全兼容 CSP 的。当通过 <code>Webpack + vue-loader</code>或者 <code>Browserify + vueify</code> 构建时，在 <code>CSP</code> 环境中模板将被完美预编译到 <code>render</code> 函数中。</li>
</ul>
<hr>
<ul>
<li><p>1.4 命令行工具<br><code>Vue.js</code> 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">                                                  <span class="comment"># shell</span></div><div class="line"><span class="comment"># 全局安装 vue-cli</span></div><div class="line">$ npm install --global vue-cli</div><div class="line"><span class="comment"># 创建一个基于 webpack 模板的新项目</span></div><div class="line">$ vue init webpack my-project</div><div class="line"><span class="comment"># 安装依赖，走你</span></div><div class="line">$ <span class="built_in">cd</span> my-project</div><div class="line">$ npm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<h3 id="tip-1"><a href="#tip-1" class="headerlink" title="tip:"></a><code>tip</code>:</h3><p>CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读指南，熟悉 Vue 本身之后再研究 CLI。</p>
<p>对于大陆用户，建议将 npm 的注册表源设置为<code>[国内的镜像](http://riny.net/2014/cnpm/)</code>，可以大幅提升安装速度。</p>
</li>
</ul>
<hr>
<ul>
<li>1.5 开发版本<br>重要: Github 仓库的 <code>/dist</code> 文件夹只有在新版本发布时才会更新。如果想要使用 Github 上 Vue 最新的源码，你需要自己构建。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># shell</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/vuejs/vue.git node_modules/vue</div><div class="line"><span class="built_in">cd</span> node_modules/vue</div><div class="line">npm install</div><div class="line">npm run build</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>1.6 Bower</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># shell</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/vuejs/vue.git node_modules/vue</div><div class="line"><span class="built_in">cd</span> node_modules/vue</div><div class="line">npm install</div><div class="line">npm run build</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><p>1.7 AMD 模块加载器</p>
<p>独立下载版本或通过 Bower 安装的版本已用 UMD 包装，因此它们可以直接用作 AMD 模块。</p>
</li>
</ul>
<hr>
<ul>
<li>二 vue基础语法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很早就知道了vue，在很早之前看过一丢丢官网，上个周末看了一个关于使用了&lt;code&gt;vue-resources&lt;/code&gt;插件的&lt;code&gt;vue购物车&lt;/code&gt;应用，功能比较齐全，但是代码极为简约，才发现这个使用了&lt;code&gt;mvvm&lt;/code&gt;思维的&lt;code&gt;vue&lt;/code&gt;是多么方便开发，所以来重新学习一下。搬运&lt;a href=&quot;&quot;&gt;vue官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一 安装vue&lt;/li&gt;
&lt;li&gt;1.1 直接下载对应的js，Vue 会被注册为一个全局变量。&lt;strong&gt;重要提示：在开发时请用开发版本，遇到常见错误它会给出友好的警告。&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vuejs.org/js/vue.js&quot;&gt;开发版&lt;/a&gt; &lt;code&gt;包含完整的警告和调试模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vuejs.org/js/vue.min.js&quot;&gt;生产版&lt;/a&gt; &lt;code&gt;删除了警告，24.72kb min+gzip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CDN&lt;ul&gt;
&lt;li&gt;推荐：&lt;code&gt;[unpkg](https://unpkg.com/vue@2.3.0/dist/vue.js)&lt;/code&gt;, 会保持和 npm 发布的最新的版本一致。可以在 &lt;code&gt;[unpkg.com/vue/](https://unpkg.com/vue)&lt;/code&gt; 浏览 npm 包资源。&lt;/li&gt;
&lt;li&gt;也可以从 &lt;code&gt;[jsdelivr](https://cdn.jsdelivr.net/vue/2.1.3/vue.js)&lt;/code&gt; 或 &lt;code&gt;[cdnjs](https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js)&lt;/code&gt; 获取，不过这两个服务版本更新可能略滞后。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;js/vue.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;  &lt;h3 id=&quot;tip&quot;&gt;&lt;a href=&quot;#tip&quot; class=&quot;headerlink&quot; title=&quot;tip:&quot;&gt;&lt;/a&gt;&lt;code&gt;tip&lt;/code&gt;:&lt;/h3&gt; 开发环境不要用最小压缩版，不然就失去了错误提示和警告!&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端知识" scheme="https://mowatermelon.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="前端知识" scheme="https://mowatermelon.github.io/tags/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
      <category term="vue" scheme="https://mowatermelon.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
