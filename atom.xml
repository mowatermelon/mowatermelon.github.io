<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mowatermelon</title>
  
  <subtitle>行至水穷处，坐看云起时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mowatermelon.github.io/"/>
  <updated>2018-03-26T01:43:41.338Z</updated>
  <id>https://mowatermelon.github.io/</id>
  
  <author>
    <name>mowatermelon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端思考之2018年初计划安排</title>
    <link href="https://mowatermelon.github.io/2018/02/24/thinking-in-the-front-end-knowledge-20180224-planning/"/>
    <id>https://mowatermelon.github.io/2018/02/24/thinking-in-the-front-end-knowledge-20180224-planning/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-03-26T01:43:41.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新年新气象，给自己2018年初做个安排</p></blockquote><a id="more"></a><h1 id="1-工作安排"><a href="#1-工作安排" class="headerlink" title="1 工作安排"></a>1 工作安排</h1><h2 id="1-1-完善地类分析功能（已完成）"><a href="#1-1-完善地类分析功能（已完成）" class="headerlink" title="1.1 完善地类分析功能（已完成）"></a>1.1 完善地类分析功能（已完成）</h2><ul><li>将分析结果中table转化为tab页切换的时候，tab页的header内容修改为每个table的Caption</li><li>将分析结果中每个table的Caption剔除。</li></ul><h2 id="1-2-完善截屏功能"><a href="#1-2-完善截屏功能" class="headerlink" title="1.2 完善截屏功能"></a>1.2 完善截屏功能</h2><ul><li>研究在不使用<code>map.setExtent()</code>的情况下，保证<code>PrintTemplate</code>的<code>extent</code>是利用<code>drawbar</code>圈选出来的范围。</li><li>保证所有浏览器中截图图片的正常下载，看是再找相关帮助库，还是可以直接自己写方法达到至少支持<code>ie8</code>的图片下载功能。</li></ul><h2 id="1-3-解决测量功能错误"><a href="#1-3-解决测量功能错误" class="headerlink" title="1.3 解决测量功能错误"></a>1.3 解决测量功能错误</h2><ul><li>面积量算和距离量算使用报错，目前不确定原因，要进一步核查</li></ul><h2 id="1-4-坐标书签功能"><a href="#1-4-坐标书签功能" class="headerlink" title="1.4 坐标书签功能"></a>1.4 坐标书签功能</h2><ul><li><p>第一步，确定书签保存是入库还是保存到浏览器本地，保存到浏览器本地。</p><blockquote><p>一条数据记录内容</p></blockquote><ul><li>唯一id（程序生成）</li><li>书签name</li><li>x坐标值</li><li>y坐标值</li></ul><blockquote><p>一条页面记录内容</p></blockquote><ul><li>x坐标值</li><li>y坐标值</li><li>删除按钮</li></ul><p>数据量比较少，可以通过<code>localstroge</code>完成，但是如果要入库的话，需要进一步研究空间库的表结构，确定是否需要新建表来满足功能需求，这个要和<code>C/S</code>组同事沟通，不知道是否能够随意新增表，会不会导致其他正在使用<code>webgis</code>服务的抗拒。</p></li><li><p>第二步，确定保存的书签列表展示是通过引入插件，做分页展示，还是手动做<code>table</code>内容拼接。</p></li><li><p>第三步，确定书签列表展示内容列和展示标题，还有其他功能展示细节内容。</p></li><li><p>第四步，根据设计逻辑，做出单独案例<code>demo</code>，并做相关功能测试。</p></li><li><p>第五步，迁移<code>demo</code>到项目中来，确定绑定坐标书签功能弹窗是否正常显示，确定相关功能是否正确绑定。</p></li></ul><h2 id="1-5-范围书签功能"><a href="#1-5-范围书签功能" class="headerlink" title="1.5 范围书签功能"></a>1.5 范围书签功能</h2><ul><li><p>第一步，确定书签保存是入库还是保存到浏览器本地，保存到浏览器本地。</p><blockquote><p>一条数据记录内容</p></blockquote><ul><li>唯一id（程序生成）</li><li>书签name</li><li>坐标点集合，但是随便一个范围的坐标点个数加上每个点的长度精度，这个对字段类型长度必须要很大。</li></ul><blockquote><p>一条页面记录内容</p></blockquote><ul><li>书签name</li><li>范围面积</li><li>删除按钮</li></ul><p>数据量比较多，不确定是否可以通过<code>localstroge</code>完成，但是如果要入库的话，需要进一步研究空间库的表结构，确定是否需要新建表来满足功能需求，这个要和<code>C/S</code>组同事沟通，不知道是否能够随意新增表，会不会导致其他正在使用<code>webgis</code>服务的抗拒。</p></li><li><p>第二步，确定保存的书签列表展示是通过引入插件，做分页展示，还是手动做<code>table</code>内容拼接。</p></li><li><p>第三步，确定书签列表展示内容列和展示标题，还有其他功能展示细节内容。</p></li><li><p>第四步，根据设计逻辑，做出单独案例<code>demo</code>，并做相关功能测试。</p></li><li><p>第五步，迁移<code>demo</code>到项目中来，确定绑定坐标书签功能弹窗是否正常显示，确定相关功能是否正确绑定。</p></li></ul><h2 id="1-6-双屏和四屏功能"><a href="#1-6-双屏和四屏功能" class="headerlink" title="1.6 双屏和四屏功能"></a>1.6 双屏和四屏功能</h2><ul><li><p>第一步，确定在什么条件下，可以使用双屏和四屏功能。</p></li><li><p>第二步，确认默认的矢量主图层，默认的双屏图层和四屏图层。</p></li><li><p>第三步，确定每个分屏对应的缩略图片，和唯一名称。</p></li><li><p>第四步，根据设计逻辑，做出单独案例<code>demo</code>，并做相关功能测试。</p></li><li><p>第五步，迁移<code>demo</code>到项目中来，确定绑定坐标书签功能弹窗是否正常显示，确定相关功能是否正确绑定。</p></li></ul><h2 id="1-7-后续功能扩展"><a href="#1-7-后续功能扩展" class="headerlink" title="1.7 后续功能扩展"></a>1.7 后续功能扩展</h2><ul><li>时态演变，单击<code>时态演变</code>按钮 ，通过动画的形式，实现历史数据的展示与对比。</li><li>三维，单击<code>三维</code>按钮 ，实现三维数据与2D数据对比。</li><li>业务查询，需要支持：建设用地报批、土地开发整理、农村土地整治、土地储备、土地供应及监管、土地登记、违法用地等的图形查询和属性查询。</li></ul><blockquote><p>查询模式应支持：1、空间关系查询，通过点查询、拉框查询得到各业务的图形数据；2、时间关系查询：根据某个时间段或者某个时点作为条件进行查询；3、智能查询：通过构造国土资源智能搜索引擎，根据任意输入项目编号、权利人、地块要素等查询条件进行搜索；4、图属对照查询，实现业务信息图文一体化。（查询条件、查询结果描述）</p></blockquote><ul><li><p>图表展示功能，对于项目中一些分析结果，以图表的形式叠加在地图上。</p></li><li><p>热力分布显示功能，对于项目中一些分析结果，以热力图的形式叠加在地图上。</p></li><li><p>后台管理平台，现有的所有配置，主要是在<code>config.xml</code>和<code>web.config</code>中进行配置，对于测试人员来说比较麻烦，最好做一个页面进行配置管理。</p></li></ul><h1 id="2-学习安排"><a href="#2-学习安排" class="headerlink" title="2 学习安排"></a>2 学习安排</h1><h2 id="2-1-填坑"><a href="#2-1-填坑" class="headerlink" title="2.1 填坑"></a>2.1 填坑</h2><ul><li>string引用类型文章写完</li><li>inoic学习记录写完</li><li>python3学习记录写完</li></ul><h2 id="2-2-读书计划"><a href="#2-2-读书计划" class="headerlink" title="2.2 读书计划"></a>2.2 读书计划</h2><ul><li>js高程3</li><li>js语言精粹</li><li>js忍者秘术</li><li>js设计模式</li><li>js数据结构学习</li><li>etc.</li></ul><h2 id="2-3-框架学习计划"><a href="#2-3-框架学习计划" class="headerlink" title="2.3 框架学习计划"></a>2.3 框架学习计划</h2><ul><li>vue深入学习</li><li>react深入学习</li><li>react native深入学习</li><li>ng5深入学习</li><li>preact学习和了解</li><li>moon学习和了解</li><li>微信小程序的深入学习</li><li>node-express的深入学习和实战</li><li>antd-pro的深入学习和实战</li><li>iceworks的深入学习和实战</li><li>docker学习和了解</li><li>etc.</li></ul><h2 id="2-4-项目计划"><a href="#2-4-项目计划" class="headerlink" title="2.4 项目计划"></a>2.4 项目计划</h2><ul><li><p>一个完整新闻类的webapp项目，主要使用mongodb，ionic，react和antd-design，路由跳转控制，默认需要登录，才能够进入功能页，参考<code>coding冒泡广场</code>设计。</p></li><li><p>一个完整音乐类的webapp项目，主要使用mongodb，react native和antd-design，路由跳转控制，默认需要登录，才能够进入功能页，参考<code>growio音乐网站</code>设计。</p></li><li><p>一个完整诗歌类的桌面项目，主要使用mongodb，Electron和mdui，参考<code>古诗词典app</code>页面设计。</p></li><li><p>etc.</p></li></ul><h2 id="2-5-交流会"><a href="#2-5-交流会" class="headerlink" title="2.5 交流会"></a>2.5 交流会</h2><ul><li>多参加感兴趣的交流会，并且记得在电脑上实战</li><li>对知识点研究深一些，争取也可以做技术交流讲解人。</li></ul><h1 id="3-生活安排"><a href="#3-生活安排" class="headerlink" title="3 生活安排"></a>3 生活安排</h1><h2 id="3-1-饮食"><a href="#3-1-饮食" class="headerlink" title="3.1 饮食"></a>3.1 饮食</h2><ul><li>保持每天至少吃一个鸡蛋。</li><li>保证每天都要吃早餐。</li><li>保证午餐不要吃的太少。</li><li>保证自己弄的晚餐，有荤有素。</li><li>保证自己弄的晚餐，自己觉得还不错。</li><li>可以尝试多认识一些调料，不要只用盐做菜。</li><li>尽量少吃刺激性食品。</li><li>周末要记得出去吃好吃的，犒劳自己。</li></ul><h2 id="3-2-运动"><a href="#3-2-运动" class="headerlink" title="3.2 运动"></a>3.2 运动</h2><ul><li>保持每天至少5000步。</li><li>周末出去尽量步行，最好将步数刷到一万五步以上。</li><li>尝试恢复早起，做些运动。</li></ul><h2 id="3-3-睡眠"><a href="#3-3-睡眠" class="headerlink" title="3.3 睡眠"></a>3.3 睡眠</h2><ul><li>在非必要的情况下，不要晚睡。</li><li>如果出于某些原因，必须要晚睡，在保证进度的情况下面，不要在打瞌睡的情况下继续坚持。</li><li>在前一天没有睡的特别晚的情况下，早上不要起的太晚。</li></ul><h2 id="3-4-交友"><a href="#3-4-交友" class="headerlink" title="3.4 交友"></a>3.4 交友</h2><ul><li>可以多认识一些朋友。</li><li>对于值得学习的语录，要做及时的记录。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;新年新气象，给自己2018年初做个安排&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/categories/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
      <category term="计划安排" scheme="https://mowatermelon.github.io/tags/%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/"/>
    
      <category term="2018" scheme="https://mowatermelon.github.io/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>前端思考之2018新年规划公司版</title>
    <link href="https://mowatermelon.github.io/2018/01/28/thinking-in-the-front-end-knowledge-working/"/>
    <id>https://mowatermelon.github.io/2018/01/28/thinking-in-the-front-end-knowledge-working/</id>
    <published>2018-01-27T16:00:00.000Z</published>
    <updated>2018-03-26T01:43:41.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-doing"><a href="#1-doing" class="headerlink" title="1 doing"></a>1 doing</h1><h2 id="1-1-what"><a href="#1-1-what" class="headerlink" title="1.1 what"></a>1.1 what</h2><p>前端相关项目需求</p><a id="more"></a><h2 id="1-2-where"><a href="#1-2-where" class="headerlink" title="1.2 where"></a>1.2 where</h2><ul><li>维护新产品<code>webgis</code>板块</li><li>参与新产品前端页面公用组件开发</li></ul><h2 id="1-3-how"><a href="#1-3-how" class="headerlink" title="1.3 how"></a>1.3 how</h2><ul><li>查看地图相关的vue组件开发案例</li><li>研究arcgis和vue的兼容可能性</li><li>查看awesome-vue项目中是否有值得借鉴的项目</li><li>通过研究，参与整理新产品组件开发规范制定（详见2.4）</li></ul><h1 id="2-suggest"><a href="#2-suggest" class="headerlink" title="2 suggest"></a>2 suggest</h1><h2 id="2-1-company"><a href="#2-1-company" class="headerlink" title="2.1 company"></a>2.1 company</h2><p>无</p><h2 id="2-2-department"><a href="#2-2-department" class="headerlink" title="2.2 department"></a>2.2 department</h2><ul><li><p>增强技术交流次数</p><ul><li>每次交流可以是自由交流</li><li>也可以是有详细主题的交流</li><li>重点在于各自掌握的技术点互换，或者工作疑惑迁移</li><li>不一定要求所有人都去</li><li>不一定是要在上班日，可以周末找个茶馆，各种交流</li></ul></li><li><p>加强代码规范的管理</p><ul><li>制定可以严格执行的代码规范</li><li>增加代码复查，可以是组员互查，可以是项目负责人的对组员代码的核查</li><li>代码复查的目的是为了写出更好的产品代码，不要简单的绑定奖惩机制</li><li>代码的易读性、可扩展性和可维护性，都要注意，而且也值得鼓励。</li></ul></li></ul><h2 id="2-3-product"><a href="#2-3-product" class="headerlink" title="2.3 product"></a>2.3 product</h2><ul><li>规范产品开发流程，方便每个岗位更专注的做事情</li><li>新产品为了很好的通用性，可以参考阿里出的iceworks</li><li>可以抽取表单设计器，专门用来做代码转化，方便web项目中表单的快速开发</li><li>可以抽取政务框架，作为cms项目进行销售，可以参考layui社区</li><li>可以考虑做<code>webapp</code>使用<code>mui</code>或者<code>react native</code></li><li>可以考虑<code>.NET</code>提供的<code>app</code>研发或者<code>桌面端</code>应用研发</li></ul><h2 id="2-4-Specification"><a href="#2-4-Specification" class="headerlink" title="2.4 Specification"></a>2.4 Specification</h2><ul><li>代码规范<ul><li>组件命名规范</li><li>路由命名规范</li><li>js变量和函数命名规范</li><li>js设计规范（可以借鉴函数式编程）</li><li>css样式和id命名规范</li><li>css设计规范（可以借鉴OOCSS,BEM等等）</li></ul></li><li>文件夹和文件命名规范</li><li>文档规范<ul><li>接口文档的统一格式规范</li><li>接口文档的必备板块规定</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-doing&quot;&gt;&lt;a href=&quot;#1-doing&quot; class=&quot;headerlink&quot; title=&quot;1 doing&quot;&gt;&lt;/a&gt;1 doing&lt;/h1&gt;&lt;h2 id=&quot;1-1-what&quot;&gt;&lt;a href=&quot;#1-1-what&quot; class=&quot;headerlink&quot; title=&quot;1.1 what&quot;&gt;&lt;/a&gt;1.1 what&lt;/h2&gt;&lt;p&gt;前端相关项目需求&lt;/p&gt;
    
    </summary>
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/categories/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
      <category term="2018" scheme="https://mowatermelon.github.io/tags/2018/"/>
    
      <category term="新年规划" scheme="https://mowatermelon.github.io/tags/%E6%96%B0%E5%B9%B4%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Element表单验证</title>
    <link href="https://mowatermelon.github.io/2017/11/12/framework-learning-element-form/"/>
    <id>https://mowatermelon.github.io/2017/11/12/framework-learning-element-form/</id>
    <published>2017-11-11T16:00:00.000Z</published>
    <updated>2018-03-30T10:05:31.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>感觉element的表单组件验证还挺有意思的</p></blockquote><h1 id="第一步-添加el-form标签"><a href="#第一步-添加el-form标签" class="headerlink" title="第一步 添加el-form标签"></a>第一步 添加el-form标签</h1><p><code>&lt;el-form :model=&quot;ruleForm&quot; status-icon :rules=&quot;rules&quot; ref=&quot;ruleForm&quot;&gt;&lt;/el-form&gt;</code></p><a id="more"></a><ul><li>model 对应绑定的是下面input组的的顶级数据对象，是以自定义属性的形式进行添加</li><li>status-icon这个是状态的icon，写了这个属性之后，input组做失焦验证的时候，input框最右侧出现成功或者失败的icon状态提示。</li><li>rules对应的是下面input组做失焦验证的，主要规则数据，是以自定义属性的形式进行添加</li><li>ref是绑定当前作用域中的ref对应的表单对象，举例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//可以在一个失焦验证中唤起另一个的失焦验证</span></span><br><span class="line"><span class="comment">//重点在这一句  _this.$refs.ruleForm.validateField('userRPwd');</span></span><br><span class="line"><span class="keyword">const</span> validatePass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入密码'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (_this.gores &amp;&amp; _this.ruleForm.userRPwd !== <span class="string">''</span>) &#123;</span><br><span class="line">      _this.$refs.ruleForm.validateField(<span class="string">'userRPwd'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!_this.gores)&#123;</span><br><span class="line">      <span class="keyword">const</span> UPassd = _this.$store.state.userPassword||_this.aesEncrypt(<span class="string">'123'</span>, <span class="string">'UPassd'</span>);</span><br><span class="line">      <span class="keyword">if</span> (value !== _this.aesDecrypt(UPassd, <span class="string">'UPassd'</span>)) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的密码'</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//可以在清除按钮事件中写这样的逻辑</span></span><br><span class="line"> goReg (formName) &#123;</span><br><span class="line">   <span class="keyword">this</span>.$refs[formName].resetFields();</span><br><span class="line">   <span class="keyword">this</span>.gores = <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//可以在按钮提交事件中写这样的事件验证</span></span><br><span class="line">checkReg (formName) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      _this.showSuc(<span class="string">'登录成功'</span>);</span><br><span class="line">      _this.$store.commit(<span class="string">'setUName'</span>,_this.aesEncrypt(_this.ruleForm.userName, <span class="string">'UName'</span>));</span><br><span class="line">      _this.$store.commit(<span class="string">'setUPassd'</span>,_this.aesEncrypt(_this.ruleForm.userPwd, <span class="string">'UPassd'</span>));</span><br><span class="line">      _this.$store.commit(<span class="string">'checkLogin'</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _this.showErr(<span class="string">'请确认所有输入项都填写完成，或者两次密码输入是否匹配'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二步-写规则rule和数据model"><a href="#第二步-写规则rule和数据model" class="headerlink" title="第二步 写规则rule和数据model"></a>第二步 写规则rule和数据model</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> validateName = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入用户名'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> UName = _this.$store.state.userName||_this.aesEncrypt(<span class="string">'123'</span>, <span class="string">'UName'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!_this.gores &amp;&amp; value !== _this.aesDecrypt(UName, <span class="string">'UName'</span>)) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确注册的用户名'</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validatePass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入密码'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (_this.gores &amp;&amp; _this.ruleForm.userRPwd !== <span class="string">''</span>) &#123;</span><br><span class="line">        _this.$refs.ruleForm.validateField(<span class="string">'userRPwd'</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!_this.gores)&#123;</span><br><span class="line">        <span class="keyword">const</span> UPassd = _this.$store.state.userPassword||_this.aesEncrypt(<span class="string">'123'</span>, <span class="string">'UPassd'</span>);</span><br><span class="line">        <span class="keyword">if</span> (value !== _this.aesDecrypt(UPassd, <span class="string">'UPassd'</span>)) &#123;</span><br><span class="line">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的密码'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validatePass2 = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(_this.gores)&#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入确认输入密码'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== _this.ruleForm.userPwd) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'两次输入密码不一致!'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ruleForm:&#123;</span><br><span class="line">      userName: <span class="string">''</span>,</span><br><span class="line">      userPwd: <span class="string">''</span>,</span><br><span class="line">      userRPwd: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    gores: <span class="literal">false</span>,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      userName: [</span><br><span class="line">        &#123; <span class="attr">validator</span>: validateName, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      userPwd: [</span><br><span class="line">        &#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      userRPwd: [</span><br><span class="line">        &#123; <span class="attr">validator</span>: validatePass2, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="第三步-与页面元素进行绑定"><a href="#第三步-与页面元素进行绑定" class="headerlink" title="第三步 与页面元素进行绑定"></a>第三步 与页面元素进行绑定</h1><p>请注意每个<code>el-form-item</code>中的<code>prop</code>属性，这个是和检测规则进行紧密相连的，是对应<code>rules</code>的属性，请注意一定要一一对应呀。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">"flex"</span> <span class="attr">justify</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"24"</span> <span class="attr">:sm</span>=<span class="string">"8"</span> <span class="attr">class</span>=<span class="string">"loginBox"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu loginIcon"</span> <span class="attr">alt</span>=<span class="string">"用户登录"</span> <span class="attr">v-if</span>=<span class="string">"!gores"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-date loginIcon"</span> <span class="attr">alt</span>=<span class="string">"用户注册"</span> <span class="attr">v-if</span>=<span class="string">"gores"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"ruleForm"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"h1"</span> <span class="attr">prop</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.userName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"h1"</span> <span class="attr">prop</span>=<span class="string">"userPwd"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.userPwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span> <span class="attr">v-show</span>=<span class="string">"gores"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"h1"</span> <span class="attr">prop</span>=<span class="string">"userRPwd"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请再次确认输入密码"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.userRPwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">v-if</span>=<span class="string">"!gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"checkLogin('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>登陆账户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"24"</span> <span class="attr">:sm</span>=<span class="string">"10"</span> <span class="attr">:offset</span>=<span class="string">"14"</span> <span class="attr">v-if</span>=<span class="string">"!gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"goReg('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">v-if</span>=<span class="string">"gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"checkReg('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>注册账户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"24"</span> <span class="attr">:sm</span>=<span class="string">"10"</span> <span class="attr">:offset</span>=<span class="string">"14"</span> <span class="attr">v-if</span>=<span class="string">"gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>  <span class="attr">v-if</span>=<span class="string">"gores"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"goLogin('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>已有帐号去登陆<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="第四步-效果预览"><a href="#第四步-效果预览" class="headerlink" title="第四步 效果预览"></a>第四步 效果预览</h1><h2 id="登录效果预览"><a href="#登录效果预览" class="headerlink" title="登录效果预览"></a>登录效果预览</h2><p><img src="https://dn-coding-net-production-pp.qbox.me/f9d6b0a2-5fb8-49a3-afc8-2c7a4864b60e.png" alt="图片"></p><h2 id="注册效果预览"><a href="#注册效果预览" class="headerlink" title="注册效果预览"></a>注册效果预览</h2><p><img src="https://dn-coding-net-production-pp.qbox.me/887e3585-a811-4efa-b7b9-a13590761157.png" alt="图片"></p><h1 id="放上完整项目代码"><a href="#放上完整项目代码" class="headerlink" title="放上完整项目代码"></a>放上完整项目代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">"flex"</span> <span class="attr">justify</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"24"</span> <span class="attr">:sm</span>=<span class="string">"8"</span> <span class="attr">class</span>=<span class="string">"loginBox"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu loginIcon"</span> <span class="attr">alt</span>=<span class="string">"用户登录"</span> <span class="attr">v-if</span>=<span class="string">"!gores"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-date loginIcon"</span> <span class="attr">alt</span>=<span class="string">"用户注册"</span> <span class="attr">v-if</span>=<span class="string">"gores"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"ruleForm"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"h1"</span> <span class="attr">prop</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.userName"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"h1"</span> <span class="attr">prop</span>=<span class="string">"userPwd"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.userPwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span> <span class="attr">v-show</span>=<span class="string">"gores"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"h1"</span> <span class="attr">prop</span>=<span class="string">"userRPwd"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"请再次确认输入密码"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.userRPwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">v-if</span>=<span class="string">"!gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"checkLogin('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>登陆账户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"24"</span> <span class="attr">:sm</span>=<span class="string">"10"</span> <span class="attr">:offset</span>=<span class="string">"14"</span> <span class="attr">v-if</span>=<span class="string">"!gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"goReg('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"24"</span> <span class="attr">v-if</span>=<span class="string">"gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"checkReg('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>注册账户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"24"</span> <span class="attr">:sm</span>=<span class="string">"10"</span> <span class="attr">:offset</span>=<span class="string">"14"</span> <span class="attr">v-if</span>=<span class="string">"gores"</span> <span class="attr">class</span>=<span class="string">"n-p-l-r"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span>  <span class="attr">v-if</span>=<span class="string">"gores"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">"goLogin('ruleForm')"</span> <span class="attr">class</span>=<span class="string">"long"</span>&gt;</span>已有帐号去登陆<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> crypto <span class="keyword">from</span> <span class="string">'crypto'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'Login'</span>,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> validateName = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入用户名'</span>));</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> UName = _this.$store.state.userName||_this.aesEncrypt(<span class="string">'123'</span>, <span class="string">'UName'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!_this.gores &amp;&amp; value !== _this.aesDecrypt(UName, <span class="string">'UName'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确注册的用户名'</span>));</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> validatePass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!value) &#123;</span></span><br><span class="line"><span class="javascript">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入密码'</span>));</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (_this.gores &amp;&amp; _this.ruleForm.userRPwd !== <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">          _this.$refs.ruleForm.validateField(<span class="string">'userRPwd'</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!_this.gores)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> UPassd = _this.$store.state.userPassword||_this.aesEncrypt(<span class="string">'123'</span>, <span class="string">'UPassd'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (value !== _this.aesDecrypt(UPassd, <span class="string">'UPassd'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的密码'</span>));</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> validatePass2 = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(_this.gores)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!value) &#123;</span></span><br><span class="line"><span class="javascript">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入确认输入密码'</span>));</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== _this.ruleForm.userPwd) &#123;</span></span><br><span class="line"><span class="javascript">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'两次输入密码不一致!'</span>));</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">          callback();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      ruleForm:&#123;</span></span><br><span class="line"><span class="javascript">        userName: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        userPwd: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        userRPwd: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      gores: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">      rules: &#123;</span></span><br><span class="line"><span class="undefined">        userName: [</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">validator</span>: validateName, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span></span><br><span class="line"><span class="undefined">        ],</span></span><br><span class="line"><span class="undefined">        userPwd: [</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span></span><br><span class="line"><span class="undefined">        ],</span></span><br><span class="line"><span class="undefined">        userRPwd: [</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">validator</span>: validatePass2, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    checkLogin (formName) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">          _this.showSuc(<span class="string">'登录成功'</span>);</span></span><br><span class="line"><span class="javascript">          _this.$store.commit(<span class="string">'setUName'</span>,_this.aesEncrypt(_this.ruleForm.userName, <span class="string">'UName'</span>));</span></span><br><span class="line"><span class="javascript">          _this.$store.commit(<span class="string">'setUPassd'</span>,_this.aesEncrypt(_this.ruleForm.userPwd, <span class="string">'UPassd'</span>));</span></span><br><span class="line"><span class="javascript">          _this.$store.commit(<span class="string">'checkLogin'</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          _this.showErr(<span class="string">'用户名或者帐号输入错误请确认'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    checkReg (formName) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">          _this.showSuc(<span class="string">'登录成功'</span>);</span></span><br><span class="line"><span class="javascript">          _this.$store.commit(<span class="string">'setUName'</span>,_this.aesEncrypt(_this.ruleForm.userName, <span class="string">'UName'</span>));</span></span><br><span class="line"><span class="javascript">          _this.$store.commit(<span class="string">'setUPassd'</span>,_this.aesEncrypt(_this.ruleForm.userPwd, <span class="string">'UPassd'</span>));</span></span><br><span class="line"><span class="javascript">          _this.$store.commit(<span class="string">'checkLogin'</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          _this.showErr(<span class="string">'请确认所有输入项都填写完成，或者两次密码输入是否匹配'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    goReg (formName) &#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">this</span>.$refs[formName].resetFields();</span></span><br><span class="line"><span class="javascript">       <span class="keyword">this</span>.gores = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    goLogin (formName) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs[formName].resetFields();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.gores = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    aesEncrypt(data, key) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> cipher = crypto.createCipher(<span class="string">'aes192'</span>, key);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> crypted = cipher.update(data, <span class="string">'utf8'</span>, <span class="string">'hex'</span>);</span></span><br><span class="line"><span class="javascript">        crypted += cipher.final(<span class="string">'hex'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> crypted;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    aesDecrypt(encrypted, key) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> decipher = crypto.createDecipher(<span class="string">'aes192'</span>, key);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> decrypted = decipher.update(encrypted, <span class="string">'hex'</span>, <span class="string">'utf8'</span>);</span></span><br><span class="line"><span class="javascript">        decrypted += decipher.final(<span class="string">'utf8'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> decrypted;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    showSuc(msg)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">        showClose: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">        message: msg,</span></span><br><span class="line"><span class="javascript">        type: <span class="string">'success'</span>,</span></span><br><span class="line"><span class="undefined">        duration:500</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    showErr(msg)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">        showClose: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">        message: msg,</span></span><br><span class="line"><span class="javascript">        type: <span class="string">'error'</span></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">$normal_shadom:#ddd;//页面默认阴影颜色</span></span><br><span class="line"><span class="undefined">$normal_active:#5bc0de;//页面默认主色调</span></span><br><span class="line"><span class="undefined">$normal_color:#fff; //页面默认未激活色</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.loginBox</span>&#123;</span></span><br><span class="line"><span class="undefined">  box-shadow: 0 0 21px 2px $normal_shadom;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">margin-top</span><span class="selector-pseudo">:8</span>%;</span></span><br><span class="line"><span class="undefined">  padding: 3%;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.loginIcon</span>&#123;</span></span><br><span class="line"><span class="undefined">    background: $normal_active;</span></span><br><span class="line"><span class="undefined">    color:$normal_color;</span></span><br><span class="line"><span class="undefined">    border-radius: 100%;</span></span><br><span class="line"><span class="undefined">    padding: 25px;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 30px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> (max-width:<span class="number">768px</span>)&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.loginBox</span>&#123;</span></span><br><span class="line"><span class="undefined">    box-shadow: 0 0 21px 2px $normal_color;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;感觉element的表单组件验证还挺有意思的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一步-添加el-form标签&quot;&gt;&lt;a href=&quot;#第一步-添加el-form标签&quot; class=&quot;headerlink&quot; title=&quot;第一步 添加el-form标签&quot;&gt;&lt;/a&gt;第一步 添加el-form标签&lt;/h1&gt;&lt;p&gt;&lt;code&gt;&amp;lt;el-form :model=&amp;quot;ruleForm&amp;quot; status-icon :rules=&amp;quot;rules&amp;quot; ref=&amp;quot;ruleForm&amp;quot;&amp;gt;&amp;lt;/el-form&amp;gt;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="base" scheme="https://mowatermelon.github.io/tags/base/"/>
    
      <category term="element" scheme="https://mowatermelon.github.io/tags/element/"/>
    
      <category term="form" scheme="https://mowatermelon.github.io/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Node版本升级重装cnpm</title>
    <link href="https://mowatermelon.github.io/2017/11/11/framework-learning-node-update-cnpm/"/>
    <id>https://mowatermelon.github.io/2017/11/11/framework-learning-node-update-cnpm/</id>
    <published>2017-11-10T16:00:00.000Z</published>
    <updated>2018-03-30T09:52:25.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天看了一下，node现在最新稳定版本是8.10.0，最新版本是9.9.0，我本地还是8.9.3，感觉版本有点老，想着本地反正也是用的nvm可以随意升级，就<code>nvm install v8.10.0</code>，然后<code>nvm use v8.10.0</code>,执行完成之后，我发现我之前装的<code>cnpm</code>和<code>vue</code>不管用了。</p></blockquote><a id="more"></a><h1 id="升级之后的版本效果图"><a href="#升级之后的版本效果图" class="headerlink" title="升级之后的版本效果图"></a>升级之后的版本效果图</h1><p><img src="https://user-images.githubusercontent.com/18508817/38133667-b4f24834-33ff-11e8-810d-a5b40f831c8b.png" alt="image"></p><hr><h1 id="安装cnpm出错"><a href="#安装cnpm出错" class="headerlink" title="安装cnpm出错"></a>安装cnpm出错</h1><p>我就重新全局安装<code>cnpm</code>指令，但是这边一直报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\Users\Administrator&gt;npm install -g cnpm --registry=https://registry.npm.taoba</span><br><span class="line">o.org</span><br><span class="line">npm ERR! Unexpected end of JSON input <span class="keyword">while</span> parsing near <span class="string">'...p-equal":"~1.0.1","</span></span><br><span class="line"><span class="string">ma'</span></span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     D:\Users\Administrator\AppData\Roaming\npm-cache\_logs\2018-03-26T0</span><br><span class="line">6_04_13_634Z-debug.log</span><br></pre></td></tr></table></figure><p>我以为我镜像指向的路径有问题，重新试了好几遍，结果发现就是不行</p><blockquote><p>在网上搜到可以通过强制清理npm cache 来解决，主要是因为之前本地安装cnpm，所以需要清理一下缓存</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><p>然后我执行安装操作，安装成功了，不知道对后续有没有其他影响</p><blockquote><p>过程截图</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37889629-f207083e-30ff-11e8-88ed-0f1ffcbcb318.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天看了一下，node现在最新稳定版本是8.10.0，最新版本是9.9.0，我本地还是8.9.3，感觉版本有点老，想着本地反正也是用的nvm可以随意升级，就&lt;code&gt;nvm install v8.10.0&lt;/code&gt;，然后&lt;code&gt;nvm use v8.10.0&lt;/code&gt;,执行完成之后，我发现我之前装的&lt;code&gt;cnpm&lt;/code&gt;和&lt;code&gt;vue&lt;/code&gt;不管用了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="cnpm" scheme="https://mowatermelon.github.io/tags/cnpm/"/>
    
      <category term="node" scheme="https://mowatermelon.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Dva入门</title>
    <link href="https://mowatermelon.github.io/2017/11/10/framework-learning-dva/"/>
    <id>https://mowatermelon.github.io/2017/11/10/framework-learning-dva/</id>
    <published>2017-11-09T16:00:00.000Z</published>
    <updated>2018-03-30T09:44:35.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-初始化基础项目"><a href="#1-初始化基础项目" class="headerlink" title="1 初始化基础项目"></a>1 初始化基础项目</h1><a id="more"></a><blockquote><p>命令行初始化简单项目</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37641352-5eb00112-2c54-11e8-806d-bedf3eb4a1f5.png" alt="image"></p><blockquote><p>项目结构</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37641614-6a9d2120-2c55-11e8-9a33-c6affdd70bf2.png" alt="image"></p><blockquote><p>项目启动效果，启动地址<code>http://localhost:8000/#/</code></p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37641765-eec8ad2a-2c55-11e8-956c-f609bd6fd5a7.png" alt="image"></p><h1 id="2-初始化复杂项目"><a href="#2-初始化复杂项目" class="headerlink" title="2 初始化复杂项目"></a>2 初始化复杂项目</h1><blockquote><p>命令行新建项目，默认会直接安装依赖</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37641282-16fffd68-2c54-11e8-96b3-5cdff96517a0.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/18508817/37641268-0bdf14e6-2c54-11e8-8f45-efa7bd4d4df6.png" alt="image"></p><blockquote><p>执行之后的项目文件</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37641637-841913ac-2c55-11e8-97c9-3d5e52ceef1a.png" alt="image"></p><blockquote><p>项目启动之后的页面，启动地址<code>http://localhost:8000/#/</code></p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37640207-7bda0ba2-2c4f-11e8-9f49-b86d0695e2de.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-初始化基础项目&quot;&gt;&lt;a href=&quot;#1-初始化基础项目&quot; class=&quot;headerlink&quot; title=&quot;1 初始化基础项目&quot;&gt;&lt;/a&gt;1 初始化基础项目&lt;/h1&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="base" scheme="https://mowatermelon.github.io/tags/base/"/>
    
      <category term="dva" scheme="https://mowatermelon.github.io/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>.NET学习之C#实现调用Java类中方法</title>
    <link href="https://mowatermelon.github.io/2017/11/09/NET-learning-run-java-jar/"/>
    <id>https://mowatermelon.github.io/2017/11/09/NET-learning-run-java-jar/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2018-03-30T09:41:36.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本思路</p></blockquote><p>用<code>C#</code>实现调用<code>Java</code>编写的类中的方法；重点是将<code>Java</code>编写的程序打包成<code>Jar</code>，然后使用开源工具<code>IKVM</code>将其转化成<code>DLL</code>控件，在<code>.NET</code>环境下调用。</p><a id="more"></a><p>分为以下步骤：</p><ul><li><p>下载<code>JDK6</code>（注:<code>JDK7</code>下可能不支持，建议使用<code>JDK6</code>和<code>Eclipse</code>），进行安装，然后配置环境变量Path，将JDK安装的路径(例如：<code>D:\Program Files\Java\jdk1.6.0_10\bin</code>)添加到<code>Path</code>变量后面。</p><p> 用<code>cmd</code>打开<code>DOS</code>框，输入<code>javac</code>就可以查看是否配置成功，配置成功会有较详细的信息展示。</p></li><li><p>到<code>IKVM</code>官方网站下载IKVM需要的组件 <code>http://www.ikvm.net/</code>,或者<code>https://sourceforge.net/projects/ikvm/files/ikvm/0.42.0.3</code></p><p>  <code>ikvm-0.42.0.3.zip</code>，<code>ikvmbin-0.42.0.3.zip</code>，<code>openjdk6-b16-stripped.zip</code>分别下载三个压缩文件，然后将<code>ikvm-0.42.0.3.zip</code>进行解压，将其解压的文件的路径添加到用户和系统环境变量<code>Path</code>后面，类似于配置JDK时的做法。</p></li></ul><p><img src="https://user-images.githubusercontent.com/18508817/37642373-d85c24fc-2c57-11e8-8e3d-ac6327f46af4.png" alt="image"></p><ul><li>将转化的JAR包通过IKVM工具转化为<code>DLL</code>控件。举例jar文件名是<code>com.Hello.jar</code>，你想转化之后的文件名是<code>Hello.dll</code></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ikvmc -out:Hello.dll com.Hello.jar</span><br></pre></td></tr></table></figure><ul><li>新建<code>C#</code>项目，将<code>ikvm-0.42.0.3.zip</code>解压出来的文件路径的<code>bin</code>目录下找到以下3个DLL控件<code>IKVM.OpenJDK.Core.dll</code> ，<code>IKVM.Runtime.dll</code> ，<code>IKVM.Runtime.JNI.dll</code> 将它们添加引用添加到<code>C#</code>项目中。然后添加自己生成的<code>Hello.dll</code>控件。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基本思路&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用&lt;code&gt;C#&lt;/code&gt;实现调用&lt;code&gt;Java&lt;/code&gt;编写的类中的方法；重点是将&lt;code&gt;Java&lt;/code&gt;编写的程序打包成&lt;code&gt;Jar&lt;/code&gt;，然后使用开源工具&lt;code&gt;IKVM&lt;/code&gt;将其转化成&lt;code&gt;DLL&lt;/code&gt;控件，在&lt;code&gt;.NET&lt;/code&gt;环境下调用。&lt;/p&gt;
    
    </summary>
    
      <category term="NET" scheme="https://mowatermelon.github.io/categories/NET/"/>
    
    
      <category term=".NET" scheme="https://mowatermelon.github.io/tags/NET/"/>
    
      <category term="java" scheme="https://mowatermelon.github.io/tags/java/"/>
    
      <category term="jar" scheme="https://mowatermelon.github.io/tags/jar/"/>
    
      <category term="IKVM" scheme="https://mowatermelon.github.io/tags/IKVM/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Docker拉取centos镜像</title>
    <link href="https://mowatermelon.github.io/2017/11/08/framework-learning-docker-centos/"/>
    <id>https://mowatermelon.github.io/2017/11/08/framework-learning-docker-centos/</id>
    <published>2017-11-07T16:00:00.000Z</published>
    <updated>2018-03-30T09:42:13.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装与配置-Docker"><a href="#1-安装与配置-Docker" class="headerlink" title="1 安装与配置 Docker"></a>1 安装与配置 Docker</h1><h2 id="1-1-安装-Docker"><a href="#1-1-安装-Docker" class="headerlink" title="1.1 安装 Docker"></a>1.1 安装 Docker</h2><blockquote><p>Docker 软件包已经包括在默认的 CentOS-Extras 软件源里。因此想要安装 docker，只需要运行下面的 yum 命令：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-io -y</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>直接yum安装，安装成功后查看版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><blockquote><p>启动docker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><blockquote><p>设置开机启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-配置-Docker"><a href="#1-2-配置-Docker" class="headerlink" title="1.2 配置 Docker"></a>1.2 配置 Docker</h2><blockquote><p>更换腾讯云镜像源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"OPTIONS='--registry-mirror=https://mirror.ccs.tencentyun.com'"</span> &gt;&gt; /etc/sysconfig/docker</span><br></pre></td></tr></table></figure><blockquote><p>镜像源挂载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><blockquote><p>重启docker镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><hr><h1 id="2-Docker-的简单操作"><a href="#2-Docker-的简单操作" class="headerlink" title="2 Docker 的简单操作"></a>2 Docker 的简单操作</h1><h2 id="2-1-下载镜像"><a href="#2-1-下载镜像" class="headerlink" title="2.1 下载镜像"></a>2.1 下载镜像</h2><blockquote><p>运行容器</p></blockquote><p>这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。<br>生成一个 centos 镜像为模板的容器并使用 bash shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。</p></blockquote><p>在容器内执行任意命令, 不会影响到宿主机, 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/simple_docker</span><br></pre></td></tr></table></figure><blockquote><p>可以看到 /data 目录下已经创建成功了 simple_docker 文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /data</span><br></pre></td></tr></table></figure><blockquote><p>退出容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>查看宿主机的 /data 目录, 并没有 simple_docker 文件夹, 说明容器内的操作不会影响到宿主机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /data</span><br></pre></td></tr></table></figure><h2 id="2-2-保存容器"><a href="#2-2-保存容器" class="headerlink" title="2.2 保存容器"></a>2.2 保存容器</h2><blockquote><p>查看所有的容器信息， 能获取容器的id</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><blockquote><p>请自行将 -m 后面的信息改成自己的容器的信息，保存镜像：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">"备注"</span> 你的CONTAINER_ID 你的IMAGE</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-安装与配置-Docker&quot;&gt;&lt;a href=&quot;#1-安装与配置-Docker&quot; class=&quot;headerlink&quot; title=&quot;1 安装与配置 Docker&quot;&gt;&lt;/a&gt;1 安装与配置 Docker&lt;/h1&gt;&lt;h2 id=&quot;1-1-安装-Docker&quot;&gt;&lt;a href=&quot;#1-1-安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装 Docker&quot;&gt;&lt;/a&gt;1.1 安装 Docker&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker 软件包已经包括在默认的 CentOS-Extras 软件源里。因此想要安装 docker，只需要运行下面的 yum 命令：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install docker-io -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="docker" scheme="https://mowatermelon.github.io/tags/docker/"/>
    
      <category term="centos" scheme="https://mowatermelon.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Docker基础学习</title>
    <link href="https://mowatermelon.github.io/2017/11/07/framework-learning-docker-base/"/>
    <id>https://mowatermelon.github.io/2017/11/07/framework-learning-docker-base/</id>
    <published>2017-11-06T16:00:00.000Z</published>
    <updated>2018-03-30T09:43:09.646Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一步  安装docker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y docker</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>第二步 启动服务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><blockquote><p>第三步 拉取镜像，或者直接启动镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull training/webapp  <span class="comment"># 载入镜像</span></span><br><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line"><span class="comment">#  -d:让容器在后台运行。</span></span><br><span class="line"><span class="comment"># -P:将容器内部使用的网络端口映射到我们使用的主机上。</span></span><br></pre></td></tr></table></figure><blockquote><p>第四步 查看当前启动的容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>第五步 重启当前容器</p></blockquote><p>正在运行的容器，我们可以使用命令来重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart</span><br></pre></td></tr></table></figure><blockquote><p>第六步 停止对应容器服务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;dockerName&gt;</span><br><span class="line"><span class="comment"># 举个栗子 在上一步中查看的容器名称是melon</span></span><br><span class="line"></span><br><span class="line">docker stop melon</span><br></pre></td></tr></table></figure><blockquote><p>第七步 移除WEB应用容器</p></blockquote><p>我们可以使用命令来删除不需要的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;dockerName&gt;</span><br><span class="line"><span class="comment"># 举个栗子 在上一步中查看的容器名称是melon</span></span><br><span class="line"></span><br><span class="line">docker rm melon</span><br></pre></td></tr></table></figure><blockquote><p>过程截图</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/37816431-057eb69a-2eae-11e8-91b7-5f34b5ee9c23.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一步  安装docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum -y docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="base" scheme="https://mowatermelon.github.io/tags/base/"/>
    
      <category term="docker" scheme="https://mowatermelon.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Arcgis for Js 4.6本地部署</title>
    <link href="https://mowatermelon.github.io/2017/11/06/framework-learning-Arcgis-for-js-local-build/"/>
    <id>https://mowatermelon.github.io/2017/11/06/framework-learning-Arcgis-for-js-local-build/</id>
    <published>2017-11-05T16:00:00.000Z</published>
    <updated>2018-03-30T09:16:23.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-部署包下载"><a href="#1-部署包下载" class="headerlink" title="1 部署包下载"></a>1 部署包下载</h1><ul><li><a href="https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript">下载对应版本</a></li></ul><a id="more"></a><h1 id="2-部署包举例"><a href="#2-部署包举例" class="headerlink" title="2 部署包举例"></a>2 部署包举例</h1><blockquote><p>下载之后的目录效果，以4.6举例</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/38014622-ef5da80c-329b-11e8-8fea-fb0248c274cb.png" alt="image"><br><img src="https://user-images.githubusercontent.com/18508817/38014649-fd5678b2-329b-11e8-879b-d53b3c67bb16.png" alt="image"></p><h1 id="3-安放部署包到项目中"><a href="#3-安放部署包到项目中" class="headerlink" title="3 安放部署包到项目中"></a>3 安放部署包到项目中</h1><blockquote><p>将文件放到项目路径下面去，记住这个路径<code>/static/plugins/arcgis46</code>，我是把文件放在相对项目根文件夹的这个路径中</p></blockquote><p><img src="https://user-images.githubusercontent.com/18508817/38014700-258ab4c4-329c-11e8-91f7-1bfe0688e257.png" alt="image"></p><h1 id="4-根据安放路径修改源码"><a href="#4-根据安放路径修改源码" class="headerlink" title="4 根据安放路径修改源码"></a>4 根据安放路径修改源码</h1><h2 id="4-1-修改init-js"><a href="#4-1-修改init-js" class="headerlink" title="4.1 修改init.js"></a>4.1 修改init.js</h2><p>修改上图中的init.js，将该文件中的<code>baseUrl:&quot;https://[HOSTNAME_AND_PATH_TO_JSAPI]dojo</code>，修改为<code>baseUrl: (location.protocol === &#39;file:&#39; ? &#39;http:&#39; : location.protocol) + &#39;//&#39; + (function () { var result = &quot;&quot;; result = window.location.href.substr(window.location.href.indexOf(&quot;//&quot;) + 2); result = result.substr(0, result.lastIndexOf(&quot;/&quot;)); return result; })() + &quot;/static/plugins/arcgis46/dojo&quot;</code></p><p>即指向从项目根文件夹开始写实际的<code>dojo.js</code>所在路径，如果后期部署包，路径进行了修改，主要是对<code>&quot;/static/plugins/arcgis46/dojo&quot;</code>进行修改。</p><h2 id="4-2-修改dojo-js"><a href="#4-2-修改dojo-js" class="headerlink" title="4.2 修改dojo.js"></a>4.2 修改dojo.js</h2><p>同时修改<code>/static/plugins/arcgis46/dojo/dojo.js</code>，将该文件中的<code>baseUrl:&quot;https://[HOSTNAME_AND_PATH_TO_JSAPI]dojo</code>，修改为<code>baseUrl: (location.protocol === &#39;file:&#39; ? &#39;http:&#39; : location.protocol) + &#39;//&#39; + (function () { var result = &quot;&quot;; result = window.location.href.substr(window.location.href.indexOf(&quot;//&quot;) + 2); result = result.substr(0, result.lastIndexOf(&quot;/&quot;)); return result; })() + &quot;/static/plugins/arcgis46/dojo&quot;</code></p><p>即指向从项目根文件夹开始写实际的<code>dojo.js</code>所在路径，如果后期部署包，路径进行了修改，主要是对<code>&quot;/static/plugins/arcgis46/dojo&quot;</code>进行修改。</p><h1 id="5-测试引入情况"><a href="#5-测试引入情况" class="headerlink" title="5 测试引入情况"></a>5 测试引入情况</h1><h2 id="5-1-安装esri依赖"><a href="#5-1-安装esri依赖" class="headerlink" title="5.1 安装esri依赖"></a>5.1 安装esri依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm i esri-loader --s</span><br><span class="line">cnpm i dojo-loader --s</span><br></pre></td></tr></table></figure><h2 id="5-2-新建MapView组件"><a href="#5-2-新建MapView组件" class="headerlink" title="5.2 新建MapView组件"></a>5.2 新建MapView组件</h2><blockquote><p>请注意</p></blockquote><ul><li>配置<code>esriLoader</code>的引入路径是<code>../../static/plugins/arcgis46/init.js</code>，即项目中实际的<code>init.js</code>的路径。</li><li>注意引入<code>esri</code>基础所需样式文件，<code>@import &#39;./../../static/plugins/arcgis46/esri/css/main.css&#39;</code>。</li><li><code>view对象</code>实例化对应的标签一定要写一个固定的高度，要不然页面上不会显示。</li><li>请注意实例化<code>view</code>的过程中，通过<code>esriLoader</code>引入的依赖文件，一定要注意顺序，应该是<code>&quot;esri/map&quot;, &quot;esri/views/MapView&quot;,&quot;dojo/domReady!&quot;</code>，顺序有问题，页面会报错，说<code>MapView</code>不是一个<code>constructor</code>。</li><li>注意通过<code>esriLoader.isLoaded()</code>来监听esriLoader是否已经初始化过了</li><li>注意通过<code>map.initialized</code>来判断<code>map</code>对象是否已经初始化完成。</li><li>对于<code>_this.view.hitTest(e)</code>来解析当前鼠标行为，在<code>3.X</code>版本之中，监听到鼠标的<code>evt</code>对象之后，就可以直接通过<code>evt.MapObject</code>来获取当前鼠标的经纬度，但是在<code>4.X</code>版本之中，是需要先将鼠标的<code>evt</code>对象进行解析之后，才能获取相关的地理信息数据。</li></ul><blockquote><p>组件源码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span> <span class="attr">class</span>=<span class="string">"map_div"</span> @<span class="attr">mousemove</span>=<span class="string">"showCoordinates($event)"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right map-info"</span> <span class="attr">:class</span>=<span class="string">"&#123;'hide': isHide&#125;"</span>&gt;</span>当前坐标：x:&#123;&#123;evt.x&#125;&#125;,y:&#123;&#123;evt.y&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> esriLoader <span class="keyword">from</span> <span class="string">'esri-loader'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'MapView'</span>,</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        map: &#123;<span class="string">'loaded'</span>: <span class="string">''</span>&#125;,</span></span><br><span class="line"><span class="javascript">        isHide: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        evt:&#123;<span class="attr">x</span>:<span class="string">''</span>,<span class="attr">y</span>:<span class="string">''</span>&#125;,</span></span><br><span class="line"><span class="undefined">        camera:&#123;&#125;,</span></span><br><span class="line"><span class="undefined">        view:&#123;&#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    watch: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">'map.loaded'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.map.initialized == <span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.isHide = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监听esriLoader是否存在，创建map</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!esriLoader.isLoaded()) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// no, lazy load it the ArcGIS API before using its classes</span></span></span><br><span class="line"><span class="javascript">        esriLoader.bootstrap(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (err) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.error(err);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// once it's loaded, create the map</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.createMap();</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// use a specific version instead of latest 4.x</span></span></span><br><span class="line"><span class="javascript">          url: <span class="string">'../../static/plugins/arcgis46/init.js'</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ArcGIS API is already loaded, just create the map</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.createMap();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="javascript">      createMap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> _this =<span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        esriLoader.dojoRequire([<span class="string">"esri/map"</span>, <span class="string">"esri/views/MapView"</span>,<span class="string">"dojo/domReady!"</span>], (<span class="built_in">Map</span>,MapView) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">          _this.map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span><br><span class="line"><span class="javascript">            basemap: <span class="string">"osm"</span>,</span></span><br><span class="line"><span class="javascript">            ground: <span class="string">"world-elevation"</span><span class="comment">// Use the world elevation service</span></span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="javascript">          _this.view = <span class="keyword">new</span> MapView(&#123;</span></span><br><span class="line"><span class="javascript">            container: <span class="string">"viewDiv"</span>,     <span class="comment">// Reference to the scene div created in step 5</span></span></span><br><span class="line"><span class="javascript">            map: _this.map,                 <span class="comment">// Reference to the map object created before the scene</span></span></span><br><span class="line"><span class="javascript">            scale: <span class="number">50</span>,          <span class="comment">// Sets the initial scale to 1:50,000,000</span></span></span><br><span class="line"><span class="javascript">            center: [<span class="number">114.40845006666666</span>,<span class="number">30.456864444444443</span>]  <span class="comment">// Sets the center point of view with lon/lat</span></span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 缩放到中心图层</span></span></span><br><span class="line"><span class="javascript">      centerZoom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.map.centerAndZoom([<span class="number">114.40845006666666</span>,<span class="number">30.456864444444443</span>], <span class="number">16</span>);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 显示当前坐标</span></span></span><br><span class="line"><span class="javascript">      showCoordinates: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">        _this.view.hitTest(e)</span></span><br><span class="line"><span class="javascript">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> point = res.screenPoint;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(!_this.isHide)&#123;</span></span><br><span class="line"><span class="undefined">                _this.evt.x = point.x;</span></span><br><span class="line"><span class="undefined">                _this.evt.y = point.y;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'./../../static/plugins/arcgis46/esri/css/main.css'</span>;</span></span><br><span class="line"><span class="css"><span class="selector-class">.map_box</span> <span class="selector-class">.map_div</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span>: <span class="selector-tag">calc</span>(100<span class="selector-tag">vh</span>*0<span class="selector-class">.8</span>);</span></span><br><span class="line"><span class="undefined">  cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-预览项目效果"><a href="#6-预览项目效果" class="headerlink" title="6 预览项目效果"></a>6 预览项目效果</h1><p><img src="https://user-images.githubusercontent.com/18508817/38131915-64846dde-33f8-11e8-9620-a70704b97059.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-部署包下载&quot;&gt;&lt;a href=&quot;#1-部署包下载&quot; class=&quot;headerlink&quot; title=&quot;1 部署包下载&quot;&gt;&lt;/a&gt;1 部署包下载&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript&quot;&gt;下载对应版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="webgis" scheme="https://mowatermelon.github.io/tags/webgis/"/>
    
      <category term="Arcgis for js 4.6" scheme="https://mowatermelon.github.io/tags/Arcgis-for-js-4-6/"/>
    
      <category term="local-build" scheme="https://mowatermelon.github.io/tags/local-build/"/>
    
  </entry>
  
  <entry>
    <title>前端思考之DevOps</title>
    <link href="https://mowatermelon.github.io/2017/11/05/thinking-in-the-front-end-knowledge-devops/"/>
    <id>https://mowatermelon.github.io/2017/11/05/thinking-in-the-front-end-knowledge-devops/</id>
    <published>2017-11-04T16:00:00.000Z</published>
    <updated>2018-03-26T10:23:38.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前情概要，最近参加了一个关于DevOps的交流会，会上交流了很多，整理文档，确认思路</p></blockquote><a id="more"></a><h1 id="1-what"><a href="#1-what" class="headerlink" title="1 what"></a>1 what</h1><h2 id="1-1-history"><a href="#1-1-history" class="headerlink" title="1.1 history"></a>1.1 history</h2><p>DevOps运动的起源通常被放在2009年前后的欧洲，传统模式的运维之痛而生，伴随着许多运动的相辅相成和相互促进——效率研讨会运动，特别是由John Allspaw和Paul Hammond展示的开创性的<code>一天10次部署</code>，<code>基础设施即代码</code>运动(Mark Burgess 和Luke Kanies)，<code>敏捷基础设施运动</code>(Andrew Shafer)，<code>敏捷系统管理</code>运动(Patrick DeBois)，<code>精益创业</code>运动（Eric Ries），Jez Humble的持续集成和发布运动，以及Amazon的<code>平台即服务运动</code>等这些运动的相辅相成和相互促进而发展起来的。</p><p>DevOps早在2009年就有人提出来，但是，为什么近几年才开始受到越来越多的企业重视和实践呢？因为DevOps的发展是独木不成林的，现在有越来越多的技术支撑。微服务架构理念、容器技术使得DevOps的实施变得更加容易，计算能力提升和云环境的发展使得快速开发的产品可以立刻获得更广泛的使用。</p><h2 id="1-2-Agile-Manifesto"><a href="#1-2-Agile-Manifesto" class="headerlink" title="1.2 Agile Manifesto"></a>1.2 Agile Manifesto</h2><p><a href="http://agilemanifesto.org/iso/zhchs/manifesto.html">敏捷宣言</a>，也叫做<code>敏捷软件开发宣言</code>，正式宣布了对<code>四种核心价值</code>和<code>十二条原则</code>，可以指导迭代的以人为中心的软件开发方法。</p><blockquote><p>敏捷宣言强调的敏捷软件开发的四个核心价值是：</p></blockquote><p><code>个体和互动</code>高于流程和工具<br><code>工作的软件</code>高于详尽的文档<br><code>客户合作</code>高于合同谈判<br><code>响应变化</code>高于遵循计划</p><blockquote><p>敏捷选择提出的12条原则已经应用于管理大量的业务以及与IT相关项目中，包括商业智能（BI）。12原则包括：</p></blockquote><ul><li>通过早期和连续型的高价值工作交付满足“客户”。</li><li>大工作分成可以迅速完成的较小组成部门。</li><li>识别最好的工作是从自我组织的团队中出现的，</li><li>为积极员工提供他们需要的环境和支持，并相信他们可以完成工作。</li><li>创建可以改善可持续工作的流程。</li><li>维持完整工作的不变的步调。</li><li>欢迎改变的需求，即使是在项目后期。</li><li>在项目期间每天与项目团队和业务所有者开会。</li><li>在定期修正期，让团队反映如何能高效，然后进行相应地行为调整。</li><li>通过完成的工作量计量工作进度。</li><li>不断地追求完善。</li><li>利用调整获得竞争优势。</li></ul><h2 id="1-3-meaning"><a href="#1-3-meaning" class="headerlink" title="1.3 meaning"></a>1.3 meaning</h2><p>DevOps一词的来自于Development和Operations的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。</p><p>除了触及工具链之外，作为文化和技术的方法论，DevOps还需要公司在组织文化上的变革。回顾软件行业的研发模式，可以发现大致有三个阶段：瀑布式开发、敏捷开发、DevOps。</p><blockquote><p>无尽头的可能性</p></blockquote><p>DevOps涵盖了代码、部署目标的发布和反馈等环节，闭合成一个无限大符号形状的DevOps能力闭环。</p><p>DevOps包含流程和管理，运维和自动化，架构和服务，以及文化和组织等等概念。</p><p>简单地来说，就是更好的优化开发(DEV)、测试(QA)、运维(OPS)的流程，开发运维一体化，通过高度自动化工具与流程来使得软件构建、测试、发布更加快捷、频繁和可靠。</p><h1 id="2-why"><a href="#2-why" class="headerlink" title="2 why"></a>2 why</h1><h2 id="2-1-why-create"><a href="#2-1-why-create" class="headerlink" title="2.1 why create"></a>2.1 why create</h2><p>随着软件发布迭代的频率越来越高，传统的「瀑布型」（开发—测试—发布）模式已经不能满足快速交付的需求。2009 年左右 DevOps 应运而生，简单地来说，就是更好的优化开发(DEV)、测试(QA)、运维(OPS)的流程，开发运维一体化，通过高度自动化工具与流程来使得软件构建、测试、发布更加快捷、频繁和可靠。</p><p>DevOps是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系。不过需要澄清的一点是，从开发到运维，中间还有测试环节。DevOps其实包含了三个部分：开发、测试和运维。</p><p>换句话说，DevOps希望做到的是软件产品交付过程中IT工具链的打通，良好的闭环可以大大增加整体的产出使得各个团队减少时间损耗，更加高效地协同工作。</p><h2 id="2-2-why-good"><a href="#2-2-why-good" class="headerlink" title="2.2 why good"></a>2.2 why good</h2><ul><li><p>DevOps的一个巨大好处就是可以高效交付，这也正好是它的初衷。Puppet和DevOps Research and Assessment (DORA) 主办了2016年DevOps调查报告，根据全球4600位各IT公司的技术工作者的提交数据统计，得出高效公司平均每年可以完成1460次部署。</p></li><li><p>与低效组织相比，高效组织的部署频繁200倍，产品投入使用速度快2555倍，服务恢复速度快24倍。在工作内容的时间分配上，低效者要多花22%的时间用在为规划好或者重复工作上，而高效者却可以多花29%的时间用在新的工作上。所以这里的高效不仅仅指公司产出的效率提高，还指员工的工作质量得到提升。</p></li><li><p>DevOps另外一个好处就是会改善公司组织文化、提高员工的参与感。员工们变得更高效，也更有满足和成就感；调查显示高效员工的雇员净推荐值（eNPS:employee Net Promoter Score）更高，即对公司更加认同。</p></li><li><p>代码的提交直接触发：消除等待时间，快速反馈</p></li><li><p>每个变化对应一个交付管道：使问题定位和调试变得简单</p></li><li><p>全开发流程高效自动化：稳定，快速，交付结果可预测</p></li><li><p>持续进行自动化回归测试：提升交付质量</p></li><li><p>设施共享并按需提供：资源利用最大化</p></li></ul><blockquote><p>快速部署同时提高IT稳定性。这难道不矛盾吗？</p></blockquote><p>快速的部署其实可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的变化是比较小的，出现问题的偏差每次都不会太大，修复起来也会相对容易一些。</p><p>因此，认为速度就意味着危险是一种偏见。此外，滞后软件服务的发布也并不一定会完全地避免问题，在竞争日益激烈的IT行业，这反而可能错失了软件的发布时机。</p><h2 id="2-3-why-hot"><a href="#2-3-why-hot" class="headerlink" title="2.3 why hot"></a>2.3 why hot</h2><p>条件成熟：技术配套发展</p><p>技术的发展使得DevOps有了更多的配合。早期时，大家虽然意识到了这个问题的，但是苦于当时没有完善丰富的技术工具，是一种“理想很丰满，但是现实很骨感”的情况。DevOps的实现可以基于新兴的容器技术；也可以在自动化运维工具Puppet、SaltStack、Ansible之后的延伸；还可以构建在传统的Cloud Foundry、OpenShift等PaaS厂商之上。</p><blockquote><p>来自市场的外部需求：这世界变化太快</p></blockquote><p>IT行业已经越来越与市场的经济发展紧密挂钩，专家们认为IT将会有支持中心变成利润驱动中心。事实上，这个变化已经开始了，这不仅体现在Google、苹果这些大企业中，而且也发生在传统行业中，比如出租车业务中的Uber、酒店连锁行业中的Airbnb、图书经销商Amazon等等。能否让公司的IT配套方案及时跟上市场需求的步伐，在今天显得至关重要。</p><p>DevOps 2016年度报告给出了一个运维成本的计算公式：</p><p><strong>停机费用成本 = 部署频率 <em> 版本迭代失败概率 </em> 平均修复时间 * 断电的金钱损失</strong></p><blockquote><p>来自团队的内在动力：工程师也需要</p></blockquote><p>对于工程师而言，他们也是DevOps的受益者。微软资深工程师Scott Hanselman说过“对于开发者而言，最有力的工具就是自动化工具”（The most powerful tool we have as developers is automation）。</p><p>工具链的打通使得开发者们在交付软件时可以完成生产环境的构建、测试和运行；正如Amazon的VP兼CTO Werner Vogels那句让人印象深刻的话：“谁开发谁运行”。（You build it, you run it）</p><h1 id="3-who"><a href="#3-who" class="headerlink" title="3 who"></a>3 who</h1><p>DevOps正在增长，尤其是在大企业中：调查发现，DevOps的接受度有了显著提高。74%的受访者已经接受了DevOps，而去年这一比例为66%。目前，在81%的大企业开始接受DevOps，中小企业的接受度仅为70%。</p><p>那么具体而言都有些公司在采用DevOps呢？Adobe、Amazon、Apple、Airbnb、Ebay、Etsy、Facebook、LinkedIn、Netflix、NASA、Starbucks、Target（泛欧实时全额自动清算系统）、Walmart、Sony等等。</p><p>目前在国外，互联网巨头如Google、Facebook、Amazon、LinkedIn、Netflix、Airbnb，传统软件公司如Adobe、IBM、Microsoft、SAP等，亦或是网络业务非核心企业如苹果、沃尔玛、索尼影视娱乐、星巴克等都在采用DevOps或提供相关支持产品。</p><p>大企业主要是在自下而上接受DevOps，其中业务单位或部门（31%）以及项目和团队（29%）已经实施DevOps。不过，只有21%的大企业在整个公司范围内采用了DevOps。</p><h1 id="4-how"><a href="#4-how" class="headerlink" title="4 how"></a>4 how</h1><p>在工具层面上，DevOps工具的用量大幅激增。Chef和Puppet依然是最常用的DevOps工具，使用率均为32%。Docker是年增长率最快的工具，用量增长一倍以上。Ansible的用量也有显著增加，使用率从10%翻倍至20%。</p><p>并且调查还发现不到半数（43%）的公司在使用诸如Chef、Puppet、Ansible或Salt等配置工具；然而使用配置工具的公司更有可能同时使用多个工具。25%的受访者使用两种或更多配置工具，只使用一种工具的比例为18%。其中Chef和Puppet是最常用的组合：使用Chef的组织中有67%同时也使用Puppet，类似的，使用Puppet的组织中也有67%同时使用了Chef。</p><p>文中的统计数据来自于国外的DevOps调研报告。其中由Puppet发起的DevOps年度国际调查报告已经连续出版五年，先后收集了2.5万技术人员的答卷；2016年收集的有效答卷为4600份，不过仅有10%来自于亚洲。这样的采样率和采样数量并不可以充分地反映中国的DevOps行业现状。</p><h2 id="4-1-tools-demand"><a href="#4-1-tools-demand" class="headerlink" title="4.1 tools demand"></a>4.1 tools demand</h2><blockquote><p>工具上的准备</p></blockquote><p>工具链的打通，需要工具这块做好准备。现将工具类型及对应的不完全列举整理如下：</p><p>代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion</p><p>构建工具：Ant、Gradle、maven</p><p>自动部署：Capistrano、CodeDeploy</p><p>持续集成（CI）：Bamboo、Hudson、Jenkins</p><p>配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail</p><p>容器：Docker、LXC、第三方厂商如AWS</p><p>编排：Kubernetes、Core、Apache Mesos、DC/OS</p><p>服务注册与发现：Zookeeper、etcd、Consul</p><p>脚本语言：python、ruby、shell</p><p>日志管理：ELK、Logentries</p><p>系统监控：Datadog、Graphite、Icinga、Nagios</p><p>性能监控：AppDynamics、New Relic、Splunk</p><p>压力测试：JMeter、Blaze Meter、loader.io</p><p>预警：PagerDuty、pingdom、厂商自带如AWS SNS</p><p>HTTP加速器：Varnish</p><p>消息总线：ActiveMQ、SQS</p><p>应用服务器：Tomcat、JBoss</p><p>Web服务器：Apache、Nginx、IIS</p><p>数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库</p><p>项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker</p><p>在工具的选择上，需要结合公司业务需求和技术团队情况而定。（注：更多关于工具的详细介绍可以参见此文：51 Best DevOps Tools for #DevOps Engineers）</p><h2 id="4-2-soft-demand"><a href="#4-2-soft-demand" class="headerlink" title="4.2 soft demand"></a>4.2 soft demand</h2><blockquote><p>文化和人</p></blockquote><p>DevOps成功与否，公司组织是否利于协作是关键。开发人员和运维人员可以良好沟通互相学习，从而拥有高生产力。并且协作也存在于业务人员与开发人员之间。</p><p>出席了2016年伦敦企业级DevOps峰会的ITV公司在2012年就开始落地DevOps，其通用平台主管Clark在接受了InfoQ的采访，在谈及成功时表示，业务人员非常清楚他们希望在最小化可行产品中实现什么，工程师们就按需交付，不做多余工作。</p><p>这样，工程师们使用通用的平台（即打通的工具链）得到更好的一致性和更高的质量。此外，DevOps对工程师个人的要求也提高了，很多专家也认为招募到优秀的人才也是一个挑战。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前情概要，最近参加了一个关于DevOps的交流会，会上交流了很多，整理文档，确认思路&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/categories/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
    
      <category term="DevOps" scheme="https://mowatermelon.github.io/tags/DevOps/"/>
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>框架学习之Hexo_deploy失败</title>
    <link href="https://mowatermelon.github.io/2017/11/04/framework-learning-hexo-d-error/"/>
    <id>https://mowatermelon.github.io/2017/11/04/framework-learning-hexo-d-error/</id>
    <published>2017-11-04T06:29:17.000Z</published>
    <updated>2018-03-26T01:43:41.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司网络比较艰苦，那天写了一个文章，执行hexo g -d，正常生成了public文件，但是一直发布不成功，记录一下我解决的过程</p></blockquote><a id="more"></a><h1 id="1-问题产生操作步骤"><a href="#1-问题产生操作步骤" class="headerlink" title="1. 问题产生操作步骤"></a>1. 问题产生操作步骤</h1><ul><li><p>文章写完</p></li><li><p>执行<code>hexo s --watch</code></p></li><li><p>预览页面效果，修改部分细节</p></li><li><p>执行<code>hexo g -d</code></p></li><li><p>出现错误提示，提示</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delete mode 100644 placeholder</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> js/script.js.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</span><br><span class="line">bash: /xxx/xxx: No such device or address</span><br><span class="line">error: failed to execute prompt script (<span class="built_in">exit</span> code 1)</span><br><span class="line">fatal: could not <span class="built_in">read</span> Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: Invalid argument</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/do                                                        cs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: bash: /xxx/xxx: No such device or address</span></span><br><span class="line"><span class="string">error: failed to execute prompt script (exit code 1)</span></span><br><span class="line"><span class="string">fatal: could not read Username for '</span>https://github.com<span class="string">': Invalid argument</span></span><br></pre></td></tr></table></figure><h1 id="2-尝试解决过程"><a href="#2-尝试解决过程" class="headerlink" title="2. 尝试解决过程"></a>2. 尝试解决过程</h1><h2 id="2-1-尝试一"><a href="#2-1-尝试一" class="headerlink" title="2.1 尝试一"></a>2.1 尝试一</h2><ul><li><p>执行<code>hexo g</code>,<code>public</code>文件夹生成成功</p></li><li><p>执行<code>hexo d</code>，控制台出现错误提示和上文一样</p></li><li><p>卒</p></li></ul><h2 id="2-2-尝试二"><a href="#2-2-尝试二" class="headerlink" title="2.2 尝试二"></a>2.2 尝试二</h2><ul><li>修改项目根文件夹下的<code>_config.yml</code>文件，修改请求地址属性名，将<code>repository</code>修改为<code>repo</code>。</li></ul><blockquote><p>修改前</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/&#123;&#123;注册呢称&#125;&#125;/&#123;&#123;注册呢称&#125;&#125;.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>修改后</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/&#123;&#123;注册呢称&#125;&#125;/&#123;&#123;注册呢称&#125;&#125;.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li><p>执行<code>hexo g -d</code>，控制台出现错误提示和上文一样</p></li><li><p>卒</p></li></ul><h2 id="2-3-尝试三"><a href="#2-3-尝试三" class="headerlink" title="2.3 尝试三"></a>2.3 尝试三</h2><ul><li>修改项目根文件夹下的<code>_config.yml</code>文件，请求仓库链接方式，将原有的<code>http</code>请求链接修改为<code>SSH</code>请求模式。</li></ul><blockquote><p>修改前</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/&#123;&#123;注册呢称&#125;&#125;/&#123;&#123;注册呢称&#125;&#125;.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>修改后</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:&#123;&#123;注册呢称&#125;&#125;/&#123;&#123;注册呢称&#125;&#125;.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li>执行<code>hexo g -d</code>，出现错误提示。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line"></span><br><span class="line">FATA Something<span class="string">'s wrong.Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Error: Warning; Permanently added the RSA host key for IP address'</span>52.74.223.119<span class="string">' to the list of known hosts.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Permission denied (publickey).</span></span><br><span class="line"><span class="string">fatal: Could not read from remote repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please make sure you have the correct access rights</span></span><br><span class="line"><span class="string">and the repository exists.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  at ChildProcess.&lt;anonymous&gt; (x:\xx\xxxx\&#123;&#123;注册呢称&#125;&#125;.github.io\node_modules\hexo-util\lib\spawn.js:37:17)</span></span><br><span class="line"><span class="string">  at emitTwo (events.js:126:13)</span></span><br><span class="line"><span class="string">  st ChildProcess.emit (events.js:214:7)</span></span><br><span class="line"><span class="string">  at ChildProcess.cp.emit (x:\xx\xxxx\&#123;&#123;注册呢称&#125;&#125;.github.io\node_modules\cross-spawn\1ib\enoent.js:40:29)</span></span><br><span class="line"><span class="string">  at maybeclose (internal/child_process.js :925 :16)</span></span><br><span class="line"><span class="string">  at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5)</span></span><br></pre></td></tr></table></figure><ul><li>卒</li></ul><h2 id="2-4-尝试四"><a href="#2-4-尝试四" class="headerlink" title="2.4 尝试四"></a>2.4 尝试四</h2><ul><li><p>保存上文修改修改项目根文件夹下的<code>_config.yml</code>文件中<code>Deployment</code>请求为<code>SSH</code>请求模式</p></li><li><p>重新生成<code>SSH</code></p></li><li><p>在控制台执行<code>ssh-keygen-t rsa -C {你的邮箱地址}</code></p></li><li><p>会出现三次询问过程，一般就直接默认了</p></li><li><p>生成成功</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen-t rsa -C XXXX@XXXX.com</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/C/Users/Administrator/.ssh/id_rsa) :</span><br><span class="line">created directory<span class="string">'/C/Users/Administrator/ ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /C/Users/Administrator/.ssh/id_rsa.</span><br><span class="line">Your public key has</span><br><span class="line">been saved <span class="keyword">in</span> /C/Users/Administrator/ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:NF10yf+QE7HGu6S+j2Vz9PpN8dJ+uS/FVJ5qo XXXX@XXXX.com</span><br><span class="line"></span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+-----[RSA 2048]----+</span></span><br><span class="line"><span class="string">|             .o... |</span></span><br><span class="line"><span class="string">|          .  +o... |</span></span><br><span class="line"><span class="string">|         o .  .o++ |</span></span><br><span class="line"><span class="string">|        . .   .o.. |</span></span><br><span class="line"><span class="string">|         s    .oBo |</span></span><br><span class="line"><span class="string">|             o+o+* |</span></span><br><span class="line"><span class="string">|            ..o@+* |</span></span><br><span class="line"><span class="string">|            .oBoB= |</span></span><br><span class="line"><span class="string">|             EBO+. |</span></span><br><span class="line"><span class="string">+-----[SHA25 6]-----+</span></span><br></pre></td></tr></table></figure><ul><li><p>访问上文的公钥地址<code>c/Users/Administrator/.ssh/id_rsa</code></p></li><li><p>复制<code>id_rsa.pub</code>文件中内容。</p></li><li><p>访问<code>https://github.com/settings/keys</code>，选择<code>New SSH Key</code>按钮</p></li><li><p>在<code>SSH keys / Add new</code>中，主要需要填写两个内容，一个是将要新建的<code>SSH</code>的<code>title</code>，相当于这个<code>SSH</code>的<code>alias</code>，用于区分不同<code>SSH</code>；一个是需要填写的<code>SSH Key</code>内容。</p></li><li><p><code>SSH Key</code>输入框中会有默认提示，<code>Begins with &#39;ssh-rsa&#39;, &#39;ssh-dss&#39;, &#39;ssh-ed25519&#39;, &#39;ecdsa-sha2-nistp256&#39;, &#39;ecdsa-sha2-nistp384&#39;, or &#39;ecdsa-sha2-nistp521&#39;</code>，即这个<code>SSH Key</code>必须要以<code>ssh-rsa</code>, <code>ssh-dss</code>, <code>ssh-ed25519</code>, <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, 或者 <code>ecdsa-sha2-nistp521</code>。</p></li><li><p>将从<code>id_rsa.pub</code>文件中复制的内容，粘贴到<code>SSH Key</code>输入框。</p></li><li><p>选择<code>Add SSH key</code>按钮</p></li><li><p><code>github</code>新建<code>SSH key</code>完成</p></li><li><p>在本地编辑器中添加全局用户设置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &#123;你的全局呢称&#125;</span><br><span class="line">$ git config --global user.email &#123;你的全局邮箱地址&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个栗子</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.name <span class="string">"mowatermelon"</span></span><br><span class="line">$ git config --global user.email <span class="string">"neefoxmo@gmail.com"</span></span><br></pre></td></tr></table></figure><ul><li>在本地编辑器控制台中进行验证<code>SSH</code>是否添加成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxxx! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># xxxx应该与你在上一步设置的`user.name`一致</span></span><br></pre></td></tr></table></figure><ul><li>在<code>blog</code>所在项目根文件夹，执行<code>hexo g -d</code>，执行一切顺利。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Deploy <span class="keyword">done</span>:git</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><ul><li>感觉在远程仓库这块，网络是个很大因素，决定你是否能够成功访问，和成功发布。</li><li>之前用http请求没感觉，现在网络不太好，就很明显了。</li><li>http记得是基于TCP面向连接的，要求服务器可以保持持续连接状态</li><li>面向连接的请求，保证了数据的安全性，但是对于网络条件要求更高</li><li>但是这边SSH链接请求，似乎对网络条件要求低一些。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近公司网络比较艰苦，那天写了一个文章，执行hexo g -d，正常生成了public文件，但是一直发布不成功，记录一下我解决的过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="框架学习" scheme="https://mowatermelon.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="node" scheme="https://mowatermelon.github.io/tags/node/"/>
    
      <category term="hexo" scheme="https://mowatermelon.github.io/tags/hexo/"/>
    
      <category term="vscode" scheme="https://mowatermelon.github.io/tags/vscode/"/>
    
      <category term="hexo d" scheme="https://mowatermelon.github.io/tags/hexo-d/"/>
    
  </entry>
  
  <entry>
    <title>西瓜有话说之Python小白之路</title>
    <link href="https://mowatermelon.github.io/2017/11/03/python-learning-base/"/>
    <id>https://mowatermelon.github.io/2017/11/03/python-learning-base/</id>
    <published>2017-11-02T16:00:00.000Z</published>
    <updated>2018-02-24T04:06:29.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很早就被安利过Python这个优雅的语言，由于各种原因（并不是因为拖延症，坚定的眼神.jpg），都没有学习过，主要是基于Python3.6.4做了一下整理，记录一下学习心得。</p></blockquote><h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><a id="more"></a><h2 id="1-1-Python的定义"><a href="#1-1-Python的定义" class="headerlink" title="1.1 Python的定义"></a>1.1 Python的定义</h2><p><code>Python</code>是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p><p><code>Python</code>的这个名字来自于 <code>BBC</code> 的 <code>Monty Python’s Flying Cirecus</code> 节目，和爬行类动物没有任何关系。</p><p><code>龟叔</code>给<code>Python</code>的定位是<code>优雅</code>、<code>明确</code>、<code>简单</code>，所以<code>Python</code>程序看上去总是简单易懂，初学者学<code>Python</code>，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。</p><p><code>Python</code>的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。</p><p><code>Python</code> 允许你将程序分割为不同的模块，以便在其他的 <code>Python</code> 程序中重用。<code>Python</code> 内置提供了大量的标准模块，你可以将其用作程序的基础，或者作为学习 <code>Python</code> 编程的示例。这些模块提供了诸如文件 <code>I/O</code>、系统调用、<code>Socket</code> 支持，甚至类似 <code>Tk</code> 的用户图形界面（GUI）工具包接口。</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">可读性强</td><td style="text-align:left">相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</td></tr><tr><td style="text-align:left">解释型语言</td><td style="text-align:left">这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言，因为无需编译和链接，你可以在程序开发中节省宝贵的时间。Python 解释器可以交互的使用，这使得试验语言的特性、编写临时程序或在自底向上的程序开发中测试方法非常容易。</td></tr><tr><td style="text-align:left">交互式语言</td><td style="text-align:left">这意味着，你可以在一个Python提示符，直接互动执行写你的程序。</td></tr><tr><td style="text-align:left">面向对象语言</td><td style="text-align:left">这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</td></tr><tr><td style="text-align:left">初学者的语言</td><td style="text-align:left">Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</td></tr><tr><td style="text-align:left">优雅的语言</td><td style="text-align:left">Python 让程序编写的紧凑和可读。用 Python 编写的程序通常比同样的 C、C++ 或 Java 程序更短小。</td></tr></tbody></table><blockquote><p>内置电池和外置扩展</p></blockquote><p><code>Python</code>就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作<code>内置电池（batteries included）</code>。用<code>Python</code>开发，许多功能不必从零编写，直接使用现成的即可。</p><p>除了内置的库外，<code>Python</code>还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p><blockquote><p>开发效率更高</p></blockquote><p>当你用一种语言开始作真正的软件开发时，你除了编写代码外，还需要很多基本的已经写好的现成的东西，来帮助你加快开发进度。</p><p>比如说，要编写一个电子邮件客户端，如果先从最底层开始编写网络协议相关的代码，那估计一年半载也开发不出来。高级编程语言通常都会提供一个比较完善的基础代码库，让你能直接调用。</p><p>比如，针对电子邮件协议的<code>SMTP</code>库，针对桌面环境的<code>GUI</code>库，在这些已有的代码库的基础上开发，一个电子邮件客户端几天就能开发出来。</p><p>许多大型网站就是用<code>Python</code>开发的，例如<code>YouTube</code>、<code>Instagram</code>，还有国内的豆瓣。很多大公司，包括<code>Google</code>、<code>Yahoo</code>等，甚至<code>NASA</code>（美国航空航天局）都大量地使用<code>Python</code>。</p><h2 id="1-2-Python发展历史"><a href="#1-2-Python发展历史" class="headerlink" title="1.2 Python发展历史"></a>1.2 Python发展历史</h2><p><code>Python</code>是由<code>Guido van Rossum(龟叔)</code>在<code>1989</code>年圣诞节期间，为了打发无聊的圣诞节，在荷兰国家数学和计算机科学研究所设计出来的。</p><p><code>Python</code> 本身也是由诸多其他语言发展而来的,这包括 <code>ABC</code>、<code>Modula-3</code>、<code>C</code>、<code>C++</code>、<code>Algol-68</code>、<code>SmallTalk</code>、<code>Unix shell</code> 和其他的脚本语言等等。</p><p>像<code>Perl</code>语言一样, <code>Python</code>源代码同样遵循 <code>GPL(GNU General Public License)</code>协议。</p><p>现在<code>Python</code>是由一个核心开发团队在维护，<code>Guido van Rossum</code> 仍然占据着至关重要的作用，指导其进展。</p><p>现在，全世界差不多有600多种编程语言，但流行的编程语言也就那么20来种。根据<code>TIOBE</code>排行榜，总的来说，其他编程语言各有千秋，但是<code>Python</code>的使用率一直在稳定上涨。</p><h2 id="1-3-Python的优点"><a href="#1-3-Python的优点" class="headerlink" title="1.3 Python的优点"></a>1.3 Python的优点</h2><blockquote><p>易于学习</p></blockquote><p><code>Python</code>有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p><blockquote><p>易于阅读</p></blockquote><p><code>Python</code>代码定义的更清晰。</p><blockquote><p>易于维护</p></blockquote><p><code>Python</code>的成功在于它的源代码是相当容易维护的。</p><blockquote><p>一个广泛的标准库</p></blockquote><p><code>Python</code>的最大的优势之一是丰富的库，跨平台的，在<code>UNIX</code>，<code>Windows</code>和<code>Macintosh</code>兼容很好。</p><blockquote><p>互动模式</p></blockquote><p>互动模式的支持，您可以从终端输入并获得结果的语言，互动的测试和调试代码片断。</p><blockquote><p>便携式</p></blockquote><p><code>Python</code>可以运行在多种硬件平台和所有平台上都具有相同的接口。</p><blockquote><p>可扩展</p></blockquote><p>可以添加低层次的模块到<code>Python</code>解释器。这些模块使程序员可以添加或定制自己的工具，更有效。</p><blockquote><p>数据库</p></blockquote><p><code>Python</code>提供所有主要的商业数据库的接口。</p><blockquote><p>GUI编程</p></blockquote><p><code>Python</code>支持<code>GUI</code>可以创建和移植到许多系统调用。</p><blockquote><p>可扩展性</p></blockquote><p>相比 <code>shell</code> 脚本，<code>Python</code> 提供了一个更好的结构，且支持大型程序。</p><h2 id="1-4-Python的缺点"><a href="#1-4-Python的缺点" class="headerlink" title="1.4 Python的缺点"></a>1.4 Python的缺点</h2><blockquote><p>运行速度慢</p></blockquote><p>和<code>C</code>相比非常慢，因为<code>Python</code>是解释型语言，你的代码在执行时会一行一行地翻译成<code>CPU</code>能理解的<code>机器码</code>，这个翻译过程非常耗时，所以很慢。而<code>C</code>是运行前直接编译成<code>CPU</code>能执行的<code>机器码</code>，所以非常快。</p><p>但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载<code>MP3</code>的网络应用程序，<code>C</code>的运行时间需要0.001秒，而<code>Python</code>程序的运行时间需要0.1秒，慢了100倍。</p><p>但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。</p><p><code>C</code>是可以用来编写操作系统的贴近硬件的语言，所以，<code>C</code>适合开发那些追求运行速度、充分发挥硬件性能的程序。而<code>Python</code>是用来编写应用程序的高级编程语言。</p><blockquote><p>代码不能加密。</p></blockquote><p>如果要发布你的<code>Python</code>程序，实际上就是发布<code>源代码</code>，这一点跟<code>C</code>不同，<code>C</code>不用发布源代码，只需要把编译后的<code>机器码</code>（也就是你在Windows上常见的xxx.exe文件）发布出去。</p><p>要从<code>机器码</code>反推出<code>C</code>代码是不可能的，所以，凡是<code>编译型</code>的语言，都没有这个问题，而<code>解释型</code>的语言，则必须把源码发布出去。</p><p>这个缺点仅限于你要编写的软件需要卖给别人挣钱的时候。好消息是目前的互联网时代，靠卖软件授权的商业模式越来越少了，靠网站和移动应用卖服务的模式越来越多了，后一种模式不需要把源码给别人。</p><h2 id="1-5-适合Python开发的应用"><a href="#1-5-适合Python开发的应用" class="headerlink" title="1.5 适合Python开发的应用"></a>1.5 适合Python开发的应用</h2><ul><li><p>首选是网络应用，包括网站、后台服务等等</p></li><li><p>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</p></li><li><p>另外就是把其他语言开发的程序再包装起来，方便使用。</p></li></ul><h2 id="1-6-安装Python"><a href="#1-6-安装Python" class="headerlink" title="1.6 安装Python"></a>1.6 安装Python</h2><blockquote><p>Unix &amp; Linux</p></blockquote><ul><li><p>打开WEB浏览器访问<a href="http://www.python.org/download/">http://www.python.org/download/</a></p></li><li><p>选择适用于<code>Unix/Linux</code>的源码压缩包。</p></li><li><p>下载及解压压缩包。</p></li><li><p>如果你需要自定义一些选项修改<code>Modules/Setup</code></p></li><li><p>执行 <code>./configure</code> 脚本</p></li><li><p><code>make</code></p></li><li><p><code>make install</code></p></li></ul><p>执行以上操作后，<code>Python</code>会安装在 <code>/usr/local/bin</code> 目录中，<code>Python</code>库安装在<code>/usr/local/lib/pythonXX</code>，<code>XX</code>为你使用的<code>Python</code>的版本号。</p><blockquote><p>Window</p></blockquote><ul><li><p>打开WEB浏览器访问<a href="http://www.python.org/download/">http://www.python.org/download/</a></p></li><li><p>在下载列表中选择<code>Window</code>平台安装包，包格式为：<code>python-XYZ.msi</code> 文件 ， <code>XYZ</code> 为你要安装的版本号。</p></li><li><p>下载后，双击下载包，进入<code>Python</code>安装向导，安装非常简单，除了注意选择配置<code>Python</code>到环境变量中，其他只需要使用默认的设置一直点击<code>下一步</code>直到安装完成即可。</p></li></ul><blockquote><p>MAC</p></blockquote><p>最近的<code>MAC</code>系统都自带有<code>Python</code>环境，但是自带的<code>Python</code>版本为旧版本，你可以通过链接<a href="http://www.python.org/download/mac/">http://www.python.org/download/mac/</a> 查看<code>MAC</code>上<code>Python</code>的新版功能介绍。</p><p><code>MAC</code>上完整的<code>Python</code>安装教程你可以查看：<a href="http://homepages.cwi.nl/~jack/macpython/http://www.shouce.ren/api/view/a/7505">http://homepages.cwi.nl/~jack/macpython/http://www.shouce.ren/api/view/a/7505</a></p><blockquote><p>环境变量概念</p></blockquote><p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p><p><code>path(路径)</code>存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p><p><code>Unix</code>或<code>Windows</code>中路径变量为<code>PATH</code>（<code>UNIX</code>区分大小写，<code>Windows</code>不区分大小写）。</p><p><code>在Mac OS</code>中，安装程序过程中改变了<code>python</code>的安装路径。如果你需要在其他目录引用<code>Python</code>，你必须在<code>path</code>中添加<code>Python</code>目录。</p><p>下面几个重要的环境变量，它应用于<code>Python</code>情况。</p><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">PYTHONPATH</td><td style="text-align:left">PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td></tr><tr><td style="text-align:left">PYTHONSTARTUP</td><td style="text-align:left">Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此文件中变量指定的执行代码。</td></tr><tr><td style="text-align:left">PYTHONCASEOK</td><td style="text-align:left">加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td></tr><tr><td style="text-align:left">PYTHONHOME</td><td style="text-align:left">另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td></tr></tbody></table><blockquote><p>手动设置环境变量</p></blockquote><ul><li>在 Unix/Linux 设置环境变量,注意: <code>/usr/local/bin/python</code>代指<code>Python</code>的实际安装目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在 csh shell: 输入</span></span><br><span class="line">setenv PATH <span class="string">"<span class="variable">$PATH</span>:/usr/local/bin/python"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在 bash shell (Linux): 输入</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/usr/local/bin/python"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在 sh 或者 ksh shell: 输入</span></span><br><span class="line">PATH=<span class="string">"<span class="variable">$PATH</span>:/usr/local/bin/python"</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>Windows</code> 设置环境变量,在环境变量中添加<code>Python</code>目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在命令提示框中(cmd) : 输入</span></span><br><span class="line">path %path%;C:\Python</span><br></pre></td></tr></table></figure><p>注意: <code>C:\Python</code>代指<code>Python</code>的实际安装目录。</p><h2 id="1-7-Python解释器"><a href="#1-7-Python解释器" class="headerlink" title="1.7 Python解释器"></a>1.7 Python解释器</h2><p>当我们编写<code>Python</code>代码时，我们得到的是一个包含<code>Python</code>代码的以<code>.py</code>为扩展名的文本文件。要运行代码，就需要<code>Python</code>解释器去执行.py文件。</p><p>由于整个<code>Python</code>语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写<code>Python</code>解释器来执行<code>Python</code>代码（当然难度很大）。事实上，确实存在多种<code>Python</code>解释器。</p><blockquote><p>IDLE</p></blockquote><p>当我们从<code>Python</code>官方网站下载并安装好<code>Python 3.6</code>后，我们就直接获得了一个官方版本的解释器：<code>IDLE</code>。</p><blockquote><p>IPython</p></blockquote><p><code>IPython</code>是基于<code>IDLE</code>之上的一个交互式解释器，也就是说，<code>IPython</code>只是在交互方式上有所增强，但是执行<code>Python</code>代码的功能和<code>IDLE</code>是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。</p><p><code>IDLE</code>用<code>&gt;&gt;&gt;</code>作为提示符，而<code>IPython</code>用<code>In [序号]:</code>作为提示符。</p><blockquote><p>PyPy</p></blockquote><p><code>PyPy</code>是另一个<code>Python</code>解释器，它的目标是执行速度。<code>PyPy</code>采用<code>JIT</code>技术，对<code>Python</code>代码进行动态编译（注意不是解释），所以可以显著提高<code>Python</code>代码的执行速度。</p><p>绝大部分<code>Python</code>代码都可以在<code>PyPy</code>下运行，但是<code>PyPy</code>和<code>IDLE</code>有一些是不同的，这就导致相同的<code>Python</code>代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到<code>PyPy</code>下执行，就需要了解<code>PyPy</code>和<code>IDLE</code>的不同点。</p><blockquote><p>Jython</p></blockquote><p><code>Jython</code>是运行在<code>Java</code>平台上的<code>Python</code>解释器，可以直接把<code>Python</code>代码编译成<code>Java字节码</code>执行。</p><blockquote><p>IronPython</p></blockquote><p><code>IronPython</code>和<code>Jython</code>类似，只不过<code>IronPython</code>是运行在<code>微软.Net</code>平台上的<code>Python</code>解释器，可以直接把<code>Python</code>代码编译成<code>.Net</code>的字节码。</p><blockquote><p>小结</p></blockquote><p><code>Python</code>的解释器很多，但使用最广泛的还是<code>IDLE</code>。如果要和<code>Java</code>或<code>.Net</code>平台交互，最好的办法不是用<code>Jython</code>或<code>IronPython</code>，而是通过网络调用来交互，确保各程序之间的独立性。</p><h2 id="1-8-编码规范建议"><a href="#1-8-编码规范建议" class="headerlink" title="1.8 编码规范建议"></a>1.8 编码规范建议</h2><ul><li><p>使用 <code>4 空格</code>缩进，而非 <code>TAB</code>，在小缩进（可以嵌套更深）和大缩进（更易读）之间，<code>4空格</code>是一个很好的折中。<code>TAB</code> 引发了一些混乱，最好弃用。</p></li><li><p>折行以确保其不会超过 79 个字符。这有助于小显示器用户阅读，也可以让大显示器能并排显示几个代码文件。</p></li><li><p>使用空行分隔函数和类，以及函数中的大块代码。</p></li><li><p>可能的话，注释独占一行。</p></li><li><p>使用文档字符串。</p></li><li><p>把空格放到操作符两边，以及逗号后面，但是括号里侧不加空格：<code>a = f(1, 2) + g(3, 4)</code>。</p></li><li><p>统一函数和类命名。</p></li><li><p>推荐类名用 驼峰命名， 函数和方法名用 小写<code>_</code>和<code>_</code>下划线。总是用 <code>self</code>作为方法的第一个参数（关于类和方法的知识详见 初识类 ）。</p></li><li><p>不要使用花哨的编码，如果你的代码的目的是要在国际化环境。<code>Python</code> 的默认情况下，<code>UTF-8</code>，甚至普通的 <code>ASCII</code> 总是工作的最好。</p></li><li><p>同样，也不要使用非 <code>ASCII</code> 字符的标识符，除非是不同语种的会阅读或者维护代码。</p></li></ul><h1 id="第二章-基础"><a href="#第二章-基础" class="headerlink" title="第二章 基础"></a>第二章 基础</h1><h2 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h2><h3 id="2-1-1-单行注释"><a href="#2-1-1-单行注释" class="headerlink" title="2.1.1 单行注释"></a>2.1.1 单行注释</h3><p><code>Python</code>中的注释有单行注释和多行注释：</p><p><code>Python</code>中单行注释以<code>#</code>开头，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line">print(<span class="string">"Hello, watermelon!"</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-2-多行注释"><a href="#2-1-2-多行注释" class="headerlink" title="2.1.2 多行注释"></a>2.1.2 多行注释</h3><blockquote><p>单引号（’’’）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个单引号</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">"Hello, watermelon!"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>双引号（”””）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个双引号</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">"Hello, watermelon!"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-2-输出语句"><a href="#2-2-输出语句" class="headerlink" title="2.2 输出语句"></a>2.2 输出语句</h2><h3 id="2-2-1-基础"><a href="#2-2-1-基础" class="headerlink" title="2.2.1 基础"></a>2.2.1 基础</h3><blockquote><p>print(value, …, sep=’ ‘, end=’\n’, file=sys.stdout, flush=False)</p></blockquote><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">原始定义</th><th style="text-align:left">个人描述</th><th style="text-align:left">是否有默认值</th></tr></thead><tbody><tr><td style="text-align:left">value, …</td><td style="text-align:left">the values to a stream</td><td style="text-align:left">一组需要输出的内容序列，可以为空</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">sep</td><td style="text-align:left">string inserted between values, default a space.</td><td style="text-align:left">每个value之间的默认间隔内容</td><td style="text-align:left">有，默认是一个空格</td></tr><tr><td style="text-align:left">end</td><td style="text-align:left">string appended after the last value, default a newline.</td><td style="text-align:left">输出完成之后，以什么内容结尾</td><td style="text-align:left">有，默认是一个换行符</td></tr><tr><td style="text-align:left">file</td><td style="text-align:left">a file-like object (stream); defaults to the current sys.stdout.</td><td style="text-align:left">定义流输出的文件，必须要是一个文件流对象</td><td style="text-align:left">有，默认是标准的系统输出sys.stdout</td></tr><tr><td style="text-align:left">flush</td><td style="text-align:left">whether to forcibly flush the stream.</td><td style="text-align:left">是否立即把内容输出到流文件，不作缓存。</td><td style="text-align:left">有，默认是False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个参数都不传</span></span><br><span class="line">print() <span class="comment"># ''  不会报错，输出一个空值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只传入一个value值</span></span><br><span class="line">print(<span class="string">"欢迎来到西瓜的世界"</span>) <span class="comment"># 欢迎来到西瓜的世界</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2进制转为10进制</span></span><br><span class="line">print(<span class="number">0b1001</span>) <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8进制转为10进制</span></span><br><span class="line">print(<span class="number">0o12</span>) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#16进制到10进制</span></span><br><span class="line">print(<span class="number">0xab</span>) <span class="comment"># 171</span></span><br><span class="line"></span><br><span class="line">print([&#123;name:melon,age:<span class="number">1</span>&#125;,&#123;name:water,age:<span class="number">2</span>&#125;]) <span class="comment"># [&#123;name:melon,age:1&#125;,&#123;name:water,age:2&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入多个value值</span></span><br><span class="line">print(<span class="string">"hello"</span>,<span class="string">"watermelon"</span>,<span class="string">"!"</span>) <span class="comment"># hello watermelon !</span></span><br><span class="line"><span class="comment"># 传入多个不同数据类型的value值</span></span><br><span class="line">print(<span class="string">"hello"</span>,<span class="number">1</span>,<span class="string">"watermelon"</span>,[<span class="number">1.2</span>],<span class="string">"!"</span>) <span class="comment"># hello 1 watermelon [1.2] !</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入的value需要计算</span></span><br><span class="line">print(<span class="string">'100 + 200 ='</span>, <span class="number">100</span> + <span class="number">200</span>) <span class="comment"># 100 + 200 = 300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多个value值之间间隔内容</span></span><br><span class="line">print(<span class="string">"hello"</span>,<span class="string">"watermelon"</span>,<span class="string">"!"</span>,sep=<span class="string">'/'</span>) <span class="comment"># hello/watermelon/!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多个value值的结尾内容</span></span><br><span class="line">print(<span class="string">"hello"</span>,<span class="string">"watermelon"</span>,<span class="string">"!"</span>,end=<span class="string">'/'</span>) <span class="comment"># hello watermelon !/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多个value值的输出对象</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'chapter_1\abc.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> demo:</span><br><span class="line">    print(<span class="string">'hello","watermelon'</span>, file = demo) <span class="comment"># hello watermelon</span></span><br><span class="line"><span class="comment"># 这样就会在项目所在根文件夹下的chapter_1/abc.txt中，看到输出内容</span></span><br><span class="line"><span class="comment"># 这个文本内容就是需要打印出来的内容，可以重复写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多个value值到流文件的时候，立即把内容输出到流文件，不作缓存。</span></span><br><span class="line">print(<span class="string">"hello"</span>,<span class="string">"watermelon"</span>,<span class="string">"!"</span>,flush=<span class="keyword">True</span>) <span class="comment"># hello watermelon !</span></span><br><span class="line"><span class="comment"># 目前没有看到什么效果</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-格式化输出"><a href="#2-2-2-格式化输出" class="headerlink" title="2.2.2 格式化输出"></a>2.2.2 格式化输出</h3><blockquote><p>基本概念</p></blockquote><p>操作符<code>%</code>也可以用于字符串格式化。它以类似<code>sprintf()-style</code>的方式解析左参数，将右参数应用于此，得到格式化操作生成的字符串。</p><table><thead><tr><th style="text-align:left">类型简写</th><th style="text-align:left">完整单词</th><th style="text-align:left">中文含义</th></tr></thead><tbody><tr><td style="text-align:left">s</td><td style="text-align:left">string</td><td style="text-align:left">字符串</td></tr><tr><td style="text-align:left">x or X</td><td style="text-align:left">hexadecimal</td><td style="text-align:left">十六进制</td></tr><tr><td style="text-align:left">d</td><td style="text-align:left">decimal</td><td style="text-align:left">十进制</td></tr><tr><td style="text-align:left">o</td><td style="text-align:left">octal</td><td style="text-align:left">八进制</td></tr><tr><td style="text-align:left">f or F</td><td style="text-align:left">float</td><td style="text-align:left">浮点型</td></tr></tbody></table><blockquote><p>基础使用案例</p></blockquote><p>基础使用就是在左参数传入一个<code>%</code>加一个<code>数据类型</code>，右参数通过一个<code>%</code>加一个<code>空格</code>加上一个<code>参数值</code>，或者右参数传入一个<code>%</code>加一个<code>空格</code>加上<code>括号</code>加上<code>参数列表</code>，<code>参数列表</code>中每个<code>参数值</code>以<code>英文逗号</code>做间隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"%s"</span> % <span class="string">"Hello Watermelon"</span>) <span class="comment"># Hello Watermelon</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"%s"</span> % (<span class="string">"Hello Watermelon"</span>)) <span class="comment"># Hello Watermelon</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'浮点的300.50转成10进制的%d'</span> % <span class="number">300.50</span>)<span class="comment"># 浮点的300.50转成10进制的300</span></span><br><span class="line">print(<span class="string">'浮点的300.50转成10进制的%d'</span> % (<span class="number">300.50</span>))<span class="comment"># 浮点的300.50转成10进制的300</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'2进制的0b1001转成8进制的%o'</span> % <span class="number">0b1001</span>)<span class="comment"># 2进制的0b1001转成8进制的11</span></span><br><span class="line">print(<span class="string">'2进制的0b1001转成8进制的%o'</span> % (<span class="number">0b1001</span>))<span class="comment"># 2进制的0b1001转成8进制的11</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'8进制的0o10转成16进制的%x'</span> % <span class="number">0o10</span>) <span class="comment"># 8进制的0o10转成16进制的8</span></span><br><span class="line">print(<span class="string">'8进制的0o10转成16进制的%x'</span> % (<span class="number">0o10</span>)) <span class="comment"># 8进制的0o10转成16进制的8</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'10进制的10转成浮点型的%f'</span> % <span class="number">10</span>) <span class="comment"># 10进制的10转成浮点型的10.000000</span></span><br><span class="line">print(<span class="string">'10进制的10转成浮点型的%f'</span> % (<span class="number">10</span>)) <span class="comment"># 10进制的10转成浮点型的10.000000</span></span><br><span class="line">print(<span class="string">'10进制的%d转成浮点型的%f'</span> % (<span class="number">10</span>,<span class="number">10</span>)) <span class="comment"># 10进制的10转成浮点型的10.000000</span></span><br></pre></td></tr></table></figure><blockquote><p>使用小技巧</p></blockquote><ul><li>左参数的数据类型前面可以加上数字，限制打印的数字或者文本长度。</li><li>右参数加上括号，可以传入多个参数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"%.*s"</span> % (<span class="number">4</span>,<span class="string">"Hello Watermelon"</span>)) <span class="comment"># Hell</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"%.3s "</span> % (<span class="string">"Hello Watermelon"</span>)) <span class="comment"># Hel</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'10进制的10转成浮点型的%.3f'</span> % <span class="number">10</span>) <span class="comment"># 10进制的10转成浮点型的10.000</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"%s,%s %s"</span> % (<span class="string">"Hello"</span>,<span class="string">"Watermelon"</span>,<span class="string">"!"</span>)) <span class="comment"># Hello,Watermelon !</span></span><br></pre></td></tr></table></figure><blockquote><p>请注意</p></blockquote><ul><li>请注意<code>左参数</code>和<code>右参数</code>之间不存在逗号，如果写了逗号，会报错。</li><li><code>八进制类型</code>，<code>十进制类型</code>和<code>字符串类型</code>的缩写必须是<code>小写字母</code>，换成<code>大写字母</code>会报错。</li><li>做<code>类型转换</code>的时候，<code>浮点类型</code>和<code>十进制类型</code>需要传入的参数必要是<code>数字类型</code>的。</li><li>做<code>类型转换</code>的时候，<code>十六进制类型</code>和<code>八进制类型</code>需要传入的参数必要是<code>整型</code>。</li><li><code>左参数</code>的<code>个数</code>和<code>右参数</code>的<code>个数</code>一定要相等。</li><li>虽然大量 <code>Python</code> 代码还在使用 <code>%</code> 操作符，但是旧式的格式化方法最终将从语言中去掉，应该尽量使用<code>str.format()</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># print("%s,%s", % ("hello","watermelon"))</span></span><br><span class="line"><span class="comment"># SyntaxError: invalid syntax</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%O " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#15&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%O " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">ValueError: unsupported format character 'O' (0x4f) at index 1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%D " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#13&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%D " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">ValueError: unsupported format character 'D' (0x44) at index 1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%S " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#14&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%S " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">ValueError: unsupported format character 'S' (0x53) at index 1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%d " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#18&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%d " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">TypeError: %d format: a number is required, not str</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%F " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#19&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%F " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">TypeError: must be real number, not str</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%X " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#11&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%X " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">TypeError: %X format: an integer is required, not str</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%o " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#16&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%o " % ("Hello Watermelon"))</span></span><br><span class="line"><span class="string">TypeError: %o format: an integer is required, not str</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print ("%s,%s" % ("Hello","Watermelon","!"))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;pyshell#29&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print ("%s,%s" % ("Hello","Watermelon","!"))</span></span><br><span class="line"><span class="string">TypeError: not all arguments converted during string formatting</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'&#123;0&#125; and &#123;1&#125;'</span>.format(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)) <span class="comment"># spam and eggs</span></span><br></pre></td></tr></table></figure><h2 id="2-3-输入语句"><a href="#2-3-输入语句" class="headerlink" title="2.3 输入语句"></a>2.3 输入语句</h2><h2 id="2-4-Numbers（数字）"><a href="#2-4-Numbers（数字）" class="headerlink" title="2.4 Numbers（数字）"></a>2.4 Numbers（数字）</h2><h2 id="2-5-String（字符串）"><a href="#2-5-String（字符串）" class="headerlink" title="2.5 String（字符串）"></a>2.5 String（字符串）</h2><h2 id="2-6-List（列表）"><a href="#2-6-List（列表）" class="headerlink" title="2.6 List（列表）"></a>2.6 List（列表）</h2><h2 id="2-7-Tuple（元组）"><a href="#2-7-Tuple（元组）" class="headerlink" title="2.7 Tuple（元组）"></a>2.7 Tuple（元组）</h2><h2 id="2-8-Sets（集合）"><a href="#2-8-Sets（集合）" class="headerlink" title="2.8 Sets（集合）"></a>2.8 Sets（集合）</h2><h2 id="2-9-Dictionaries（字典）"><a href="#2-9-Dictionaries（字典）" class="headerlink" title="2.9 Dictionaries（字典）"></a>2.9 Dictionaries（字典）</h2><h3 id="2-9-1-基础"><a href="#2-9-1-基础" class="headerlink" title="2.9.1 基础"></a>2.9.1 基础</h3><h3 id="2-9-2-切片"><a href="#2-9-2-切片" class="headerlink" title="2.9.2 切片"></a>2.9.2 切片</h3><h2 id="2-10-变量"><a href="#2-10-变量" class="headerlink" title="2.10 变量"></a>2.10 变量</h2><h2 id="2-11-isinstance"><a href="#2-11-isinstance" class="headerlink" title="2.11 isinstance"></a>2.11 isinstance</h2><h2 id="2-12-字符串和编码"><a href="#2-12-字符串和编码" class="headerlink" title="2.12 字符串和编码"></a>2.12 字符串和编码</h2><h2 id="2-13-正则"><a href="#2-13-正则" class="headerlink" title="2.13 正则"></a>2.13 正则</h2><h2 id="2-14-range-函数"><a href="#2-14-range-函数" class="headerlink" title="2.14 range 函数"></a>2.14 range 函数</h2><h2 id="2-15-迭代器"><a href="#2-15-迭代器" class="headerlink" title="2.15 迭代器"></a>2.15 迭代器</h2><h1 id="第三章-基础语句"><a href="#第三章-基础语句" class="headerlink" title="第三章 基础语句"></a>第三章 基础语句</h1><h2 id="3-1-pass-语句"><a href="#3-1-pass-语句" class="headerlink" title="3.1 pass 语句"></a>3.1 pass 语句</h2><h2 id="3-2-if-语句"><a href="#3-2-if-语句" class="headerlink" title="3.2 if 语句"></a>3.2 if 语句</h2><h2 id="3-3-while-语句"><a href="#3-3-while-语句" class="headerlink" title="3.3 while 语句"></a>3.3 while 语句</h2><h2 id="3-4-for-语句"><a href="#3-4-for-语句" class="headerlink" title="3.4 for 语句"></a>3.4 for 语句</h2><h3 id="3-4-1-基础"><a href="#3-4-1-基础" class="headerlink" title="3.4.1 基础"></a>3.4.1 基础</h3><h3 id="3-4-2-多条件"><a href="#3-4-2-多条件" class="headerlink" title="3.4.2 多条件"></a>3.4.2 多条件</h3><h3 id="3-4-3-迭代"><a href="#3-4-3-迭代" class="headerlink" title="3.4.3 迭代"></a>3.4.3 迭代</h3><h3 id="3-4-4-循环技巧"><a href="#3-4-4-循环技巧" class="headerlink" title="3.4.4 循环技巧"></a>3.4.4 循环技巧</h3><h2 id="3-5-break和continue-语句"><a href="#3-5-break和continue-语句" class="headerlink" title="3.5 break和continue 语句"></a>3.5 break和continue 语句</h2><h2 id="3-6-try"><a href="#3-6-try" class="headerlink" title="3.6 try"></a>3.6 try</h2><h2 id="3-7-generator"><a href="#3-7-generator" class="headerlink" title="3.7 generator"></a>3.7 generator</h2><h2 id="3-8-dir函数"><a href="#3-8-dir函数" class="headerlink" title="3.8 dir函数"></a>3.8 dir函数</h2><h2 id="3-9-del-函数"><a href="#3-9-del-函数" class="headerlink" title="3.9 del 函数"></a>3.9 del 函数</h2><h1 id="第四章-自定义函数"><a href="#第四章-自定义函数" class="headerlink" title="第四章 自定义函数"></a>第四章 自定义函数</h1><h2 id="4-1-函数定义"><a href="#4-1-函数定义" class="headerlink" title="4.1 函数定义"></a>4.1 函数定义</h2><h2 id="4-2-函数参数"><a href="#4-2-函数参数" class="headerlink" title="4.2 函数参数"></a>4.2 函数参数</h2><h2 id="4-3-函数调用"><a href="#4-3-函数调用" class="headerlink" title="4.3 函数调用"></a>4.3 函数调用</h2><h2 id="4-4-递归函数"><a href="#4-4-递归函数" class="headerlink" title="4.4 递归函数"></a>4.4 递归函数</h2><h2 id="4-5-列表生成式"><a href="#4-5-列表生成式" class="headerlink" title="4.5 列表生成式"></a>4.5 列表生成式</h2><h1 id="第五章-调试和测试"><a href="#第五章-调试和测试" class="headerlink" title="第五章 调试和测试"></a>第五章 调试和测试</h1><h2 id="5-1-错误"><a href="#5-1-错误" class="headerlink" title="5.1 错误"></a>5.1 错误</h2><h3 id="5-1-1-错误类型"><a href="#5-1-1-错误类型" class="headerlink" title="5.1.1 错误类型"></a>5.1.1 错误类型</h3><h3 id="5-1-2-错误处理"><a href="#5-1-2-错误处理" class="headerlink" title="5.1.2 错误处理"></a>5.1.2 错误处理</h3><h2 id="5-2-异常"><a href="#5-2-异常" class="headerlink" title="5.2 异常"></a>5.2 异常</h2><h3 id="5-2-1-异常处理"><a href="#5-2-1-异常处理" class="headerlink" title="5.2.1 异常处理"></a>5.2.1 异常处理</h3><h3 id="5-2-2-抛出异常"><a href="#5-2-2-抛出异常" class="headerlink" title="5.2.2 抛出异常"></a>5.2.2 抛出异常</h3><h3 id="5-2-3-用户自定义异常"><a href="#5-2-3-用户自定义异常" class="headerlink" title="5.2.3 用户自定义异常"></a>5.2.3 用户自定义异常</h3><h3 id="5-2-4-定义清理行为"><a href="#5-2-4-定义清理行为" class="headerlink" title="5.2.4 定义清理行为"></a>5.2.4 定义清理行为</h3><h3 id="5-2-5-预定义清理行为"><a href="#5-2-5-预定义清理行为" class="headerlink" title="5.2.5 预定义清理行为"></a>5.2.5 预定义清理行为</h3><h2 id="5-3-调试和测试"><a href="#5-3-调试和测试" class="headerlink" title="5.3 调试和测试"></a>5.3 调试和测试</h2><h3 id="5-3-1-单元测试"><a href="#5-3-1-单元测试" class="headerlink" title="5.3.1 单元测试"></a>5.3.1 单元测试</h3><h3 id="5-3-2-调试"><a href="#5-3-2-调试" class="headerlink" title="5.3.2 调试"></a>5.3.2 调试</h3><h3 id="5-3-3-文档测试"><a href="#5-3-3-文档测试" class="headerlink" title="5.3.3 文档测试"></a>5.3.3 文档测试</h3><h2 id="5-4-进程和线程"><a href="#5-4-进程和线程" class="headerlink" title="5.4 进程和线程"></a>5.4 进程和线程</h2><h3 id="5-4-1-ThreadLocal"><a href="#5-4-1-ThreadLocal" class="headerlink" title="5.4.1 ThreadLocal"></a>5.4.1 ThreadLocal</h3><h3 id="5-4-2-多进程"><a href="#5-4-2-多进程" class="headerlink" title="5.4.2 多进程"></a>5.4.2 多进程</h3><h3 id="5-4-3-多线程"><a href="#5-4-3-多线程" class="headerlink" title="5.4.3 多线程"></a>5.4.3 多线程</h3><h3 id="5-4-4-分布式进程"><a href="#5-4-4-分布式进程" class="headerlink" title="5.4.4 分布式进程"></a>5.4.4 分布式进程</h3><h3 id="5-4-5-进程-vs-线程"><a href="#5-4-5-进程-vs-线程" class="headerlink" title="5.4.5 进程 vs 线程"></a>5.4.5 进程 vs 线程</h3><h1 id="第六章-函数式编程"><a href="#第六章-函数式编程" class="headerlink" title="第六章 函数式编程"></a>第六章 函数式编程</h1><h2 id="6-1-返回值为函数"><a href="#6-1-返回值为函数" class="headerlink" title="6.1 返回值为函数"></a>6.1 返回值为函数</h2><h2 id="6-2-参数为函数"><a href="#6-2-参数为函数" class="headerlink" title="6.2 参数为函数"></a>6.2 参数为函数</h2><h2 id="6-3-匿名函数"><a href="#6-3-匿名函数" class="headerlink" title="6.3 匿名函数"></a>6.3 匿名函数</h2><h2 id="6-4-偏函数"><a href="#6-4-偏函数" class="headerlink" title="6.4 偏函数"></a>6.4 偏函数</h2><h2 id="6-5-装饰器"><a href="#6-5-装饰器" class="headerlink" title="6.5 装饰器"></a>6.5 装饰器</h2><h1 id="第七章-面对对象编程"><a href="#第七章-面对对象编程" class="headerlink" title="第七章  面对对象编程"></a>第七章  面对对象编程</h1><h2 id="7-1-作用域和命名空间"><a href="#7-1-作用域和命名空间" class="headerlink" title="7.1 作用域和命名空间"></a>7.1 作用域和命名空间</h2><h2 id="7-2-获取对象信息"><a href="#7-2-获取对象信息" class="headerlink" title="7.2 获取对象信息"></a>7.2 获取对象信息</h2><h2 id="7-3-继承和多态"><a href="#7-3-继承和多态" class="headerlink" title="7.3 继承和多态"></a>7.3 继承和多态</h2><h2 id="7-4-私有变量"><a href="#7-4-私有变量" class="headerlink" title="7.4 私有变量"></a>7.4 私有变量</h2><h2 id="7-5-类和实例"><a href="#7-5-类和实例" class="headerlink" title="7.5 类和实例"></a>7.5 类和实例</h2><h2 id="7-6-使用-property"><a href="#7-6-使用-property" class="headerlink" title="7.6 使用@property"></a>7.6 使用@property</h2><h2 id="7-7-使用slots"><a href="#7-7-使用slots" class="headerlink" title="7.7 使用slots"></a>7.7 使用slots</h2><h2 id="7-8-使用枚举类"><a href="#7-8-使用枚举类" class="headerlink" title="7.8 使用枚举类"></a>7.8 使用枚举类</h2><h2 id="7-9-使用元类"><a href="#7-9-使用元类" class="headerlink" title="7.9 使用元类"></a>7.9 使用元类</h2><h1 id="第八章-模块管理"><a href="#第八章-模块管理" class="headerlink" title="第八章 模块管理"></a>第八章 模块管理</h1><h2 id="8-1-深入模块"><a href="#8-1-深入模块" class="headerlink" title="8.1 深入模块"></a>8.1 深入模块</h2><h2 id="8-2-标准模块"><a href="#8-2-标准模块" class="headerlink" title="8.2 标准模块"></a>8.2 标准模块</h2><h2 id="8-3-使用模块"><a href="#8-3-使用模块" class="headerlink" title="8.3 使用模块"></a>8.3 使用模块</h2><h2 id="8-4-常用内建模块"><a href="#8-4-常用内建模块" class="headerlink" title="8.4 常用内建模块"></a>8.4 常用内建模块</h2><h2 id="8-5-常用第三方模块"><a href="#8-5-常用第三方模块" class="headerlink" title="8.5 常用第三方模块"></a>8.5 常用第三方模块</h2><h2 id="8-6-文件读写（glob）"><a href="#8-6-文件读写（glob）" class="headerlink" title="8.6 文件读写（glob）"></a>8.6 文件读写（glob）</h2><h1 id="第九章-应用"><a href="#第九章-应用" class="headerlink" title="第九章 应用"></a>第九章 应用</h1><h2 id="9-1-网络编程"><a href="#9-1-网络编程" class="headerlink" title="9.1 网络编程"></a>9.1 网络编程</h2><h3 id="9-1-1-TCP-Ip简介"><a href="#9-1-1-TCP-Ip简介" class="headerlink" title="9.1.1 TCP/Ip简介"></a>9.1.1 TCP/Ip简介</h3><h3 id="9-1-2-TCP编程"><a href="#9-1-2-TCP编程" class="headerlink" title="9.1.2 TCP编程"></a>9.1.2 TCP编程</h3><h3 id="9-1-2-UDP编程"><a href="#9-1-2-UDP编程" class="headerlink" title="9.1.2 UDP编程"></a>9.1.2 UDP编程</h3><h2 id="9-2-电子邮件"><a href="#9-2-电子邮件" class="headerlink" title="9.2 电子邮件"></a>9.2 电子邮件</h2><h3 id="9-2-1-POP3-收取邮件"><a href="#9-2-1-POP3-收取邮件" class="headerlink" title="9.2.1 POP3 收取邮件"></a>9.2.1 POP3 收取邮件</h3><h3 id="9-2-2-SMTP-发送邮件"><a href="#9-2-2-SMTP-发送邮件" class="headerlink" title="9.2.2 SMTP 发送邮件"></a>9.2.2 SMTP 发送邮件</h3><h2 id="9-3-访问数据库"><a href="#9-3-访问数据库" class="headerlink" title="9.3 访问数据库"></a>9.3 访问数据库</h2><h3 id="9-3-1-使用-MySQL"><a href="#9-3-1-使用-MySQL" class="headerlink" title="9.3.1 使用 MySQL"></a>9.3.1 使用 MySQL</h3><h3 id="9-3-2-使用SQLAlchemy"><a href="#9-3-2-使用SQLAlchemy" class="headerlink" title="9.3.2 使用SQLAlchemy"></a>9.3.2 使用SQLAlchemy</h3><h3 id="9-3-2-使用SQLite"><a href="#9-3-2-使用SQLite" class="headerlink" title="9.3.2 使用SQLite"></a>9.3.2 使用SQLite</h3><h2 id="9-4-数据压缩"><a href="#9-4-数据压缩" class="headerlink" title="9.4 数据压缩"></a>9.4 数据压缩</h2><h2 id="9-5-性能度量"><a href="#9-5-性能度量" class="headerlink" title="9.5 性能度量"></a>9.5 性能度量</h2><h2 id="9-6-质量控制"><a href="#9-6-质量控制" class="headerlink" title="9.6 质量控制"></a>9.6 质量控制</h2><h2 id="9-7-IO编程"><a href="#9-7-IO编程" class="headerlink" title="9.7 IO编程"></a>9.7 IO编程</h2><h3 id="9-7-1-StringIO和BytesIO"><a href="#9-7-1-StringIO和BytesIO" class="headerlink" title="9.7.1 StringIO和BytesIO"></a>9.7.1 StringIO和BytesIO</h3><h3 id="9-7-2-操作文件和目录"><a href="#9-7-2-操作文件和目录" class="headerlink" title="9.7.2 操作文件和目录"></a>9.7.2 操作文件和目录</h3><h3 id="9-7-3-文件读写"><a href="#9-7-3-文件读写" class="headerlink" title="9.7.3 文件读写"></a>9.7.3 文件读写</h3><h3 id="9-7-4-序列化"><a href="#9-7-4-序列化" class="headerlink" title="9.7.4 序列化"></a>9.7.4 序列化</h3><h2 id="9-8-生成日历"><a href="#9-8-生成日历" class="headerlink" title="9.8 生成日历"></a>9.8 生成日历</h2><h2 id="9-9-斐波那契数列"><a href="#9-9-斐波那契数列" class="headerlink" title="9.9 斐波那契数列"></a>9.9 斐波那契数列</h2><h2 id="9-10-阿姆斯特朗数"><a href="#9-10-阿姆斯特朗数" class="headerlink" title="9.10 阿姆斯特朗数"></a>9.10 阿姆斯特朗数</h2><h2 id="9-11-爬虫"><a href="#9-11-爬虫" class="headerlink" title="9.11 爬虫"></a>9.11 爬虫</h2><h2 id="9-12-web项目"><a href="#9-12-web项目" class="headerlink" title="9.12 web项目"></a>9.12 web项目</h2><h2 id="9-13-数据挖掘"><a href="#9-13-数据挖掘" class="headerlink" title="9.13 数据挖掘"></a>9.13 数据挖掘</h2><h2 id="9-14-机器学习"><a href="#9-14-机器学习" class="headerlink" title="9.14 机器学习"></a>9.14 机器学习</h2><h1 id="第十章-源代码地址"><a href="#第十章-源代码地址" class="headerlink" title="第十章 源代码地址"></a>第十章 源代码地址</h1><p><a href="https://github.com/mowatermelon/learn-Python">learn-Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很早就被安利过Python这个优雅的语言，由于各种原因（并不是因为拖延症，坚定的眼神.jpg），都没有学习过，主要是基于Python3.6.4做了一下整理，记录一下学习心得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一章-简介&quot;&gt;&lt;a href=&quot;#第一章-简介&quot; class=&quot;headerlink&quot; title=&quot;第一章 简介&quot;&gt;&lt;/a&gt;第一章 简介&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="https://mowatermelon.github.io/categories/python/"/>
    
    
      <category term="小白之路" scheme="https://mowatermelon.github.io/tags/%E5%B0%8F%E7%99%BD%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="watermelon" scheme="https://mowatermelon.github.io/tags/watermelon/"/>
    
      <category term="python" scheme="https://mowatermelon.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Js学习之new</title>
    <link href="https://mowatermelon.github.io/2017/11/02/js-Learning-new/"/>
    <id>https://mowatermelon.github.io/2017/11/02/js-Learning-new/</id>
    <published>2017-11-01T16:00:00.000Z</published>
    <updated>2018-01-11T02:17:55.563Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直不清楚显式声明和隐式原型的关系，整理了一下相关疑惑，并且整理了<code>new</code>和<code>instanceof</code>关于显式声明和隐式声明的相关知识</p></blockquote><a id="more"></a><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><h2 id="1-1-显式原型"><a href="#1-1-显式原型" class="headerlink" title="1.1 显式原型"></a>1.1 显式原型</h2><p>prototype — 显式原型 (explicit prototype property)，每一个<code>函数</code>在创建之后都会拥有一个名为<code>prototype</code>的属性，这个属性指向<code>函数</code>的<code>原型对象</code>。</p><p>请注意通过<code>Function.prototype.bind</code>方法构造出来的函数是个例外，它没有<code>prototype</code>属性。</p><blockquote><p>NOTE Function objects created using Function.prototype.bind do not have a prototype property or the [[Code]], [[FormalParameters]], and [[Scope]] internal properties. —– ECMAScript Language Specification</p></blockquote><p>这个属性是一个<code>指针</code>，指向一个<code>对象</code>，它是显示修改对象的原型的属性。</p><h2 id="1-2-隐式原型"><a href="#1-2-隐式原型" class="headerlink" title="1.2 隐式原型"></a>1.2 隐式原型</h2><p><code>__proto__</code> — 隐式原型 (implicit prototype link)：JS中任意<code>对象</code>都有一个内置属性<code>[[prototype]]</code>，是JS内部使用寻找原型链的属性在<code>ES5</code>之前没有标准的方法访问这个<code>内置属性</code>，但是大多数浏览器都支持通过<code>__proto__</code>来访问。</p><p><code>ES5</code>中有了对于这个<code>内置属性</code>标准的<code>Get</code>方法<code>Object.getPrototypeOf()</code>，即<code>Object.getPrototypeOf(obj)===obj.__proto__</code>，用<code>chrome</code>和<code>FF</code>都可以访问到对象的<code>__proto__</code>属性，<code>IE</code>不可以。</p><p>隐式原型指向创建这个对象的函数(<code>constructor</code>)的<code>prototype</code>。</p><p>但是请注意<code>Object.prototype.__proto__ //null</code>，即<code>Object</code>对象的显式原型的隐式原型是<code>null</code>，这个属于特例。</p><p>根据<code>ECMA</code>定义 <code>to the value of its constructor’s &quot;prototype&quot;</code>，指向创建这个对象的<code>函数</code>的<code>显式原型</code>。</p><p>所以关键的点在于找到创建这个对象的<code>构造函数</code>，接下来就来看一下<code>JS</code>中对象被创建的方式，一眼看过去似乎有三种方式：</p><ul><li>对象字面量的方式</li><li><code>new</code> 的方式</li><li><code>ES5</code>中的<code>Object.create()</code></li></ul><p>但是本质上只有一种方式，也就是通过<code>new</code>来创建。为什么这么说呢，字面量的方式只是一种为了开发人员更方便创建对象的一个<code>语法糖</code>，本质就是 <code>var o = new Object(); o.xx = xx;o.yy=yy;</code>。</p><p><code>Object.create()</code>是<code>ES5</code>中新增的方法，在这之前这被称为<code>原型式继承</code>。其实本质依然是通过<code>new</code>来创建的，如下面栗子中其实和<code>new Boolean()</code>，效果是比较相似的。</p><p>不同之处在于由 <code>Object.create()</code> 创建出来的对象没有<code>构造函数</code>，因为<code>create()</code>接收的就是一个<code>内建函数</code>的<code>显式声明</code>，如下栗子中，创建出来的对象的隐式声明其实是指向传入的实参，即<code>ss.__proto__===Boolean.prototype</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ss =<span class="built_in">Object</span>.create(<span class="built_in">Boolean</span>.prototype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> ss);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(ss.prototype);<span class="comment">//undefined</span></span><br><span class="line"><span class="comment">// console.log(ss.prototype.__proto__);//Cannot read property '__proto__' of undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(ss.__proto__);<span class="comment">//[Boolean: false]</span></span><br><span class="line"><span class="built_in">console</span>.log(ss.__proto__.prototype);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(ss.constructor);<span class="comment">//[Function: Boolean]</span></span><br></pre></td></tr></table></figure><h1 id="2-作用"><a href="#2-作用" class="headerlink" title="2 作用"></a>2 作用</h1><h2 id="2-1-显式原型"><a href="#2-1-显式原型" class="headerlink" title="2.1 显式原型"></a>2.1 显式原型</h2><p>用来实现基于原型的继承与属性的共享。</p><p>ECMAScript does not use classes such as those in C++, Smalltalk, or Java. Instead objects may be created in various ways including via a literal notation or via constructors which create objects and then execute code that initialises all or part of them by assigning initial values to their properties. Each constructor is a function that has a property named “prototype” that is used to implement prototype-based inheritance and shared properties.Objects are created by using constructors in new expressions; for example, new Date(2009,11) creates a new Date object. —-ECMAScript Language Specification</p><h2 id="2-2-隐式原型"><a href="#2-2-隐式原型" class="headerlink" title="2.2 隐式原型"></a>2.2 隐式原型</h2><p>构成原型链，同样用于实现基于原型的继承。</p><p>举个例子，当我们访问obj这个对象中的<code>x</code>属性时，如果在<code>obj</code>中找不到，那么就会沿着<code>__proto__</code>依次查找。</p><p>Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype” —-ECMAScript Language Specification</p><h1 id="3-联合案例"><a href="#3-联合案例" class="headerlink" title="3 联合案例"></a>3 联合案例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建测试变量</span></span><br><span class="line"><span class="keyword">var</span> temp_O = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> temp_B = <span class="keyword">new</span> <span class="built_in">Boolean</span>();</span><br><span class="line"><span class="keyword">var</span> temp_N = <span class="keyword">new</span> <span class="built_in">Number</span>();</span><br><span class="line"><span class="keyword">var</span> temp_S = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line"><span class="keyword">var</span> temp_A = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> temp_D = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> temp_F = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br></pre></td></tr></table></figure><h2 id="3-1-显式声明的隐式声明"><a href="#3-1-显式声明的隐式声明" class="headerlink" title="3.1 显式声明的隐式声明"></a>3.1 显式声明的隐式声明</h2><p>除了<code>undefined</code>和<code>null</code>对象类型之外，对象的隐式声明(<code>__proto__</code>)都是<code>{}</code>，因为内建对象(built-in object)的显式声明和实例对象的显式声明都是一个对象。比如<code>Array.prototype</code>和<code>temp_F.prototype</code>都是一个对象，所以它们的隐式声明都是<code>{}</code>，指向的都是<code>Object</code>这个构造体的显示声明，即<code>Object.prototype</code>。</p><p>请注意<code>Object.prototype.__proto__</code>和<code>Function.prototype.__proto__</code>是一个特例。</p><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">Object</td><td style="text-align:left">Object.prototype</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">Boolean.prototype</td><td style="text-align:left">[Boolean: false]</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">Number.prototype</td><td style="text-align:left">[Number: 0]</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">String.prototype</td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left">Array</td><td style="text-align:left">Array.prototype</td><td style="text-align:left">[]</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">Date.prototype</td><td style="text-align:left">Date {}</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left">Function.prototype</td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left"><code>Object.prototype.__proto__</code></td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left"><code>Boolean.prototype.__proto__</code></td><td style="text-align:left">{}</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left"><code>Number.prototype.__proto__</code></td><td style="text-align:left">{}</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left"><code>String.prototype.__proto__</code></td><td style="text-align:left">{}</td></tr><tr><td style="text-align:left">Array</td><td style="text-align:left"><code>Array.prototype.__proto__</code></td><td style="text-align:left">{}</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left"><code>Date.prototype.__proto__</code></td><td style="text-align:left">{}</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left"><code>Function.prototype.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">temp_O</td><td style="text-align:left"><code>temp_O.prototype.__proto__</code></td><td style="text-align:left">Cannot read property <code>__proto__</code> of undefined</td></tr><tr><td style="text-align:left">temp_B</td><td style="text-align:left"><code>temp_B.prototype.__proto__</code></td><td style="text-align:left">Cannot read property <code>__proto__</code> of undefined</td></tr><tr><td style="text-align:left">temp_N</td><td style="text-align:left"><code>temp_N.prototype.__proto__</code></td><td style="text-align:left">Cannot read property <code>__proto__</code> of undefined</td></tr><tr><td style="text-align:left">temp_S</td><td style="text-align:left"><code>temp_S.prototype.__proto__</code></td><td style="text-align:left">Cannot read property <code>__proto__</code> of undefined</td></tr><tr><td style="text-align:left">temp_A</td><td style="text-align:left"><code>temp_A.prototype.__proto__</code></td><td style="text-align:left">Cannot read property <code>__proto__</code> of undefined</td></tr><tr><td style="text-align:left">temp_D</td><td style="text-align:left"><code>temp_D.prototype.__proto__</code></td><td style="text-align:left">Cannot read property <code>__proto__</code> of undefined</td></tr><tr><td style="text-align:left">temp_F</td><td style="text-align:left"><code>temp_F.prototype.__proto__</code></td><td style="text-align:left">{}</td></tr></tbody></table><h2 id="3-2-隐式声明的显式声明"><a href="#3-2-隐式声明的显式声明" class="headerlink" title="3.2 隐式声明的显式声明"></a>3.2 隐式声明的显式声明</h2><p>除了<code>undefined</code>和<code>null</code>对象类型之外，所有对象的显式声明(prototype)都是<code>undefined</code>，因为内建对象(built-in object)的隐式声明和实例对象的隐式声明都是一个对象。比如<code>Array.__proto__</code>和<code>temp_F.__proto__</code>都是一个对象，所以它们的显示声明都是<code>undefined</code>。</p><p>构造函数因为都是<code>Function()</code>的实例，因此构造体的隐式声明也就都指向<code>Function.prototype</code>。</p><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">Object</td><td style="text-align:left"><code>Object.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left"><code>Boolean.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left"><code>Number.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left"><code>String.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Array</td><td style="text-align:left"><code>Array.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left"><code>Date.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left"><code>Function.__proto__</code></td><td style="text-align:left">[Function]</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left"><code>Object.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left"><code>Boolean.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left"><code>Number.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left"><code>String.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">Array</td><td style="text-align:left"><code>Array.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left"><code>Date.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left"><code>Function.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_O</td><td style="text-align:left"><code>temp_O.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_B</td><td style="text-align:left"><code>temp_B.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_N</td><td style="text-align:left"><code>temp_N.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_S</td><td style="text-align:left"><code>temp_S.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_A</td><td style="text-align:left"><code>temp_A.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_D</td><td style="text-align:left"><code>temp_D.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">temp_F</td><td style="text-align:left"><code>temp_F.__proto__.prototype</code></td><td style="text-align:left">undefined</td></tr></tbody></table><h1 id="4-new"><a href="#4-new" class="headerlink" title="4 new"></a>4 new</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><blockquote><p>new的过程拆分成以下三步：</p></blockquote><ul><li><code>var p={};</code> 也就是说，初始化一个空对象<code>p</code>。</li><li><code>p.__proto__ = Person.prototype;</code> 将临时对象的<code>隐式声明</code>指向构造体的<code>显式声明</code>上。</li><li><code>Person.call(p);</code> 也就是说构造<code>p</code>，也可以称之为初始化<code>p</code>。</li></ul><p>关键在于第二步，我们来证明一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__ === Person.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="5-instanceof"><a href="#5-instanceof" class="headerlink" title="5 instanceof"></a>5 instanceof</h1><h2 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h2><p>在 <code>JavaScript</code> 中，判断一个变量的类型常常会用 <code>typeof</code> 运算符，在使用 <code>typeof</code> 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 <code>object</code>。<code>ECMAScript</code> 引入了 <code>Java</code> 中的运算符 <code>instanceof</code> 来解决这个问题。<code>instanceof</code> 运算符与 <code>typeof</code> 运算符相似，用于识别正在处理的<code>对象</code>的类型。与 <code>typeof</code> 方法不同的是，<code>instanceof</code> 方法要求开发者明确地确认<code>对象</code>为某特定类型。</p><p><code>instanceof</code> 运算符用来测试一个<code>对象</code>在其<code>原型链</code>中是否存在一个构造函数的 <code>prototype</code> 属性。请注意这个是检测的是<code>原型链</code>，不是单纯的只检测对象的<code>隐式声明</code>一次，是不断的在对象的<code>隐式声明</code>中去找构造体的<code>显式声明</code>，注意如果传入的第一个参数如果不是<code>对象</code>，会直接返回<code>false</code>。</p><h2 id="5-2-用法"><a href="#5-2-用法" class="headerlink" title="5.2 用法"></a>5.2 用法</h2><p>通常来讲，使用 <code>instanceof</code> 就是判断一个实例是否属于某种类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 foo 是否是 Foo 类的实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Foo)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>另外，更重的一点是 <code>instanceof</code> 可以在继承关系中用来判断一个实例是否属于它的父类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Aoo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Foo.prototype = <span class="keyword">new</span> Aoo();<span class="comment">//JavaScript 原型继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Foo)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Aoo)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>上面的代码中是判断了一层继承关系中的父类，在<code>多层继承</code>关系中，<code>instanceof</code> 运算符同样适用。</p><h2 id="5-3-语言规范"><a href="#5-3-语言规范" class="headerlink" title="5.3 语言规范"></a>5.3 语言规范</h2><p><code>ECMAScript-262 edition 3</code> 中 关于 <code>instanceof</code> 运算符的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">11.8.6 The instanceof operator</span><br><span class="line"> The production RelationalExpression:</span><br><span class="line">     RelationalExpression instanceof ShiftExpression is evaluated as follows:</span><br><span class="line"></span><br><span class="line"> 1. Evaluate RelationalExpression.</span><br><span class="line"> 2. Call GetValue(Result(1)).// 调用 GetValue 方法得到 Result(1) 的值，设为 Result(2)</span><br><span class="line"> 3. Evaluate ShiftExpression.</span><br><span class="line"> 4. Call GetValue(Result(3)).// 同理，这里设为 Result(4)</span><br><span class="line"> 5. If Result(4) is not an object, throw a TypeError exception.// 如果 Result(4) 不是 object，</span><br><span class="line">                                                                //抛出异常</span><br><span class="line"> /* 如果 Result(4) 没有 [[HasInstance]] 方法，抛出异常。规范中的所有 [[...]] 方法或者属性都是内部的，</span><br><span class="line">在 JavaScript 中不能直接使用。并且规范中说明，只有 Function 对象实现了 [[HasInstance]] 方法。</span><br><span class="line">所以这里可以简单的理解为：如果 Result(4) 不是 Function 对象，抛出异常 */</span><br><span class="line"> 6. If Result(4) does not have a [[HasInstance]] method,</span><br><span class="line">   throw a TypeError exception.</span><br><span class="line"> // 相当于这样调用：Result(4).[[HasInstance]](Result(2))</span><br><span class="line"> 7. Call the [[HasInstance]] method of Result(4) with parameter Result(2).</span><br><span class="line"> 8. Return Result(7).</span><br><span class="line"></span><br><span class="line"> // 相关的 HasInstance 方法定义</span><br><span class="line"> 15.3.5.3 [[HasInstance]] (V)</span><br><span class="line"> Assume F is a Function object.// 这里 F 就是上面的 Result(4)，V 是 Result(2)</span><br><span class="line"> When the [[HasInstance]] method of F is called with value V,</span><br><span class="line">     the following steps are taken:</span><br><span class="line"> 1. If V is not an object, return false.// 如果 V 不是 object，直接返回 false</span><br><span class="line"> 2. Call the [[Get]] method of F with property name &quot;prototype&quot;.// 用 [[Get]] 方法取</span><br><span class="line">                                                                // F 的 prototype 属性</span><br><span class="line"> 3. Let O be Result(2).//O = F.[[Get]](&quot;prototype&quot;)</span><br><span class="line"> 4. If O is not an object, throw a TypeError exception.</span><br><span class="line"> 5. Let V be the value of the [[Prototype]] property of V.//V = V.[[Prototype]]</span><br><span class="line"> 6. If V is null, return false. </span><br><span class="line"> // 这里是关键，如果 O 和 V 引用的是同一个对象，则返回 true；否则，到 Step 8 返回 Step 5 继续循环</span><br><span class="line"> 7. If O and V refer to the same object or if they refer to objects</span><br><span class="line">   joined to each other (section 13.1.2), return true.</span><br><span class="line"> 8. Go to step 5.</span><br></pre></td></tr></table></figure><p>上面的规范定义很晦涩，而且看起来比较复杂，涉及到很多概念，但把这段规范翻译成 <code>JavaScript</code> 代码却很简单，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// object instanceof constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟instanceof 功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123;<span class="comment">//L 表示左表达式，R 表示右表达式</span></span><br><span class="line"> <span class="keyword">var</span> O = R.prototype;<span class="comment">// 取 R 的显示原型</span></span><br><span class="line"> L = L.__proto__;<span class="comment">// 取 L 的隐式原型</span></span><br><span class="line"> <span class="comment">//请注意这个判断条件，目的是无限循环，不断在L的隐式声明链中找R的显式说明，只有完全找不到的时候，才会返回false，</span></span><br><span class="line"> <span class="comment">//请注意undefined，null没有属性的，没有隐式声明的。</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (L === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (O === L)<span class="comment">// 这里重点：当 O 严格等于 L 时，返回 true</span></span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   L = L.__proto__;<span class="comment">//L.__proto__.__proto__.__proto__.__proto__.__proto__..........</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-参考网站"><a href="#6-参考网站" class="headerlink" title="6 参考网站"></a>6 参考网站</h1><ul><li><a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/">JavaScript instanceof 运算符深入剖析</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直不清楚显式声明和隐式原型的关系，整理了一下相关疑惑，并且整理了&lt;code&gt;new&lt;/code&gt;和&lt;code&gt;instanceof&lt;/code&gt;关于显式声明和隐式声明的相关知识&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="js学习" scheme="https://mowatermelon.github.io/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js学习" scheme="https://mowatermelon.github.io/tags/js%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="prototype" scheme="https://mowatermelon.github.io/tags/prototype/"/>
    
      <category term="__proto__" scheme="https://mowatermelon.github.io/tags/proto/"/>
    
      <category term="new" scheme="https://mowatermelon.github.io/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>西瓜有话说之Js学习疑惑篇</title>
    <link href="https://mowatermelon.github.io/2017/11/01/js-Thinking-confusion/"/>
    <id>https://mowatermelon.github.io/2017/11/01/js-Thinking-confusion/</id>
    <published>2017-10-31T16:00:00.000Z</published>
    <updated>2018-01-08T01:21:32.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-js类型强制转化"><a href="#1-js类型强制转化" class="headerlink" title="1 js类型强制转化"></a>1 js类型强制转化</h1><h2 id="1-1-Date强转"><a href="#1-1-Date强转" class="headerlink" title="1.1 Date强转"></a>1.1 Date强转</h2><p>为何<code>Date</code>强转之后构造体成了<code>String</code>？</p><a id="more"></a><blockquote><p>主要原因 ：JS中<code>Date</code>除了是一个<code>构造器</code>外，同时也是一个<code>函数</code>，没有<code>new</code>的时候，相当于调用了<code>Date函数</code>，然后把返回值(一个字符串类型的日期)赋值给<code>doArr</code>,并没有产生新的<code>Date实例</code>，所以变量和<code>Date构造器</code>没有什么关系，继承的都是<code>String</code>这个构造器的方法和属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认String和Date没什么关系</span></span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(oDate <span class="keyword">instanceof</span> <span class="built_in">String</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">Date</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------但是请注意</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>().constructor);<span class="comment">//[Function: String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>().constructor);<span class="comment">//[Function: String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>().constructor===<span class="built_in">Date</span>().constructor);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>().__proto__);<span class="comment">//[String: '']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>().__proto__);<span class="comment">//[String: '']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>().__proto__===<span class="built_in">Date</span>().__proto__);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------举个实际的例子</span></span><br><span class="line"><span class="keyword">var</span> oArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">68</span>);</span><br><span class="line"><span class="keyword">var</span> noArr = <span class="built_in">Number</span>(oArr);</span><br><span class="line"><span class="keyword">var</span> doArr = <span class="built_in">Date</span>(oArr);</span><br><span class="line"><span class="built_in">console</span>.log(doArr.constructor);<span class="comment">//[Function: String]  为何啊</span></span><br><span class="line"><span class="built_in">console</span>.log(doArr.__proto__); <span class="comment">//[String: '']  为何啊  明明这两个数据类型没什么关联</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类型强转之后，实例的构造体都是正常修改为强转的对象类名</span></span><br><span class="line"><span class="built_in">console</span>.log(noArr.constructor);<span class="comment">//[Function:Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(noArr.__proto__); <span class="comment">//[Number: 0]</span></span><br></pre></td></tr></table></figure><h1 id="2-正则匹配"><a href="#2-正则匹配" class="headerlink" title="2 正则匹配"></a>2 正则匹配</h1><h2 id="2-1-search"><a href="#2-1-search" class="headerlink" title="2.1 search"></a>2.1 search</h2><h3 id="2-1-1-正则与undefined"><a href="#2-1-1-正则与undefined" class="headerlink" title="2.1.1 正则与undefined"></a>2.1.1 正则与undefined</h3><p>特殊字面量明明都可以正常转成正则对象，那为何检测<code>undefined</code>的时候，所有案例变量都匹配成功了？</p><blockquote><p>主要原因 ：<code>undefined</code>会转成<code>/(?:)/</code>然后进行检测，正则中<code>(?:pattern)</code> 的意思是匹配<code>pattern</code>但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用，因为<code>/(?:)/</code>的<code>pattern</code>值为空，所以上面正则的意思是匹配所有。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> strString = <span class="string">"hello watermelon"</span>;</span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> oString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">var</span> oBool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> oNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</span><br><span class="line"><span class="keyword">var</span> oArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"demo"</span>,<span class="string">"melon"</span>,<span class="string">"water"</span>);</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> oString_1 = <span class="string">'A \uD87E\uDC04 Z'</span>;</span><br><span class="line"><span class="keyword">var</span> tString_1 =<span class="string">`hello Template`</span>;</span><br><span class="line"><span class="keyword">var</span> tString_2 =<span class="string">`hello line 1</span></span><br><span class="line"><span class="string">  hello line 2`</span>;</span><br><span class="line"><span class="comment">//`string text $&#123;expression&#125; string text`  在模版字符串中使用表达式</span></span><br><span class="line"><span class="keyword">var</span> tString_3 =<span class="string">`Fifteen is <span class="subst">$&#123;a + b&#125;</span> and\nnot <span class="subst">$&#123;<span class="number">2</span> * a + b&#125;</span>.`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(strString.search(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.search(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.search(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.search(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.search(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.search(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oString.search(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.search(<span class="literal">false</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.search(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.search(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="literal">true</span>));<span class="comment">//  /true/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="literal">false</span>));<span class="comment">// /false/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="literal">undefined</span>));<span class="comment">// /(?:)/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="literal">null</span>));<span class="comment">// /null/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="literal">NaN</span>));<span class="comment">// /NaN/</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-正则与Object"><a href="#2-1-2-正则与Object" class="headerlink" title="2.1.2 正则与Object"></a>2.1.2 正则与Object</h3><p><code>oo</code>是一个空对象，它的字面量是<code>{}</code>，但是为什么可以和案例变量都进行匹配。</p><blockquote><p>主要原因 ：<code>oo</code>传入<code>search方法</code>中是<code>[object Object]</code>，在正则中中括号的意思是匹配包含在括号中的任意字符。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> strString = <span class="string">"hello watermelon"</span>;</span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> oString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">var</span> oBool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> oNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</span><br><span class="line"><span class="keyword">var</span> oArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"demo"</span>,<span class="string">"melon"</span>,<span class="string">"water"</span>);</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> oString_1 = <span class="string">'A \uD87E\uDC04 Z'</span>;</span><br><span class="line"><span class="keyword">var</span> tString_1 =<span class="string">`hello Template`</span>;</span><br><span class="line"><span class="keyword">var</span> tString_2 =<span class="string">`hello line 1</span></span><br><span class="line"><span class="string">  hello line 2`</span>;</span><br><span class="line"><span class="comment">//`string text $&#123;expression&#125; string text`  在模版字符串中使用表达式</span></span><br><span class="line"><span class="keyword">var</span> tString_3 =<span class="string">`Fifteen is <span class="subst">$&#123;a + b&#125;</span> and\nnot <span class="subst">$&#123;<span class="number">2</span> * a + b&#125;</span>.`</span>;</span><br><span class="line"><span class="keyword">var</span> tString_4 = <span class="string">"大吉大利今晚吃西瓜!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.search(oo));<span class="comment">//1   位置对应的字母是 e</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.charAt(<span class="number">1</span>));<span class="comment">//e</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oString.search(oo));<span class="comment">//1   位置对应的字母是 e</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.charAt(<span class="number">1</span>));<span class="comment">//e</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.search(oo));<span class="comment">//1   位置对应的字母是 空格</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.charAt(<span class="number">1</span>));<span class="comment">//\s  位置对应的字母是 空格</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.search(oo));<span class="comment">//1   位置对应的字母是 e</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.charAt(<span class="number">1</span>));<span class="comment">//e</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.search(oo));<span class="comment">//1   位置对应的字母是 e</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.charAt(<span class="number">1</span>));<span class="comment">//e</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.search(oo));<span class="comment">//3   位置对应的字母是 t</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.charAt(<span class="number">3</span>));<span class="comment">//t</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.search(oo));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.search(oBool));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.search(oNum));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.search(oArray));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.search(oDate));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(oo));<span class="comment">//  /[object Object]/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中括号的意思是    匹配中括号的任意一个字符</span></span><br><span class="line"><span class="comment">// 所以对应正则的意思是只要字符串中存在object这几个字母和空格都会被匹配</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(oString));<span class="comment">// /hello world/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(oBool));<span class="comment">// /true/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(oNum));<span class="comment">// /68/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(oArray));<span class="comment">// /demo,melon,water/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">RegExp</span>(oDate));<span class="comment">// /Thu Dec 21 2017 19:39:40 GMT+0800 (中国标准时间)/</span></span><br></pre></td></tr></table></figure><h1 id="3-localeCompare"><a href="#3-localeCompare" class="headerlink" title="3 localeCompare"></a>3 localeCompare</h1><h2 id="3-1-localeCompare与正则参数"><a href="#3-1-localeCompare与正则参数" class="headerlink" title="3.1 localeCompare与正则参数"></a>3.1 localeCompare与正则参数</h2><p>就目前测试的相关数据结果表现，不管字符串中是什么内容，传入什么样的正则值，或者传入<code>制表符</code>，<code>空格</code>，和<code>换行符</code>等等<code>特殊字符</code>，<code>localeCompare</code>都会返回正值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> strString = <span class="string">"hello watermelon"</span>;</span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> oString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">var</span> oBool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> oNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</span><br><span class="line"><span class="keyword">var</span> oArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"demo"</span>,<span class="string">"melon"</span>,<span class="string">"water"</span>);</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> oString_1 = <span class="string">'A \uD87E\uDC04 Z'</span>;</span><br><span class="line"><span class="keyword">var</span> tString_1 =<span class="string">`hello Template`</span>;</span><br><span class="line"><span class="keyword">var</span> tString_2 =<span class="string">`hello line 1</span></span><br><span class="line"><span class="string">  hello line 2`</span>;</span><br><span class="line"><span class="comment">//`string text $&#123;expression&#125; string text`  在模版字符串中使用表达式</span></span><br><span class="line"><span class="keyword">var</span> tString_3 =<span class="string">`Fifteen is <span class="subst">$&#123;a + b&#125;</span> and\nnot <span class="subst">$&#123;<span class="number">2</span> * a + b&#125;</span>.`</span>;</span><br><span class="line"><span class="keyword">var</span> tString_4 = <span class="string">"大吉大利今晚吃西瓜!"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试/\s/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/\s/</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试/\o/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试/\n/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/\n/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/\o/</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试/helllo world/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/helllo world/</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试/大吉大利/"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/大吉大利/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="regexp">/大吉大利/ig</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_2);<span class="comment">//hello line 1\n\t\t\t\thello line 2</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="string">"  "</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="string">"    "</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="string">"     "</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="string">""</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="string">""</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="3-2-localeCompare判断"><a href="#3-2-localeCompare判断" class="headerlink" title="3.2 localeCompare判断"></a>3.2 localeCompare判断</h2><p>目前看来不管传入的<code>子字符串</code>和<code>原始字符串</code>是否存在包含关系，结果都不一定是<code>正值</code>,在测试数据结果中不发现是单纯的通过两个字符串首字母进行对比。</p><h3 id="3-2-1-两个字符串的首字母相同"><a href="#3-2-1-两个字符串的首字母相同" class="headerlink" title="3.2.1 两个字符串的首字母相同"></a>3.2.1 两个字符串的首字母相同</h3><p>首字母相同，但是得到的结果却不一定是正值，会根据子字符串的长度还有包含的字母不同，返回不同的值，但是这个具体处理逻辑我不太懂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(strString);<span class="comment">//hello watermelon</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"h"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"H"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"hello watermelon1"</span>));<span class="comment">//-1   修改了原有字符串的长度，返回 -1  这个我可以理解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不是递归对比每一个字母在字母表中的位置，返回总的对比结果吗，</span></span><br><span class="line"><span class="comment">//还是递归对比每一个字母在ACSII码表中的值进行排序对比，返回总的对比结果</span></span><br><span class="line"><span class="comment">// a 不是比原有的 l在字母表中的位置高很多吗？</span></span><br><span class="line"><span class="comment">// z 不是比原有的 l在字母表中的位置低很多吗？</span></span><br><span class="line"><span class="comment">// 而且我子字符串长度的值比原始字符串长度还要多一位，为何还是会存在返回正值的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"healo watermelon1"</span>));<span class="comment">//1   修改了原有字符串的一个字母为 a 作为子字符串，返回 1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"hezlo watermelon1"</span>));<span class="comment">//-1   修改了原有字符串的一个字母为 z 作为子字符串，返回 -1，</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oString_1);<span class="comment">//A 你 Z</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"a"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"A"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"A 你 Z。"</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_3);<span class="comment">//Fifteen is 12 and\nnot 16.</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="string">"fifteen"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="string">"Fifteen"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="string">"Fifteen is 12 and\nnot 16.。"</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="string">"Fiftaen"</span>));<span class="comment">//1 修改了原有字符串的一个字母为 a 作为子字符串，返回 1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="string">"Fiftzen"</span>));<span class="comment">//-1 修改了原有字符串的一个字母为 z 作为子字符串，返回 -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试num"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="number">1</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="number">1.1</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="number">1.5</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="number">1.8</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="number">-1</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-原始字符串包含子字符串"><a href="#3-2-2-原始字符串包含子字符串" class="headerlink" title="3.2.2 原始字符串包含子字符串"></a>3.2.2 原始字符串包含子字符串</h3><p>传入的<code>子字符串</code>是完全被包含于<code>原始字符串</code>的，但是结果不一定都是返回<code>正值</code>，子字符串长度不是一个参考值？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(strString);<span class="comment">//hello watermelon</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"h"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="string">"llo"</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oString_1);<span class="comment">//A 你 Z</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"A"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"\uD87E\uDC04"</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"你"</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.normalize().localeCompare(<span class="string">"你"</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="string">"你"</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_2);<span class="comment">//hello line 1\n\t\t\t\thello line 2</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="string">"line"</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_3);<span class="comment">//Fifteen is 12 and\nnot 16.</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="string">"Fifteen"</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tString_4);<span class="comment">//大吉大利今晚吃西瓜!</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="string">"吃西瓜"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="string">"大吉大利今晚吃西瓜"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="string">"大吉大利今晚吃西瓜 "</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="string">"大吉大利今晚吃西瓜."</span>));<span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-localeCompare与特殊值"><a href="#3-2-3-localeCompare与特殊值" class="headerlink" title="3.2.3 localeCompare与特殊值"></a>3.2.3 localeCompare与特殊值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试undefined"</span>);</span><br><span class="line"><span class="comment">//除了undefined本身，所有字符串与undefined做对比，都返回了-1 ，undefined不应该是一个比较小的值吗</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"true"</span>.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"false"</span>.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"null"</span>.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"undefined"</span>.localeCompare(<span class="literal">undefined</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"NaN"</span>.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="literal">undefined</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试true"</span>);</span><br><span class="line"><span class="comment">//除了true本身和完全是中文字符构成的字符串，所有字符串与true做对比，都返回了-1 ，这又是为何？</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="literal">true</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="literal">true</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试false"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="literal">false</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="literal">false</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="literal">false</span>));<span class="comment">//-1   不懂为何结果是  -1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="literal">false</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="literal">false</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="literal">false</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="literal">false</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试null"</span>);</span><br><span class="line"><span class="comment">//除了null本身和完全是中文字符构成的字符串，所有字符串与null做对比，都返回了-1 ，null不应该是一个比较小的值吗</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="literal">null</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="literal">null</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试NaN"</span>);</span><br><span class="line"><span class="comment">//除了NaN本身和完全是中文字符构成的字符串，所有字符串与NaN做对比，都返回了-1 ，NaN不应该是一个比较小的值吗</span></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(<span class="literal">NaN</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(<span class="literal">NaN</span>));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------------------测试oo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString.localeCompare(oo));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString.localeCompare(oo));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1.localeCompare(oo));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1.localeCompare(oo));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2.localeCompare(oo));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3.localeCompare(oo));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_4.localeCompare(oo));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h1 id="4-数据类型学习"><a href="#4-数据类型学习" class="headerlink" title="4 数据类型学习"></a>4 数据类型学习</h1><p>常用的有六大数据类型，一般实例化对象的时候，都是<code>new</code>关键词加上数据类型加上括号，今天突然想到如果不加括号怎样，然后发现两种情况下实例化的变量的值从表面上看几乎是一模一样的的，但是在做等式匹配的时候，不管是用全等还是用普通等式，都是返回的<code>false</code>.</p><blockquote><p>主要原因 ：<code>基本类型</code>是通过<code>值</code>来<code>比较</code>，而<code>对象</code>（Object，Boolean，Number，String，Array，Date，Function）及<code>普通对象</code>通过<code>指针</code>指向的<code>内存</code>中的<code>地址</code>来做比较。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp_O = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">var</span> temp_B = <span class="keyword">new</span> <span class="built_in">Boolean</span>;</span><br><span class="line"><span class="keyword">var</span> temp_N = <span class="keyword">new</span> <span class="built_in">Number</span>;</span><br><span class="line"><span class="keyword">var</span> temp_S = <span class="keyword">new</span> <span class="built_in">String</span>;</span><br><span class="line"><span class="keyword">var</span> temp_A = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line"><span class="keyword">var</span> temp_D = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="keyword">var</span> temp_F = <span class="keyword">new</span> <span class="built_in">Function</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(temp_O);<span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(temp_B);<span class="comment">//[Boolean: false]</span></span><br><span class="line"><span class="built_in">console</span>.log(temp_N);<span class="comment">//[Number: 0]</span></span><br><span class="line"><span class="built_in">console</span>.log(temp_S);<span class="comment">//[String: '']</span></span><br><span class="line"><span class="built_in">console</span>.log(temp_A);<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(temp_D);<span class="comment">//2018-01-07T09:11:45.720Z</span></span><br><span class="line"><span class="built_in">console</span>.log(temp_F);<span class="comment">//[Function: anonymous]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Object</span>());<span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Boolean</span>());<span class="comment">//[Boolean: false]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>());<span class="comment">//[Number: 0]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>());<span class="comment">//[String: '']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>());<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">//2018-01-07T09:26:55.136Z</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Function</span>());<span class="comment">//[Function: anonymous]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Object</span>())===temp_O);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Boolean</span>())===temp_B);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Number</span>())===temp_N);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">String</span>())===temp_S);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Array</span>())===temp_A);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>())===temp_D);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Function</span>())===temp_F);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Object</span>())===(<span class="keyword">new</span> <span class="built_in">Object</span>()));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Boolean</span>())===(<span class="keyword">new</span> <span class="built_in">Boolean</span>()));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Number</span>())===(<span class="keyword">new</span> <span class="built_in">Number</span>()));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">String</span>())===(<span class="keyword">new</span> <span class="built_in">String</span>()));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Array</span>())===(<span class="keyword">new</span> <span class="built_in">Array</span>()));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>())===(<span class="keyword">new</span> <span class="built_in">Date</span>()));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Function</span>())===(<span class="keyword">new</span> <span class="built_in">Function</span>()));<span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-js类型强制转化&quot;&gt;&lt;a href=&quot;#1-js类型强制转化&quot; class=&quot;headerlink&quot; title=&quot;1 js类型强制转化&quot;&gt;&lt;/a&gt;1 js类型强制转化&lt;/h1&gt;&lt;h2 id=&quot;1-1-Date强转&quot;&gt;&lt;a href=&quot;#1-1-Date强转&quot; class=&quot;headerlink&quot; title=&quot;1.1 Date强转&quot;&gt;&lt;/a&gt;1.1 Date强转&lt;/h2&gt;&lt;p&gt;为何&lt;code&gt;Date&lt;/code&gt;强转之后构造体成了&lt;code&gt;String&lt;/code&gt;？&lt;/p&gt;
    
    </summary>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/categories/js-thinking/"/>
    
    
      <category term="watermelon" scheme="https://mowatermelon.github.io/tags/watermelon/"/>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/tags/js-thinking/"/>
    
      <category term="confusion" scheme="https://mowatermelon.github.io/tags/confusion/"/>
    
  </entry>
  
  <entry>
    <title>西瓜有话说之Js对象学习string篇</title>
    <link href="https://mowatermelon.github.io/2017/10/31/js-Thinking-object-string/"/>
    <id>https://mowatermelon.github.io/2017/10/31/js-Thinking-object-string/</id>
    <published>2017-10-30T16:00:00.000Z</published>
    <updated>2018-03-26T01:43:41.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><h2 id="1-1-基本字符串"><a href="#1-1-基本字符串" class="headerlink" title="1.1 基本字符串"></a>1.1 基本字符串</h2><p>字符串字面量 (通过单引号或双引号定义) 和 直接调用 String方法(没有通过 new 生成字符串对象实例)的字符串都是基本字符串。基本字符串是没有相关扩展方法，只有将基本字符串可转化为字符串对象之后才可以使用字符串对象的方法，当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候，JavaScript会自动将基本字符串转换为字符串对象，并且调用相应的方法或者执行查询。</p><a id="more"></a><h2 id="1-2-字符串对象"><a href="#1-2-字符串对象" class="headerlink" title="1.2 字符串对象"></a>1.2 字符串对象</h2><p>一个用于字符串或一个字符序列的构造函数。字符串对于可以保存以文本形式表示的数据非常有用。 一些常用的字符串操作有：查询字符串长度，使用 <code>+</code> 和 <code>+=</code> 运算符来构建和连接字符串，使用 indexOf 方法检查某一子字符串在父字符串中的位置，又或是使用substring方法提取从父字符串中提取子字符串。</p><h2 id="1-3-模板字符串"><a href="#1-3-模板字符串" class="headerlink" title="1.3 模板字符串"></a>1.3 模板字符串</h2><p>模板字面量/Template literals 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为模板字符串/template strings。</p><p>模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法(<code>${expression}</code>)的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`\``</span> === <span class="string">"`"</span> <span class="comment">// --&gt; true</span></span><br></pre></td></tr></table></figure><h1 id="2-名词字典"><a href="#2-名词字典" class="headerlink" title="2. 名词字典"></a>2. 名词字典</h1><blockquote><p>本文中出现变量名词的解释</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> strString = <span class="string">"hello watermelon"</span>;</span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> oString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">var</span> oBool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> oNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</span><br><span class="line"><span class="keyword">var</span> oArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"demo"</span>,<span class="string">"melon"</span>,<span class="string">"water"</span>);</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">//D800-DBFF UTF-16的高半区 High-half zone of UTF-16</span></span><br><span class="line"><span class="comment">//DC00-DFFF UTF-16的低半区 Low-half zone of UTF-16</span></span><br><span class="line"><span class="keyword">var</span> oString_1 = <span class="string">'A \uD87E\uDC04 Z'</span>;</span><br><span class="line"><span class="keyword">var</span> tString_1 =<span class="string">`hello Template`</span>;</span><br><span class="line"><span class="keyword">var</span> tString_2 =<span class="string">`hello line 1</span></span><br><span class="line"><span class="string"> hello line 2`</span>;</span><br><span class="line"><span class="comment">//`string text $&#123;expression&#125; string text`  在模版字符串中使用表达式</span></span><br><span class="line"><span class="keyword">var</span> tString_3 =<span class="string">`Fifteen is <span class="subst">$&#123;a + b&#125;</span> and\nnot <span class="subst">$&#123;<span class="number">2</span> * a + b&#125;</span>.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//String存储的是非expression的字符串</span></span><br><span class="line"> <span class="comment">//values存储的是expression计算之后的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(strings[<span class="number">0</span>]); <span class="comment">// "Hello "  在第一个expression前的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(strings[<span class="number">1</span>]); <span class="comment">// " world " 在第二个expression前的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(strings[<span class="number">2</span>]); <span class="comment">// "hahaha"  在第三个expression前的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(strings[<span class="number">3</span>]); <span class="comment">// "" 在第三个expression后的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(values[<span class="number">0</span>]);  <span class="comment">// 12  第一个expression的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(values[<span class="number">1</span>]);  <span class="comment">// 32  第二个expression的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(values[<span class="number">2</span>]); <span class="comment">// 0.5  第三个expression的值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"大吉大利今晚吃西瓜!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strString);<span class="comment">//hello watermelon</span></span><br><span class="line"><span class="built_in">console</span>.log(oString);<span class="comment">//[String: 'hello world']</span></span><br><span class="line"><span class="built_in">console</span>.log(oString_1);<span class="comment">//A 你 Z   中间不在BMP中的字符，会显示乱码</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_1);<span class="comment">//hello Template</span></span><br><span class="line"><span class="comment">//打印出来会保留原格式 比如原有的换行和缩进</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_2);<span class="comment">//hello Template line 1 \n \t hello Template line 2</span></span><br><span class="line"><span class="comment">// tag(tString_1);//h e l l undefined undefined undefined</span></span><br><span class="line"><span class="comment">// tag(tString_2);//h e l l undefined undefined undefined</span></span><br><span class="line"><span class="comment">// tag(tString_3);//F i f t undefined undefined undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(tString_3);<span class="comment">//Fifteen is 12 and \n  not 16.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tag `string text $&#123;expression&#125; string text`  在模版字符串中使用tag方法</span></span><br><span class="line"><span class="comment">//在没有调用console之前，不会打印 大吉大利今晚吃西瓜!</span></span><br><span class="line"><span class="comment">//tString_4的值其实就是tag函数的返回值   大吉大利今晚吃西瓜!</span></span><br><span class="line"><span class="keyword">var</span> tString_4 = tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b&#125;</span>hahaha <span class="subst">$&#123; a <span class="regexp">/ b&#125;`;</span></span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">含义</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left">objectName</td><td style="text-align:left">相关对象类型名称</td><td style="text-align:left">就像上面<code>js</code>代码中<code>String</code></td></tr><tr><td style="text-align:left">varName</td><td style="text-align:left">相关对象类型实例化后的变量名</td><td style="text-align:left">就像上面<code>js</code>代码中<code>strString</code>,<code>oString</code>,<code>tString_1</code></td></tr><tr><td style="text-align:left">varName_val</td><td style="text-align:left">相关对象类型实例化后的实际内容</td><td style="text-align:left">就像上面<code>js</code>代码中<code>hello watermelon</code></td></tr><tr><td style="text-align:left">functionName</td><td style="text-align:left">函数名称</td><td style="text-align:left">就像上文的<code>tag</code></td></tr><tr><td style="text-align:left">BMP</td><td style="text-align:left">基本多文种平面（Basic Multilingual Plane），或称第0平面或0号平面（Plane 0），是<code>Unicode</code>中的一个编码区段。编码从<code>U+0000</code>至<code>U+FFFF</code>。现版本为修订10.0.0版，2017年6月20日出版。</td><td style="text-align:left">无举例</td></tr><tr><td style="text-align:left">ES5</td><td style="text-align:left">ECMAScript第五版，发布为ECMAScript 2015，最初发布第一版时间为2009年12月发布，后来在发布时间2015年6月进行了大量修改</td><td style="text-align:left">无举例</td></tr><tr><td style="text-align:left">ES6</td><td style="text-align:left">ECMAScript第六版（发布为ECMAScript 2016），发布时间2016年</td><td style="text-align:left">无举例</td></tr><tr><td style="text-align:left">ES7</td><td style="text-align:left">ECMAScript第七版（发布为ECMAScript 2017），发布时间2017年</td><td style="text-align:left">无举例</td></tr><tr><td style="text-align:left">letter</td><td style="text-align:left">字母</td><td style="text-align:left">letter(8) 代表八个子母，一个字母长度为一</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">汉字</td><td style="text-align:left">char(8) 代表八个汉字，一个汉字长度为一</td></tr><tr><td style="text-align:left">num</td><td style="text-align:left">数字</td><td style="text-align:left">num(8) 代表八个数字，一个数字长度为一</td></tr><tr><td style="text-align:left">sign</td><td style="text-align:left">符号</td><td style="text-align:left">sign(8) 代表八个符号，一个符号长度为一</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">空格符</td><td style="text-align:left">\s(8) 代表八个空格符，一个空格符长度为一</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">缩进符</td><td style="text-align:left">\t(8) 代表八个缩进符，一个缩进符长度为四</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">换行符</td><td style="text-align:left">\n(8) 代表八个换行符，一个换行符长度为一</td></tr><tr><td style="text-align:left">\u</td><td style="text-align:left">换行符</td><td style="text-align:left">\u(8) 代表八个非BMP字符，一个非BMP字符长度为二</td></tr><tr><td style="text-align:left">param1,param2,param3,…,paramN</td><td style="text-align:left">函数中需要传入第一个到第N个的参数值</td><td style="text-align:left">就像上面<code>js</code>代码中<code>hello world</code></td></tr><tr><td style="text-align:left">柔和方法</td><td style="text-align:left">不会改变字符串原始值</td><td style="text-align:left">就是执行某个方法之后，<code>varName</code>原本所包含的内容不会变化</td></tr><tr><td style="text-align:left">强硬方法</td><td style="text-align:left">会改变字符串原始值</td><td style="text-align:left">就是执行某个方法之后，<code>varName</code>原本所包含的内容会变化</td></tr><tr><td style="text-align:left">父字符串</td><td style="text-align:left">原始的对象内容</td><td style="text-align:left">就像上面<code>js</code>代码中<code>strString</code>,<code>oString</code>,<code>tString_1</code></td></tr><tr><td style="text-align:left">子字符串</td><td style="text-align:left">传入需要检索或者替换的参数值</td><td style="text-align:left">就像上面<code>js</code>代码中<code>hello watermelon</code></td></tr><tr><td style="text-align:left">接受负值参</td><td style="text-align:left">函数接受负值的参数，并且可以正常处理返回对应的值</td><td style="text-align:left">如果方法的描述中出现这五个字，则代表这个方法接受负值参数，如果没有出现，则代表不接受，请注意</td></tr><tr><td style="text-align:left">不推荐使用</td><td style="text-align:left">该特性是非标准的，请尽量不要在生产环境中使用它。</td><td style="text-align:left">如果下面属性和方法的描述中出现这五个字，意思最好不要使用这个属性或者这个方法。</td></tr><tr><td style="text-align:left">已废弃</td><td style="text-align:left">目前现行的几大主流浏览器都不支持了</td><td style="text-align:left">如果下面属性和方法的描述中出现这三个字，意思你使用了这个一般会报错，或者直接返回undefined。</td></tr><tr><td style="text-align:left">测试中</td><td style="text-align:left">此功能某些浏览器尚在开发中，请参考浏览器兼容性表格以得到在不同浏览器中适合使用的前缀。由于该功能对应的标准文档可能被重新修订，所以在未来版本的浏览器中该功能的语法和行为可能随之改变。</td><td style="text-align:left">如果下面属性和方法的描述中出现这三个字，意思你使用了这个不一定被所有浏览器都兼容，最好不要使用这个属性或者这个方法。</td></tr></tbody></table><h1 id="3-字符串的属性"><a href="#3-字符串的属性" class="headerlink" title="3. 字符串的属性"></a>3. 字符串的属性</h1><h2 id="3-1-继承对象的属性"><a href="#3-1-继承对象的属性" class="headerlink" title="3.1 继承对象的属性"></a>3.1 继承对象的属性</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">描述</th><th style="text-align:left">使用方法</th></tr></thead><tbody><tr><td style="text-align:left">constructor</td><td style="text-align:left">对创建对象的函数的引用（指针）。</td><td style="text-align:left">varName.constructor</td></tr><tr><td style="text-align:left"><code>__proto__</code></td><td style="text-align:left">对象具有属性<code>__proto__</code>，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型。</td><td style="text-align:left"><code>varName.__proto__</code></td></tr><tr><td style="text-align:left">length</td><td style="text-align:left">字符串的长度。</td><td style="text-align:left">varName.length</td></tr><tr><td style="text-align:left"><code>__count__</code></td><td style="text-align:left"><code>已废弃</code>，用来存放对象的可枚举的属性的个数</td><td style="text-align:left"><code>varName.__count__</code></td></tr><tr><td style="text-align:left"><code>__noSuchMethod__</code></td><td style="text-align:left"><code>已废弃</code>，属性曾经是指当调用某个对象里不存在的方法时即将被执行的函数，在<code>__noSuchMethod__</code>属性被移除之后，<code>ECMAScript 2015 (ES6)</code> 规范转而采用 <code>Proxy</code> 对象。</td><td style="text-align:left"><code>varName.__noSuchMethod__ = fun(id, args){}</code> @param1 id 调用的不存在的方法名 @param2 args 传递给该方法的参数数组</td></tr><tr><td style="text-align:left"><code>__parent__</code></td><td style="text-align:left"><code>已废弃</code>，指向一个对象的上下文，对于最顶层对象来说,这个属性的值就是全局对象<code>window</code>。</td><td style="text-align:left"><code>varName.__parent__</code></td></tr></tbody></table><h2 id="3-2-继承funciton的属性"><a href="#3-2-继承funciton的属性" class="headerlink" title="3.2 继承funciton的属性"></a>3.2 继承funciton的属性</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">描述</th><th style="text-align:left">使用方法</th></tr></thead><tbody><tr><td style="text-align:left">arguments</td><td style="text-align:left"><code>不推荐使用</code>，属性代表传入函数的实参，它是一个类数组对象。已经被废弃很多年了，现在推荐的做法是使用函数内部可用的 <code>arguments</code> 对象来访问函数的实参。在函数递归调用的时候（在某一刻同一个函数运行了多次，也就是有多套实参），那么 <code>arguments</code> 属性的值是最近一次该函数调用时传入的实参。如果函数不在执行期间，那么该函数的 <code>arguments</code> 属性的值是 <code>null</code>。</td><td style="text-align:left">objectName.arguments or functionName.arguments</td></tr><tr><td style="text-align:left">arity</td><td style="text-align:left"><code>已废弃</code>，返回一个函数的形参数量，是一个古老的已经没有浏览器支持的属性,你应该使用<code>length</code>属性来代替.。</td><td style="text-align:left">objectName.arity or functionName.arity</td></tr><tr><td style="text-align:left">caller</td><td style="text-align:left"><code>不推荐使用</code>，如果一个函数<code>functionName</code>是在<code>全局作用域</code>内被调用的,则<code>functionName.caller</code>为<code>null</code>,相反,如果一个函数是在另外一个函数作用域内被调用的,则<code>functionName.caller</code>指向调用它的<code>那个函数</code>，该属性的常用形式<code>arguments.callee.caller</code>替代了被废弃的<code>arguments.caller</code>。</td><td style="text-align:left">objectName.caller or functionName.caller</td></tr><tr><td style="text-align:left">displayName</td><td style="text-align:left"><code>不推荐使用</code>，获取函数的显示名称。</td><td style="text-align:left">objectName.displayName or functionName.displayName</td></tr><tr><td style="text-align:left">length</td><td style="text-align:left">指明函数的形参个数，length 是函数对象的一个属性值，指该函数有多少个必须要传入的参数，即形参的个数。形参的数量不包括剩余参数个数，仅包括第一个具有默认值之前的参数个数。与之对比的是，arguments.length 是函数被调用时实际传参的个数。</td><td style="text-align:left">objectName.length or functionName.length</td></tr><tr><td style="text-align:left">name</td><td style="text-align:left">返回一个函数声明的名称，使用<code>new Function(...)</code>语法创建的函数或只是 <code>Function(...)</code> create Function对象及其名称为<code>anonymous</code>。</td><td style="text-align:left">objectName.name or functionName.name</td></tr><tr><td style="text-align:left">prototype</td><td style="text-align:left">函数对象具有属性<code>__proto__</code>，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型。</td><td style="text-align:left">objectName.prototype or functionName.prototype</td></tr></tbody></table><h2 id="3-3-字符串的常用属性值"><a href="#3-3-字符串的常用属性值" class="headerlink" title="3.3  字符串的常用属性值"></a>3.3  字符串的常用属性值</h2><h3 id="3-3-1-constructor"><a href="#3-3-1-constructor" class="headerlink" title="3.3.1 constructor"></a>3.3.1 constructor</h3><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">调取方式</th><th style="text-align:left">属性值</th></tr></thead><tbody><tr><td style="text-align:left">strString</td><td style="text-align:left">strString.constructor</td><td style="text-align:left">[Function: String]</td></tr><tr><td style="text-align:left">oString</td><td style="text-align:left">oString.constructor</td><td style="text-align:left">[Function: String]</td></tr><tr><td style="text-align:left"><code>oString_1</code></td><td style="text-align:left">oString_1.constructor</td><td style="text-align:left">[Function: String]</td></tr><tr><td style="text-align:left"><code>tString_1</code></td><td style="text-align:left">tString_1.constructor</td><td style="text-align:left">[Function: String]</td></tr><tr><td style="text-align:left"><code>tString_2</code></td><td style="text-align:left">tString_2.constructor</td><td style="text-align:left">[Function: String]</td></tr><tr><td style="text-align:left"><code>tString_3</code></td><td style="text-align:left">tString_3.constructor</td><td style="text-align:left">[Function: String]</td></tr><tr><td style="text-align:left"><code>tString_4</code></td><td style="text-align:left">tString_4.constructor</td><td style="text-align:left">[Function: String]</td></tr></tbody></table><h3 id="3-3-2-proto"><a href="#3-3-2-proto" class="headerlink" title="3.3.2 proto"></a>3.3.2 <strong>proto</strong></h3><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">调取方式</th><th style="text-align:left">属性值</th></tr></thead><tbody><tr><td style="text-align:left">strString</td><td style="text-align:left"><code>strString.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left">oString</td><td style="text-align:left"><code>oString.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left"><code>oString_1</code></td><td style="text-align:left"><code>oString_1.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left"><code>tString_1</code></td><td style="text-align:left"><code>tString_1.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left"><code>tString_2</code></td><td style="text-align:left"><code>tString_2.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left"><code>tString_3</code></td><td style="text-align:left"><code>tString_3.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr><tr><td style="text-align:left"><code>tString_4</code></td><td style="text-align:left"><code>tString_4.__proto__</code></td><td style="text-align:left">[String: ‘’]</td></tr></tbody></table><h3 id="3-3-3-length"><a href="#3-3-3-length" class="headerlink" title="3.3.3 length"></a>3.3.3 length</h3><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">调取方式</th><th style="text-align:left">属性值</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">strString</td><td style="text-align:left">strString.length</td><td style="text-align:left">16</td><td style="text-align:left">letter(15)+\s(1)</td></tr><tr><td style="text-align:left">oString</td><td style="text-align:left">oString.length</td><td style="text-align:left">11</td><td style="text-align:left">letter(10)+\s(1)</td></tr><tr><td style="text-align:left"><code>oString_1</code></td><td style="text-align:left">oString_1.length</td><td style="text-align:left">6</td><td style="text-align:left">letter(2)+\s(2)+\u(1)</td></tr><tr><td style="text-align:left"><code>tString_1</code></td><td style="text-align:left">tString_1.length</td><td style="text-align:left">14</td><td style="text-align:left">letter(13)+\s(1)</td></tr><tr><td style="text-align:left"><code>tString_2</code></td><td style="text-align:left">tString_2.length</td><td style="text-align:left">41</td><td style="text-align:left">letter(18)+num(2)+\s(4)+\t(4)+\n(1)</td></tr><tr><td style="text-align:left"><code>tString_3</code></td><td style="text-align:left">tString_3.length</td><td style="text-align:left">25</td><td style="text-align:left">letter(15)+num(4)+\s(4)+sign(1)+\n(1)</td></tr><tr><td style="text-align:left"><code>tString_4</code></td><td style="text-align:left">tString_4.length</td><td style="text-align:left">10</td><td style="text-align:left">char(9)+sign(1)</td></tr></tbody></table><h2 id="3-4-注意事项"><a href="#3-4-注意事项" class="headerlink" title="3.4 注意事项"></a>3.4 注意事项</h2><table><thead><tr><th style="text-align:left">特性名称</th><th style="text-align:left">是否可修改</th></tr></thead><tbody><tr><td style="text-align:left">writable</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">enumerable</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">configurable</td><td style="text-align:left">false</td></tr></tbody></table><blockquote><p>提示</p></blockquote><p>所有 <code>String</code> 的<code>实例</code>都继承自 <code>String.prototype</code>. 任何<code>String.prototype</code>上的改变都会影响到所有的 <code>String</code> 实例。</p><blockquote><p>但是请注意由于每个<code>varName</code>的构造方法不同，所以在<code>instanceof</code>时候的结果不同，<code>instanceof</code> 运算符用来测试一个<code>对象</code>在其<code>原型链</code>中是否存在一个<code>构造函数</code>的 <code>prototype</code> 属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法</span></span><br><span class="line">object <span class="keyword">instanceof</span> <span class="keyword">constructor</span></span><br><span class="line">or object instanceof(<span class="keyword">constructor</span>)</span><br><span class="line">// @param1 object 要检测的对象.</span><br><span class="line">// @param2 <span class="keyword">constructor</span> 某个构造函数</span><br><span class="line">//instanceof 运算符用来检测 <span class="keyword">constructor</span>.prototype 是否存在于参数 object 的原型链上。</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">调取方式</th><th style="text-align:left">属性值</th></tr></thead><tbody><tr><td style="text-align:left">strString</td><td style="text-align:left">strString instanceof(String)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString</td><td style="text-align:left">oString instanceof(String)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><code>tString_1</code></td><td style="text-align:left">tString_1 instanceof(String)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>tString_2</code></td><td style="text-align:left">tString_2 instanceof(String)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>tString_3</code></td><td style="text-align:left">tString_3 instanceof(String)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>tString_4</code></td><td style="text-align:left">tString_4 instanceof(String)</td><td style="text-align:left">false</td></tr></tbody></table><h1 id="4-字符串对象的柔和方法"><a href="#4-字符串对象的柔和方法" class="headerlink" title="4. 字符串对象的柔和方法"></a>4. 字符串对象的柔和方法</h1><h2 id="4-1-HTML相关方法"><a href="#4-1-HTML相关方法" class="headerlink" title="4.1. HTML相关方法"></a>4.1. HTML相关方法</h2><h3 id="4-1-1-概述"><a href="#4-1-1-概述" class="headerlink" title="4.1.1 概述"></a>4.1.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">big()</td><td style="text-align:left"><code>不推荐使用</code>，把字符串显示为大号字体，只在页面中才会有大两个字体号效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">small()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为小号字体，只在页面中才会有小两个字体号效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">blink()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示闪动的字符串，目前没有看到有浏览器支持</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">bold()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示粗体的字符串，只在页面中才会有粗体效果，IE不兼容。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">italics()</td><td style="text-align:left"><code>不推荐使用</code>，把字符串显示为斜体，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">strike()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为加了删除线的字符串，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">fixed()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为打字机文本显示的字符串，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">sub()</td><td style="text-align:left"><code>不推荐使用</code>，把字符串显示为下标，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">sup()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为上标，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">anchor(anchorname)</td><td style="text-align:left"><code>不推荐使用</code>，创建 <code>HTML</code> 锚。将字符串输出为有唯一标识的纯粹<code>a</code>标签，只在页面中才会有效果。</td><td style="text-align:left">@param anchorname 必需，为锚定义名称。如果没有传入参数，则会输出一个<code>name</code>属性为<code>undefined</code>的<code>a</code>标签。</td></tr><tr><td style="text-align:left">link(url)</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为链接，只在页面中才会有效果。如果没有传入参数，则会输出一个href属性为<code>undefined</code>的a标签。</td><td style="text-align:left">@param url必需，规定要链接的 URL。</td></tr><tr><td style="text-align:left">fontcolor(color)</td><td style="text-align:left"><code>不推荐使用</code>，返回指定的颜色的字符串。只在页面中才会有效果如果没有传入参数，则会输出一个<code>color</code>属性为<code>undefined</code>的font标签。</td><td style="text-align:left">@param  color必需。为字符串规定 font-color。该值必须是颜色名(red)、RGB 值(rgb(255,0,0))或者十六进制数(#FF0000)。</td></tr><tr><td style="text-align:left">fontsize(size)</td><td style="text-align:left"><code>不推荐使用</code>， 返回指定的字体大小的字符串。只在页面中才会有效果。如果没有传入参数，则会输出一个<code>size</code>属性为<code>undefined</code>的<code>font</code>标签。</td><td style="text-align:left">@param size 参数必须是从 1 至 7 的数字，数字越大字体越大。</td></tr></tbody></table><h3 id="4-1-2-详细"><a href="#4-1-2-详细" class="headerlink" title="4.1.2 详细"></a>4.1.2 详细</h3><h4 id="1-big"><a href="#1-big" class="headerlink" title="1) big()"></a>1) big()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.big()</td><td style="text-align:left"><code>&lt;big&gt;varName_val&lt;/big&gt;</code></td></tr></tbody></table><h4 id="2-small"><a href="#2-small" class="headerlink" title="2) small()"></a>2) small()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.small()</td><td style="text-align:left"><code>&lt;small&gt;varName_val&lt;/small&gt;</code></td></tr></tbody></table><h4 id="3-blink"><a href="#3-blink" class="headerlink" title="3) blink()"></a>3) blink()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.blink()</td><td style="text-align:left"><code>&lt;blink&gt;varName_val&lt;/blink&gt;</code></td></tr></tbody></table><h4 id="4-bold"><a href="#4-bold" class="headerlink" title="4) bold()"></a>4) bold()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.bold()</td><td style="text-align:left"><code>&lt;b&gt;varName_val&lt;/b&gt;</code></td></tr></tbody></table><h4 id="5-italics"><a href="#5-italics" class="headerlink" title="5) italics()"></a>5) italics()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.italics()</td><td style="text-align:left"><code>&lt;i&gt;varName_val&lt;/i&gt;</code></td></tr></tbody></table><h4 id="6-strike"><a href="#6-strike" class="headerlink" title="6) strike()"></a>6) strike()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.strike()</td><td style="text-align:left"><code>&lt;strike&gt;varName_val&lt;/strike&gt;</code></td></tr></tbody></table><h4 id="7-fixed"><a href="#7-fixed" class="headerlink" title="7) fixed()"></a>7) fixed()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.fixed()</td><td style="text-align:left"><code>&lt;tt&gt;varName_val&lt;/tt&gt;</code></td></tr></tbody></table><h4 id="8-sub"><a href="#8-sub" class="headerlink" title="8) sub()"></a>8) sub()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.sub()</td><td style="text-align:left"><code>&lt;sub&gt;varName_val&lt;/sub&gt;</code></td></tr></tbody></table><h4 id="9-sup"><a href="#9-sup" class="headerlink" title="9) sup()"></a>9) sup()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.sup()</td><td style="text-align:left"><code>&lt;sup&gt;varName_val&lt;/sup&gt;</code></td></tr></tbody></table><h4 id="10-anchor-anchorname"><a href="#10-anchor-anchorname" class="headerlink" title="10) anchor(anchorname)"></a>10) anchor(anchorname)</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.anchor(param1)</td><td style="text-align:left"><code>&lt;a name=&quot;param1&quot;&gt;varName_val&lt;/a&gt;</code></td></tr></tbody></table><h4 id="11-link-url"><a href="#11-link-url" class="headerlink" title="11) link(url)"></a>11) link(url)</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.link(param1)</td><td style="text-align:left"><code>&lt;a href=&quot;param1&quot;&gt;varName_val&lt;/a&gt;</code></td></tr></tbody></table><h4 id="12-fontcolor-color"><a href="#12-fontcolor-color" class="headerlink" title="12) fontcolor(color)"></a>12) fontcolor(color)</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.fontcolor(param1)</td><td style="text-align:left"><code>&lt;font color=&quot;param1&quot;&gt;varName_val&lt;/font&gt;</code></td></tr></tbody></table><h4 id="13-fontsize-size"><a href="#13-fontsize-size" class="headerlink" title="13) fontsize(size)"></a>13) fontsize(size)</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.fontsize(param1)</td><td style="text-align:left"><code>&lt;font size=&quot;param1&quot;&gt;varName_val&lt;/font&gt;</code></td></tr></tbody></table><h2 id="4-2-编码"><a href="#4-2-编码" class="headerlink" title="4.2. 编码"></a>4.2. 编码</h2><h3 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">charAt(index)</td><td style="text-align:left">返回特定位置的字符，不提供参数就返回第一个字符的字符，提供游标值，就返回指定游标的字符</td><td style="text-align:left">@param index 非必需，一个介于0 和字符串长度减1之间的正整数。 (0~varName.length-1)，如果不是一个数值，则默认为 0。</td></tr><tr><td style="text-align:left">charCodeAt(index)</td><td style="text-align:left">返回0到65535之间的整数，表示给定索引处的<code>UTF-16</code>代码单元 (在 <code>Unicode</code> 编码单元表示一个单一的 <code>UTF-16</code> 编码单元的情况下，<code>UTF-16</code> 编码单元匹配 <code>Unicode</code> 编码单元。但在——例如 <code>Unicode</code> 编码单元 &gt; <code>0x10000</code> 的这种——不能被一个 <code>UTF-16</code> 编码单元单独表示的情况下，只能匹配 <code>Unicode</code> 代理对的第一个编码单元) 。</td><td style="text-align:left">@param index 一个大于等于 0，小于字符串长度的整数。(0~varName.length-1)，如果不是一个数值，则默认为 0。</td></tr><tr><td style="text-align:left">codePointAt(pos)</td><td style="text-align:left"><code>测试中</code>， 返回使用UTF-16编码的给定位置的值的非负整数。</td><td style="text-align:left">@param pos 这个字符串中需要转码的元素的位置。</td></tr><tr><td style="text-align:left">normalize([form])</td><td style="text-align:left"><code>测试中</code>， 返回调用字符串值的Unicode标准化形式。</td><td style="text-align:left">@param form 四种 Unicode 正规形式 “NFC”, “NFD”, “NFKC”, 以及 “NFKD” 其中的一个, 默认值为 “NFC”.</td></tr><tr><td style="text-align:left">fromCharCode(num1, …, numN)</td><td style="text-align:left">返回一个字符串，而不是一个 String 对象。由于 fromCharCode 是 String 的静态方法，所以应该像这样使用：String.fromCharCode()，而不是作为你创建的 String 对象的方法。</td><td style="text-align:left">@param num1, …, numN 一组序列数字，表示 Unicode 值。</td></tr><tr><td style="text-align:left">fromCodePoint(num1, …, numN)</td><td style="text-align:left"><code>不推荐使用</code>， 返回使用 Unicode 编码创建的字符串，如果传入无效的 Unicode 编码，将会抛出一个RangeError (例如： “RangeError: NaN is not a valid code point”)。</td><td style="text-align:left">@param num1, …, numN 一组序列数字，表示 Unicode 值。</td></tr></tbody></table><h3 id="4-2-2-详细"><a href="#4-2-2-详细" class="headerlink" title="4.2.2 详细"></a>4.2.2 详细</h3><h4 id="1-charAt-index"><a href="#1-charAt-index" class="headerlink" title="1) charAt(index)"></a>1) charAt(index)</h4><p>字符串中的字符从左向右索引，第一个字符的索引值为<code>0</code>，最后一个字符（假设该字符位于字符串 <code>varName</code> 中）的索引值为<code>varName.length - 1</code>。 如果指定的<code>index</code>值超出了该范围，则返回一个空字符串。而且本方法不管你传入多少参数，这边只会处理传入的第一个参数值，如果传进来为小数，这个方法是向上取整，举个栗子，你传入的值是<code>1.2</code>,这边就认为你传入的是<code>2</code>。</p><p>但是请注意，这个方法只能检测打印包含基本多文种平面（BMP）中的字符，如果字符串中包含的内容不在BMP中，打印的结果就会乱码。</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.charAt()</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(oString.length-1)</td><td style="text-align:left">d</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.charAt(1.2)</td><td style="text-align:left">e</td></tr><tr><td style="text-align:left">oString.charAt(1,2,3)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(-2)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">oString.charAt(oString)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(true)</td><td style="text-align:left">e</td></tr><tr><td style="text-align:left">oString.charAt(false)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(null)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(undefined)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(NaN)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(oo)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(oNum)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">oString.charAt(oArray)</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">oString.charAt(oDate)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">oString.charAt(oString.length)</td><td style="text-align:left">空字符串</td></tr></tbody></table><h4 id="2-charCodeAt"><a href="#2-charCodeAt" class="headerlink" title="2) charCodeAt()"></a>2) charCodeAt()</h4><p>Unicode 编码单元（code points）的范围从 0 到 1,114,111（0x10FFFF）。开头的 128 个 Unicode 编码单元和 ASCII 字符编码一样。关于 Unicode 的更多信息，可查看 JavaScript Guide。</p><p>注意，<code>charCodeAt</code> 总是返回一个小于 65,536 的值。这是因为高位编码单元（higher code point）使用一对（低位编码（lower valued））代理伪字符（”surrogate” pseudo-characters）来表示，从而构成一个真正的字符。因此，为了查看或复制（reproduce）65536 及以上编码字符的完整字符，需要在获取 <code>charCodeAt(i)</code> 的值的同时获取 <code>charCodeAt(i+1)</code> 的值（如同查看/reproducing 拥有两个字符的字符串一样），或者改为获取 codePointAt(i) 的值。</p><p>如果指定的 index 小于 0 或不小于字符串的长度，则 <code>charCodeAt</code> 返回 <code>NaN</code>。而且本方法不管你传入多少参数，这边只会处理传入的第一个参数值，如果传进来为小数，这个方法是向上取整，举个栗子，你传入的值是<code>1.2</code>,这边就认为你传入的是<code>2</code>。</p><p>返回值是一表示给定索引处（<code>varName</code>中<code>index</code>索引处）字符的 <code>UTF-16</code> 代码单元值的数字；如果索引超出范围，则返回 <code>NaN</code>。如果你想要整个代码点的值，使用 <code>codePointAt()</code>。</p><p>向后兼容：在历史版本中（如 JavaScript 1.2），<code>charCodeAt</code> 返回一个数字，表示给定 <code>index</code> 处字符的 <code>ISO-Latin-1</code> 编码值。<code>ISO-Latin-1</code>编码集范围从 0 到 255。开头的 0 到 127 直接匹配 <code>ASCII</code> 字符集。</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.charCodeAt()</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(oString.length-1)</td><td style="text-align:left">100</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.charCodeAt(1.2)</td><td style="text-align:left">101</td></tr><tr><td style="text-align:left">oString.charCodeAt(1,2,3)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(-2)</td><td style="text-align:left">NaN</td></tr><tr><td style="text-align:left">oString.charCodeAt(oString)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(true)</td><td style="text-align:left">101</td></tr><tr><td style="text-align:left">oString.charCodeAt(false)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(null)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(undefined)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(NaN)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(oo)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(oNum)</td><td style="text-align:left">NaN</td></tr><tr><td style="text-align:left">oString.charCodeAt(oArray)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.charCodeAt(oDate)</td><td style="text-align:left">NaN</td></tr><tr><td style="text-align:left">oString.charCodeAt(oString.length)</td><td style="text-align:left">NaN</td></tr></tbody></table><blockquote><p>常用的编码表</p></blockquote><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">对应的unicode值</th></tr></thead><tbody><tr><td style="text-align:left">\t(水平制表符)</td><td style="text-align:left">9</td></tr><tr><td style="text-align:left">\n(换行符)</td><td style="text-align:left">10</td></tr><tr><td style="text-align:left">\s(空格)</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">!(感叹号)</td><td style="text-align:left">33</td></tr><tr><td style="text-align:left">“</td><td style="text-align:left">34</td></tr><tr><td style="text-align:left">#</td><td style="text-align:left">35</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">36</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">37</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">38</td></tr><tr><td style="text-align:left">‘</td><td style="text-align:left">39</td></tr><tr><td style="text-align:left">(</td><td style="text-align:left">40</td></tr><tr><td style="text-align:left">)</td><td style="text-align:left">41</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">42</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">43</td></tr><tr><td style="text-align:left">,</td><td style="text-align:left">44</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">45</td></tr><tr><td style="text-align:left">.(英文句号)</td><td style="text-align:left">46</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">47</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">48</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">49</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">50</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">51</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">52</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">53</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">54</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">55</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">56</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">57</td></tr><tr><td style="text-align:left">:</td><td style="text-align:left">58</td></tr><tr><td style="text-align:left">;</td><td style="text-align:left">59</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">60</td></tr><tr><td style="text-align:left">=</td><td style="text-align:left">61</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">62</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">63</td></tr><tr><td style="text-align:left">@</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">65</td></tr><tr><td style="text-align:left">Z</td><td style="text-align:left">90</td></tr><tr><td style="text-align:left">[</td><td style="text-align:left">91</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">92</td></tr><tr><td style="text-align:left">]</td><td style="text-align:left">93</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">94</td></tr><tr><td style="text-align:left">_</td><td style="text-align:left">95</td></tr><tr><td style="text-align:left">`</td><td style="text-align:left">96</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">97</td></tr><tr><td style="text-align:left">z</td><td style="text-align:left">122</td></tr><tr><td style="text-align:left">{</td><td style="text-align:left">123</td></tr><tr><td style="text-align:left">(中竖线)</td><td style="text-align:left">124</td></tr><tr><td style="text-align:left">}</td><td style="text-align:left">125</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">126</td></tr></tbody></table><h4 id="3-codePointAt-pos"><a href="#3-codePointAt-pos" class="headerlink" title="3) codePointAt(pos)"></a>3) codePointAt(pos)</h4><p>返回值是在字符串中的给定索引的编码单元体现的数字，如果指定的 <code>index</code> 小于 0 或不小于字符串的长度则返回 <code>undefined</code> 。如果，则 <code>codePointAt</code> 返回 <code>undefined</code>。而且本方法不管你传入多少参数，这边只会处理传入的第一个参数值，如果传进来为小数，这个方法是向上取整，举个栗子，你传入的值是<code>1.2</code>,这边就认为你传入的是<code>2</code>。</p><p>如果在索引处开始没有<code>UTF-16</code> 代理对，将直接返回在那个索引处的编码单元。可以将<code>codePointAt()</code>看成更完整版本的<code>charCodeAt()</code>，因为对于<code>BMP</code>中的所有字符，这俩方法执行结果相同，只有传递<code>非BMP</code>的码位作用参数时，二者执行结果才有可能不同。</p><p><code>codePointAt()</code>对于<code>非BMP</code>会返回完整的码位，即使这个码位包含多个编码单元，但是<code>charCodeAt()</code>仅仅返回位置<code>pos</code>处的第一个编码单元。</p><p><code>Surrogate Pair</code>是<code>UTF-16</code>中用于扩展字符而使用的编码方式，是一种采用四个字节(两个<code>UTF-16</code>编码)来表示一个字符，称作代理对。</p><p>但是请注意，由于<code>codePointAt()</code>是ES5开始提出来的，所以在<code>Safari</code>浏览器不支持，其他浏览器比较新的版本才支持。</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.codePointAt()</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(oString.length-1)</td><td style="text-align:left">100</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.codePointAt(1.2)</td><td style="text-align:left">101</td></tr><tr><td style="text-align:left">oString.codePointAt(1,2,3)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(-2)</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">oString.codePointAt(oString)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(true)</td><td style="text-align:left">101</td></tr><tr><td style="text-align:left">oString.codePointAt(false)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(null)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(undefined)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(NaN)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(oo)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(oNum)</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">oString.codePointAt(oArray)</td><td style="text-align:left">104</td></tr><tr><td style="text-align:left">oString.codePointAt(oDate)</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">oString.codePointAt(oString.length)</td><td style="text-align:left">undefined</td></tr></tbody></table><h4 id="4-normalize-form"><a href="#4-normalize-form" class="headerlink" title="4) normalize([form])"></a>4) normalize([form])</h4><table><thead><tr><th style="text-align:left">参数缩写</th><th style="text-align:left">参数全称</th><th style="text-align:left">参数中文含义</th></tr></thead><tbody><tr><td style="text-align:left">NFC</td><td style="text-align:left">Normalization Form Canonical Composition</td><td style="text-align:left">规范化形式规范组合</td></tr><tr><td style="text-align:left">NFD</td><td style="text-align:left">Normalization Form Canonical Decomposition</td><td style="text-align:left">规范化形式规范分解</td></tr><tr><td style="text-align:left">NFKC</td><td style="text-align:left">Normalization Form Compatibility Composition</td><td style="text-align:left">规范化形式兼容性组合</td></tr><tr><td style="text-align:left">NFKD</td><td style="text-align:left">Normalization Form Compatibility Decomposition</td><td style="text-align:left">规范化形式兼容性分解</td></tr></tbody></table><blockquote><p>警告</p></blockquote><p>如果给 <code>form</code> 传入了非法的参数值, 则会直接抛出 <code>RangeError</code> 异常，<code>RangeError: The normalization form should be one of NFC, NFD, NFKC, NFKD</code>，不会自行处理，是一个很高冷的方法哦！</p><p>而且这个和<code>DOM</code>方法中的<code>normalize()</code>没有任何关联哦，不要弄混了。</p><p>如果你字符串中没有什么<code>非BMP</code>的内容，那么你使用这个方法其实没有什么效果，返回的就是<code>varName</code>的<code>varName_val</code>没有做什么改变的。目前我主要测试的样例使用这个方法之后，没有什么直观的感受，如果之后遇见了不同的效果，我再来补充。</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.normalize()</td><td style="text-align:left">varName_val</td></tr><tr><td style="text-align:left">varName.normalize(“NFC”)</td><td style="text-align:left">varName_val</td></tr><tr><td style="text-align:left">varName.normalize(“NFD”)</td><td style="text-align:left">varName_val</td></tr><tr><td style="text-align:left">varName.normalize(“NFKC”)</td><td style="text-align:left">varName_val</td></tr><tr><td style="text-align:left">varName.normalize(“NFKD”)</td><td style="text-align:left">varName_val</td></tr></tbody></table><h4 id="5-fromCharCode-num1-…-numN"><a href="#5-fromCharCode-num1-…-numN" class="headerlink" title="5) fromCharCode(num1, …, numN)"></a>5) fromCharCode(num1, …, numN)</h4><p>尽管绝大部分常用的 <code>Unicode</code> 值可以用一个 <code>16-bit</code> 数字表示（正如 <code>JavaScript</code> 标准化过程早期），并且对于绝大部分值 <code>fromCharCode()</code> 返回一个字符（即对于绝大部分字符 <code>UCS-2</code> 值是 <code>UTF-16</code> 的子集），但是为了处理所有的 <code>Unicode</code> 值（至 <code>21 bits</code>），只用 <code>fromCharCode()</code> 是不足的。<br>由于高位编码字符是用两个低位编码（<code>lower value</code>）表示形成的一个字符，因此<code>String.fromCodePoint()</code> （ES6 草案的一部分）被用来返回这样一对<code>低位编码</code>，从而可以完全表示这些<code>高位编码字符</code>。</p><p>如果传进来参数为小数，这个方法是向上取整，举个栗子，你传入的值是<code>1.2</code>,这边就认为你传入的是<code>2</code>，不传参数的时候或者传一些不能识别的参数会方法返回<code>空字符串</code>。</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">objectName.fromCharCode(65)</td><td style="text-align:left">A</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">objectName.fromCharCode()</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(65.2)</td><td style="text-align:left">A</td></tr><tr><td style="text-align:left">objectName.fromCharCode(65.8,66,67)</td><td style="text-align:left">ABC</td></tr><tr><td style="text-align:left">objectName.fromCharCode(-2)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(oString)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(true)</td><td style="text-align:left">乱码</td></tr><tr><td style="text-align:left">objectName.fromCharCodet(false)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(null)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(undefined)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(NaN)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(oo)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(oNum)</td><td style="text-align:left">D</td></tr><tr><td style="text-align:left">objectName.fromCharCode(oArray)</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCharCode(oDate)</td><td style="text-align:left">乱码</td></tr></tbody></table><h4 id="6-fromCodePoint-num1-…-numN"><a href="#6-fromCodePoint-num1-…-numN" class="headerlink" title="6) fromCodePoint(num1, …, numN)"></a>6) fromCodePoint(num1, …, numN)</h4><p>因为<code>fromCodePoint()</code>是<code>String</code>的一个静态方法，所以只能通过 <code>String.fromCodePoint()</code>这样的方式来使用，不能在你创建的<code>String</code>对象实例上直接调用。</p><p>相当是<code>fromCharCode()</code>升级版，在处理<code>非BMP</code>内容功能包容性更强些，但是对传入的参数要求更严格一些。</p><blockquote><p>警告</p></blockquote><p>如果传入无效的 <code>Unicode</code> 编码，将会抛出一个<code>RangeError</code> (例如： <code>RangeError: NaN is not a valid code point</code>)。比如像小数，科学计数，undefined，负数，字符串，数组，时间戳等等，如果传入这些值，方法体会直接报错，不会再执行下面的，不会自行处理，是一个很高冷的方法哦！</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">objectName.fromCodePoint(65)</td><td style="text-align:left">A</td></tr><tr><td style="text-align:left">objectName.fromCodePoint()</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(oNum)</td><td style="text-align:left">D</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(true)</td><td style="text-align:left">乱码</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(false)</td><td style="text-align:left">乱码</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(null)</td><td style="text-align:left">乱码</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">objectName.fromCodePoint(65.2)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(65.8,66,67)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(-2)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(oString)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(undefined)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(NaN)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(oo)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(oArray)</td><td style="text-align:left">RangeError</td></tr><tr><td style="text-align:left">objectName.fromCodePoint(oDate)</td><td style="text-align:left">RangeError</td></tr></tbody></table><h2 id="4-3-检索"><a href="#4-3-检索" class="headerlink" title="4.3. 检索"></a>4.3. 检索</h2><h3 id="4-3-1-概述"><a href="#4-3-1-概述" class="headerlink" title="4.3.1 概述"></a>4.3.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">indexOf(searchValue[, fromIndex])</td><td style="text-align:left">从字符串对象中返回首个被发现的给定值的索引值开始在 fromIndex进行搜索。如果未找到该值，则返回-1。</td><td style="text-align:left">@param searchValue 一个字符串表示被查找的值。@param fromIndex 可选 表示调用该方法的字符串中开始查找的位置。可以是任意整数。默认值为 0。如果 fromIndex &lt; 0 则查找整个字符串（如同传进了 0）。如果 fromIndex &gt;= varName.length，则该方法返回 -1，除非被查找的字符串是一个空字符串，此时返回 varName.length。</td></tr><tr><td style="text-align:left">lastIndexOf(searchValue[, fromIndex])</td><td style="text-align:left">返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。从该字符串的后面向前查找，从 fromIndex 处开始。</td><td style="text-align:left">@param searchValue 一个字符串，表示被查找的值。@param fromIndex 从调用该方法字符串的此位置处开始查找。可以是任意整数。默认值为 str.length。如果为负值，则被看作 0。如果 fromIndex &gt; str.length，则 fromIndex 被看作 str.length。</td></tr><tr><td style="text-align:left">includes(searchString[, position])</td><td style="text-align:left"><code>不推荐使用</code>，判断一个字符串是否包含在另一个字符串中，根据情况返回true或false。</td><td style="text-align:left">@param searchString 要在此字符串中搜索的字符串。@param position 可选。从当前字符串的哪个索引位置开始搜寻子字符串；默认值为0。</td></tr><tr><td style="text-align:left">startsWith(searchString [, position])</td><td style="text-align:left"><code>不推荐使用</code>，判断字符串的起始位置是否匹配其他字符串中的字符。</td><td style="text-align:left">@param searchString 要搜索的子字符串。@param position 在 varName 中搜索 searchString 的开始位置，默认值为 0，也就是真正的字符串开头处。</td></tr><tr><td style="text-align:left">endsWith(searchString [, position])</td><td style="text-align:left"><code>不推荐使用</code>， 判断一个字符串的结尾是否包含其他字符串中的字符。</td><td style="text-align:left">@param searchString 要搜索的子字符串。@param position 在 varName 中搜索 searchString 的结束位置，默认值为 varName.length，也就是真正的字符串结尾处。</td></tr><tr><td style="text-align:left">search(regexp)</td><td style="text-align:left">对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引。否则，返回 -1。</td><td style="text-align:left">@param regexp 一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象。</td></tr><tr><td style="text-align:left">match(regexp)</td><td style="text-align:left">将字符串与正则表达式匹配，并返回一个包含该搜索结果的数组。返回值array，一个包含了整个匹配结果以及任何括号捕获的匹配结果的 Array ；如果没有匹配项，则返回 null 。</td><td style="text-align:left">@param regexp 一个正则表达式对象。如果传入一个非正则表达式对象，则会隐式地使用 new RegExp(obj) 将其转换为一个 RegExp 。如果你未提供任何参数，直接使用 match() ，那么你会得到一个包含空字符串的 Array ：[“”] 。</td></tr></tbody></table><h3 id="4-3-2-详细"><a href="#4-3-2-详细" class="headerlink" title="4.3.2 详细"></a>4.3.2 详细</h3><h4 id="1-indexOf-searchValue-fromIndex"><a href="#1-indexOf-searchValue-fromIndex" class="headerlink" title="1) indexOf(searchValue[, fromIndex])"></a>1) indexOf(searchValue[, fromIndex])</h4><ul><li>指定值的第一次出现的索引; 如果没有找到 -1。</li><li>对于字符串中原本包含空格，tab缩进，tab键和空格键产生的空白占位格是不同的，<code>indexOf方法</code>会进行严格的匹配。</li><li>对于字符串中原本包含字母，<code>indexOf方法</code>会进行严格的大小写匹配。</li><li>对于字符串中包含的BMP字符，会严格匹配编码格式。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.indexOf(“ “)</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“helLo”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,3)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_1.indexOf(“\uD87E\uDC04”)</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">oString_1.indexOf(“你”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_1.normalize(“NFC”).indexOf(“你”)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.indexOf(“  “)//空格键产生的空白占位格</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">tString_2.indexOf(“    “)//tab键产生的空白占位格</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">oString_1.indexOf(“sss”)</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>第一个参数错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，加没加双引号都可以被正常检测出来。</li><li>布尔值字符串可以判断是否包含布尔值对象。</li><li>自己判断是否完全包含自己是可以正常检测的。</li><li>传入空字符串的时候，<code>indexOf方法</code>会直接返回<code>0</code>。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.indexOf(true)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.indexOf(“true”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.indexOf(oBool)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.indexOf(false)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.indexOf(“false”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.indexOf(oBool)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“null”.indexOf(null)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“null”.indexOf(“null”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.indexOf(undefined)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.indexOf(“undefined”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.indexOf(NaN)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.indexOf(“NaN”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(oString)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(true)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(false)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(null)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(undefined)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(NaN)</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>第二个参数错误示例</p></blockquote><ul><li>索引值的范围是<code>0~varName.length-1</code>。</li><li>传入的数字是向下取整的，只取数字的整数部分，举个栗子，比如传入0.1-0.9，<code>indexOf方法</code>是当作<code>0</code>进行处理。</li><li>对于传入的负值整数，<code>indexOf方法</code>是当作<code>0</code>进行处理。</li><li>对于传入的<code>String</code>，<code>Object</code>和<code>Array</code>类型的值，<code>indexOf方法</code>是当作<code>0</code>进行处理。</li><li>对于<code>Boolean</code>类型的值，<code>indexOf方法</code>会将<code>true</code>转化成<code>1</code>，<code>false</code>转化成<code>0</code>，进行处理。</li><li>对于传入的<code>Date</code>类型的值，<code>indexOf方法</code>会自动转成对应的时间戳数值，进行检索匹配。</li><li>对于<code>Number.NaN</code>，<code>Number.MIN_VALUE</code>和<code>Number.NEGATIVE_INFINITY</code>，<code>indexOf方法</code>是当作<code>0</code>进行处理。</li><li>对于<code>Number.MAX_VALUE</code>和<code>Number.POSITIVE_INFINITY</code>，<code>indexOf方法</code>是当作超出<code>varName.length</code>进行处理。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.indexOf(“hell”,0.1)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,0.5)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,0.8)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,1)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,1.1)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,1.5)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,1.8)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,oString.length)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,-2)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,-3)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,true)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,false)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,”true”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,”false”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,oo)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,oBool)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,oArray)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,oDate)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,Number.NaN)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,Number.MAX_VALUE)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,Number.MIN_VALUE)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,Number.NEGATIVE_INFINITY)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.indexOf(“hell”,Number.POSITIVE_INFINITY)</td><td style="text-align:left">-1</td></tr></tbody></table><h4 id="2-lastIndexOf-searchValue-fromIndex"><a href="#2-lastIndexOf-searchValue-fromIndex" class="headerlink" title="2) lastIndexOf(searchValue[, fromIndex])"></a>2) lastIndexOf(searchValue[, fromIndex])</h4><ul><li>对于字符串中原本包含空格，tab缩进，tab键和空格键产生的空白占位格是不同的，<code>lastIndexOf方法</code>会进行严格的匹配。</li><li>对于字符串中原本包含字母，<code>lastIndexOf方法</code>会进行严格的大小写匹配。</li><li>对于字符串中包含的BMP字符，会严格匹配编码格式。</li><li>与<code>indexOf方法</code>相比，<code>lastIndexOf方法</code>有更好的容错性，会对第二个参数做更多的处理。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.lastIndexOf(“ “)</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“helLo”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,3)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_1.lastIndexOf(“\uD87E\uDC04”)</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">oString_1.lastIndexOf(“你”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_1.normalize(“NFC”).lastIndexOf(“你”)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.lastIndexOf(“  “)//空格键产生的空白占位格</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">tString_2.lastIndexOf(“    “)//tab键产生的空白占位格</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">oString_1.lastIndexOf(“sss”)</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>第一个参数错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，加没加双引号都可以被正常检测出来。</li><li>布尔值字符串可以判断是否包含布尔值对象。</li><li>自己判断是否完全包含自己是可以正常检测的。</li><li>传入空字符串的时候，<code>lastIndexOf方法</code>会直接返回<code>varName.length</code>。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.lastIndexOf(true)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.lastIndexOf(“true”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.lastIndexOf(oBool)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.lastIndexOf(false)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.lastIndexOf(“false”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.lastIndexOf(oBool)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“null”.lastIndexOf(null)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“null”.lastIndexOf(“null”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.lastIndexOf(undefined)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.lastIndexOf(“undefined”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.lastIndexOf(NaN)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.lastIndexOf(“NaN”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“”)</td><td style="text-align:left">11</td></tr><tr><td style="text-align:left">oString.lastIndexOf(oString)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(true)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.lastIndexOf(false)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.lastIndexOf(null)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.lastIndexOf(undefined)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.lastIndexOf(NaN)</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>第二个参数错误示例</p></blockquote><ul><li>索引值的范围是<code>1~varName.length</code>。</li><li>传入的大于<code>0</code>的数字是向下取整的，只取数字的整数部分，举个栗子，比如传入1.1-1.9，<code>lastIndexOf方法</code>是当作<code>1</code>进行处理。</li><li>对于传入的<code>0</code>和负值整数，<code>lastIndexOf方法</code>是当作<code>1</code>进行处理。</li><li>对于传入的<code>String</code>，<code>Object</code>和<code>Array</code>类型的值，<code>lastIndexOf方法</code>是当作<code>1</code>进行处理。</li><li>对于<code>Boolean</code>类型的值，<code>indexOf方法</code>会将<code>true</code>转化成<code>1</code>，<code>false</code>转化成<code>0</code>，进行处理。</li><li>对于传入的<code>Date</code>类型的值，<code>lastIndexOf方法</code>会自动转成对应的时间戳数值，进行检索匹配。</li><li>对于<code>Number.NaN</code>，<code>Number.MIN_VALUE</code>和<code>Number.NEGATIVE_INFINITY</code>，<code>indexOf方法</code>是当作<code>1</code>进行处理。</li><li>对于<code>Number.MAX_VALUE</code>和<code>Number.POSITIVE_INFINITY</code>，<code>indexOf方法</code>是当作<code>varName.length</code>进行处理。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.lastIndexOf(“hell”,0.1)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,0.5)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,0.8)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,1)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,1.1)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,1.5)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,1.8)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,oString.length)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,-2)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,-3)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,true)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,false)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,”true”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,”false”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,oo)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,oBool)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,oArray)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,oDate)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,Number.NaN)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,Number.MAX_VALUE)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,Number.MIN_VALUE)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,Number.NEGATIVE_INFINITY)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.lastIndexOf(“hell”,Number.POSITIVE_INFINITY)</td><td style="text-align:left">0</td></tr></tbody></table><h4 id="3-includes-searchString-position"><a href="#3-includes-searchString-position" class="headerlink" title="3) includes(searchString[, position])"></a>3) includes(searchString[, position])</h4><p>这个方法已经被加入到 <code>ECMAScript 6</code>标准中，但未必在所有的<code>JavaScript</code>实现中都可以使用。</p><p>在进行内容匹配的时候，这个方法是区分大小写的。</p><p>在 <code>Firefox 18 - 39</code>中，这个方法的名称叫<code>contains()</code>。由于下面的理由，在<code>bug 1102219</code>中，它被重命名为<code>includes()</code> ：</p><p>据报道，在<code>Firefox 17</code>上，一些使用<code>MooTools 1.2</code>的网站会崩溃掉。这个版本的<code>MooTools</code>会检查函数<code>String.prototype.contains()</code>是否存在，如果不存在的话，<code>MooTools</code>就添加它自己的函数。 通过在<code>Firefox 17</code>中引入这个函数，检查更改的行为在一定程度上导致了基于<code>MooTools</code>的<code>String.prototype.contains()</code>函数的代码实现中断。结果是，当<code>MooTools</code>的拓展导致<code>MooTools 1.2.6</code>版本的发布，此实现在<code>Firefox 17</code>中不可用和<code>String.prototype.contains()</code>在随后一个版本<code>Firefox 18</code>上是可用的。</p><p><code>MooTools 1.3</code>会强制使用它自己版本的函数<code>String.prototype.contains()</code>，因此，依赖它的网站不会崩溃掉。然而，你应该注意此方法在<code>MooTools 1.3</code> 签名和<code>ECMAScript 6</code> 签名中的不同（在第二个参数）。后来，为了与<code>ES6</code>标准一致在<code>MooTools 1.5</code>版本及以上更改了签名。</p><ul><li>对于字符串中原本包含空格，tab缩进，tab键和空格键产生的空白占位格是不同的，<code>includes方法</code>会进行严格的匹配。</li><li>对于字符串中原本包含字母，<code>includes方法</code>会进行严格的大小写匹配。</li><li>对于字符串中包含的BMP字符，会严格匹配编码格式。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.includes(“ “)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“lLo”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,3)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString_1.includes(“\uD87E\uDC04”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString_1.includes(“你”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString_1.normalize(“NFC”).includes(“你”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">tString_2.includes(“  “)//空格键产生的空白占位格</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">tString_2.includes(“    “)//tab键产生的空白占位格</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString_1.includes(“sss”)</td><td style="text-align:left">false</td></tr></tbody></table><blockquote><p>第一个参数错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，加没加双引号都可以被正常检测出来。</li><li>布尔值字符串可以判断是否包含布尔值对象。</li><li>自己判断是否完全包含自己是可以正常检测的。</li><li>contains()已经废弃。</li><li>传入空字符串的时候，<code>includes方法</code>会直接返回<code>true</code>。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.includes(true)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“true”.includes(“true”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“true”.includes(oBool)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.includes(false)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.includes(“false”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.includes(oBool)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">“null”.includes(null)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“null”.includes(“null”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“undefined”.includes(undefined)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“undefined”.includes(“undefined”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“NaN”.includes(NaN)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“NaN”.includes(“NaN”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(oString)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">varName.contains()</td><td style="text-align:left">直接报错</td></tr></tbody></table><blockquote><p>第二个参数错误示例</p></blockquote><ul><li>索引值的范围是<code>0~varName.length-1</code>。</li><li>传入的数字是向下取整的，只取数字的整数部分，举个栗子，比如传入2.1-2.9，<code>includes方法</code>是当作<code>2</code>进行处理。</li><li>对于传入的负值整数，<code>includes方法</code>是当作<code>0</code>进行处理。</li><li>对于传入的<code>String</code>，<code>Object</code>，<code>Array</code>和<code>Boolean</code>类型的值，<code>includes方法</code>是当作<code>0</code>进行处理。</li><li>对于传入的<code>Date</code>类型的值，<code>includes方法</code>会自动转成对应的时间戳数值，进行检索匹配。</li><li>对于<code>Number.NaN</code>，<code>Number.MIN_VALUE</code>和<code>Number.NEGATIVE_INFINITY</code>，<code>includes方法</code>是当作<code>0</code>进行处理。</li><li>对于<code>Number.MAX_VALUE</code>和<code>Number.POSITIVE_INFINITY</code>，<code>includes方法</code>是当作超出<code>varName.length</code>进行处理。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.includes(“llo”,2.1)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,2.5)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,2.8)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,3)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,3.1)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,3.5)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,3.8)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,oString.length)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,-2)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,-3)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,true)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,false)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,”true”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,”false”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,oo)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,oBool)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,oArray)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,oDate)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,Number.NaN)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,Number.MAX_VALUE)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.includes(“llo”,Number.MIN_VALUE)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,Number.NEGATIVE_INFINITY)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.includes(“llo”,Number.POSITIVE_INFINITY)</td><td style="text-align:left">false</td></tr></tbody></table><h4 id="4-startsWith-searchString-position"><a href="#4-startsWith-searchString-position" class="headerlink" title="4) startsWith(searchString [, position])"></a>4) startsWith(searchString [, position])</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.startsWith(“hell”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“ell”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“ell”,1)</td><td style="text-align:left">true</td></tr></tbody></table><blockquote><p>第一个参数错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，加没加双引号都可以被正常检测出来。</li><li>布尔值字符串可以判断是否包含布尔值对象。</li><li>自己判断是否完全包含自己是可以正常检测的。</li><li>传入空字符串的时候，<code>startsWith方法</code>会直接返回<code>true</code>。</li><li>对于特殊的字面量，<code>true</code>，<code>false</code>，<code>null</code>，<code>undefined</code>和<code>NaN</code>，<code>startsWith方法</code>会当作普通字符串进行完全匹配</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.startsWith(true)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“true”.startsWith(“true”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“true”.startsWith(oBool)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.startsWith(false)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.startsWith(“false”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.startsWith(oBool)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">“null”.startsWith(null)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“null”.startsWith(“null”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“undefined”.startsWith(undefined)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“undefined”.startsWith(“undefined”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“NaN”.startsWith(NaN)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“NaN”.startsWith(“NaN”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(oString)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(true)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(false)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(null)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(undefined)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(NaN)</td><td style="text-align:left">false</td></tr></tbody></table><blockquote><p>第二个参数错误示例</p></blockquote><ul><li>索引值的范围是<code>0~varName.length-1</code>。</li><li>传入的数字是向下取整的，只取数字的整数部分，举个栗子，比如传入0.1-0.9，<code>startsWith方法</code>是当作<code>0</code>进行处理。</li><li>对于传入的负值整数，<code>startsWith方法</code>是当作<code>0</code>进行处理，<code>startsWith方法</code>是当作<code>0</code>进行处理，相当于就是从字符串的索引值为<code>0</code>的到索引值为<code>varName.length-1</code>中间的字符串，检索开头是不是对应的传入的字符串。</li><li>对于传入的<code>String</code>，<code>Object</code>，<code>Array</code>和<code>Boolean</code>类型的值，<code>startsWith方法</code>是当作<code>0</code>进行处理，相当于就是从字符串的索引值为<code>0</code>的到索引值为<code>varName.length-1</code>中间的字符串，检索开头是不是对应的传入的字符串。</li><li>对于传入的<code>Date</code>类型的值，<code>startsWith方法</code>会自动转成对应的时间戳数值，相当于就是从字符串的索引值为<code>varName.length</code>的到索引值为<code>varName.length</code>中间的字符串，检索开头是不是对应的传入的字符串。</li><li>对于<code>Number.NaN</code>，<code>Number.MIN_VALUE</code>和<code>Number.NEGATIVE_INFINITY</code>，<code>startsWith方法</code>是当作<code>0</code>进行处理，相当于就是从字符串的索引值为<code>0</code>的到索引值为<code>varName.length-1</code>中间的字符串，检索开头是不是对应的传入的字符串。</li><li>对于<code>Number.MAX_VALUE</code>和<code>Number.POSITIVE_INFINITY</code>，<code>startsWith方法</code>是当作超出<code>varName.length</code>进行处理，相当于就是从字符串的索引值为<code>varName.length</code>的到索引值为<code>varName.length</code>中间的字符串，检索开头是不是对应的传入的字符串。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.startsWith(“hell”,10.1)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,10.5)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,10.8)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,11)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,11.1)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,11.5)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,11.8)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,-10)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,-11)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,true)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,false)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,”true”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,”false”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,oo)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,oBool)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,oArray)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,oDate)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,Number.NaN)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,Number.MAX_VALUE)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,Number.MIN_VALUE)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,Number.NEGATIVE_INFINITY)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.startsWith(“hell”,Number.POSITIVE_INFINITY)</td><td style="text-align:left">true</td></tr></tbody></table><h4 id="5-endsWith-searchString-position"><a href="#5-endsWith-searchString-position" class="headerlink" title="5) endsWith(searchString [, position])"></a>5) endsWith(searchString [, position])</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.endsWith(“world”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“worl”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“worl”,oString.length-1)</td><td style="text-align:left">true</td></tr></tbody></table><blockquote><p>第一个参数错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，加没加双引号都可以被正常检测出来。</li><li>布尔值字符串可以判断是否包含布尔值对象。</li><li>自己判断是否完全包含自己是可以正常检测的。</li><li>传入空字符串的时候，<code>endsWith方法</code>会直接返回<code>true</code>。</li><li>对于特殊的字面量，<code>true</code>，<code>false</code>，<code>null</code>，<code>undefined</code>和<code>NaN</code>，<code>endsWith方法</code>会当作普通字符串进行完全匹配</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.endsWith(true)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“true”.endsWith(“true”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“true”.endsWith(oBool)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.endsWith(false)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.endsWith(“false”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“false”.endsWith(oBool)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">“null”.endsWith(null)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“null”.endsWith(“null”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“undefined”.endsWith(undefined)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“undefined”.endsWith(“undefined”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“NaN”.endsWith(NaN)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">“NaN”.endsWith(“NaN”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“”)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(oString)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(true)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(false)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(null)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(undefined)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(NaN)</td><td style="text-align:left">false</td></tr></tbody></table><blockquote><p>第二个参数错误示例</p></blockquote><ul><li>索引值的范围是<code>1~varName.length</code>。</li><li>传入的数字是向下取整的，只取数字的整数部分，举个栗子，比如传入10.1-10.9，<code>endsWith方法</code>是当作<code>10</code>进行处理。</li><li>对于传入的负值整数，<code>endsWith方法</code>是当作<code>1</code>进行处理，<code>endsWith方法</code>是当作<code>1</code>进行处理，相当于就是从字符串的索引值为<code>1</code>的到索引值为<code>1</code>中间的字符串，检索结尾是不是对应的传入的字符串。</li><li>对于传入的<code>String</code>，<code>Object</code>，<code>Array</code>和<code>Boolean</code>类型的值，<code>endsWith方法</code>是当作<code>1</code>进行处理，相当于就是从字符串的索引值为<code>1</code>的到索引值为<code>1</code>中间的字符串，检索结尾是不是对应的传入的字符串。</li><li>对于传入的<code>Date</code>类型的值，<code>endsWith方法</code>会自动转成对应的时间戳数值，相当于就是从字符串的索引值为<code>varName.length</code>的到索引值为<code>1</code>中间的字符串，检索结尾是不是对应的传入的字符串。</li><li>对于<code>Number.NaN</code>，<code>Number.MIN_VALUE</code>和<code>Number.NEGATIVE_INFINITY</code>，<code>endsWith方法</code>是当作<code>1</code>进行处理，相当于就是从字符串的索引值为<code>1</code>的到索引值为<code>1</code>中间的字符串检索内容。</li><li>对于<code>Number.MAX_VALUE</code>和<code>Number.POSITIVE_INFINITY</code>，<code>endsWith方法</code>是当作超出<code>varName.length</code>进行处理，相当于就是从字符串的索引值为<code>varName.length</code>的到索引值为<code>1</code>中间的字符串，检索结尾是不是对应的传入的字符串。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.endsWith(“world”,10.1)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,10.5)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,10.8)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,11)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,11.1)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,11.5)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,11.8)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,-10)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,-11)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,true)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,false)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,”true”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,”false”)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,oo)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,oBool)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,oArray)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,oDate)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,Number.NaN)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,Number.MAX_VALUE)</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,Number.MIN_VALUE)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,Number.NEGATIVE_INFINITY)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">oString.endsWith(“world”,Number.POSITIVE_INFINITY)</td><td style="text-align:left">true</td></tr></tbody></table><h4 id="6-search-regexp"><a href="#6-search-regexp" class="headerlink" title="6) search(regexp)"></a>6) search(regexp)</h4><p>当你想要知道字符串中是否存在某个模式<code>pattern</code>时可使用 <code>search</code>，类似于正则表达式的 <code>test</code> 方法。当要了解更多匹配信息时，可使用 <code>match</code>会更慢，该方法类似于正则表达式的 <code>exec</code> 方法。</p><ul><li><code>regexp</code>该参数可以是需要在<code>varName</code>中检索的子串，也可以是需要检索的<code>RegExp</code>对象。</li><li>要执行忽略大小写的检索，请追加标志<code>i</code>。</li><li>返回值<code>varName</code>中第一个与<code>regexp</code>相匹配的子串的起始位置。</li><li>如果没有找到任何匹配的子串，则返回<code>-1</code>。</li><li><code>search()</code> 方法不执行全局匹配，它将忽略标志<code>g</code>。</li><li><code>regexp</code> 一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象，则会使用 <code>new RegExp(obj)</code> 隐式地将其转换为正则表达式对象。</li><li>对于字符串中包含的BMP字符，会严格匹配编码格式。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">tString_2.search(“  “)//两个空格</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">tString_2.search(/\s/)</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">tString_2.search(“line”)</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">tString_2.search(“    “)//四个空格</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">tString_2.search(“     “)//五个空格</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">tString_2.search(“    “)//一个tab缩进</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">tString_2.search(“        “)//两个tab缩进</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">tString_2.search(/\t/)//一个tab缩进</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">tString_2.search(/\n/)//一个tab缩进</td><td style="text-align:left">12</td></tr><tr><td style="text-align:left">tString_2.search(/\n/)//一个tab缩进</td><td style="text-align:left">12</td></tr><tr><td style="text-align:left">oString_1.search(“\uD87E\uDC04”))</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">oString_1.search(“你”))</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_1.normalize().search(“你”))</td><td style="text-align:left">2</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，没加双引号都可以被正常检测出来</li><li>所有字符串检测是否包含空字符串，都会返回<code>0</code></li><li>所有字符串检测是否包含自己，都会返回<code>0</code></li><li>对于特殊的字面量，<code>true</code>，<code>false</code>，<code>null</code>和<code>NaN</code>，<code>search方法</code>会当作普通字符串</li><li>所有字符串检测是否包含<code>undefined</code>，都会返回<code>0</code></li><li>而且本方法不管你传入多少参数，这边只会处理传入的第一个参数值</li><li>对于<code>object</code>这个对象，<code>search方法</code>会转化成<code>[object Object]</code></li><li>对于其他除了object之外引用类型对象，<code>search方法</code>会按照对象的字面量进行检索</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.search(true)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.search(“true”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.search(oBool)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.search(false)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.search(“false”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.search(oBool)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“null”.search(null)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“null”.search(“null”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.search(undefined)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.search(“undefined”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.search(NaN)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.search(“NaN”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.search(“”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.search(oString)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.search(true)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(false)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(null)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(undefined)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">oString.search(NaN)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(“llo”,10.1)</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">oString.search(“llo”,10.1,10.5,10.8)</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">strString.search(oo)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">oString.search(oo)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_1.search(oo)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.search(oo)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_3.search(oo)</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">tString_4.search(oo)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(oBool)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(oArray)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(oDate)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(Number.NaN)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(Number.MAX_VALUE)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(Number.MIN_VALUE)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(Number.NEGATIVE_INFINITY)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.search(Number.POSITIVE_INFINITY)</td><td style="text-align:left">-1</td></tr></tbody></table><h4 id="7-match-regexp"><a href="#7-match-regexp" class="headerlink" title="7) match(regexp)"></a>7) match(regexp)</h4><ul><li><code>regexp</code>该参数可以是需要在<code>varName</code>中检索的子串，也可以是需要检索的<code>RegExp</code>对象。</li><li><code>regexp</code> 一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象，则会使用 <code>new RegExp(obj)</code> 隐式地将其转换为正则表达式对象。</li><li>要执行忽略大小写的检索，请追加标志<code>i</code>。</li><li>如果<code>match()</code>方法没有找到匹配，将返回 <code>null</code>。如果找到匹配，则<code>match()</code>方法返回一个数组，并将更新全局 <code>RegExp</code> 对象的属性以反映匹配结果。</li><li>如果传入空格，制表符和垂直制表符等等，<code>match()</code> 方法的<code>第一个参数</code>会返回经过正则对象转化之后的值。举个栗子，如果传入”    “（一个tab缩进），<code>match()</code>方法返回的数组第一个值是<code>\t</code>。</li><li>如果字符串中本身包含空格，制表符和垂直制表符等等，<code>match()</code> 方法的<code>第三个参数</code>的值中会将这些符号转成对应正则值。举个栗子，<code>tString_2</code>中包含换行和制表符，<code>match()</code>方法返回的数组第三个值是<code>hello line 1\n\t\t\t\thello line 2</code>。</li><li>如果没有设置全局标志 (<code>g</code>)，数组元素<code>0</code>包含整个匹配，而元素<code>1</code>到<code>n</code>包含任何一个<code>子匹配</code>。此行为与未设置全局标志时<code>exec</code>方法（正则表达式）(<code>JavaScript</code>) 的行为相同。</li><li>如果未设置全局标志，则 <code>match()</code> 方法返回的数组有两个特性：<code>input</code> 和 <code>index</code>。 <code>input</code>属性包含整个被搜索的<code>字符串</code>。 <code>index</code> 属性包含了在整个被搜索字符串中匹配的子字符串的<code>位置</code>。</li><li>如果设置了全局标志，则元素<code>0</code>到元素<code>n</code>包含<code>所有出现的匹配</code>，可以用来统计某个内容在字符串中出现的次数。</li><li>对于字符串中包含的BMP字符，会严格匹配编码格式。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">tString_2.match(“  “)//两个空格</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">tString_2.match(/\s/)</td><td style="text-align:left">[ ‘ ‘, index: 5, input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">tString_2.match(“line”)</td><td style="text-align:left">[ ‘line’, index: 6, input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">tString_2.match(“    “)//四个空格</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">tString_2.match(“     “)//五个空格</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">tString_2.match(“    “)//一个tab缩进</td><td style="text-align:left">[ ‘\t’, index: 13, input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">tString_2.match(“        “)//两个tab缩进</td><td style="text-align:left">[ ‘\t\t’,index: 13,input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">tString_2.match(/\t/)//一个tab缩进</td><td style="text-align:left">[ ‘\t’, index: 13, input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">tString_2.match(/\n/)//一个tab缩进</td><td style="text-align:left">[ ‘\n’, index: 12, input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">oString.match()</td><td style="text-align:left">[ ‘’, index: 0, input: ‘hello world’ ]</td></tr><tr><td style="text-align:left">oString.match(/o/)</td><td style="text-align:left">[ ‘o’, index: 4, input: ‘hello world’ ]</td></tr><tr><td style="text-align:left">oString.match(/o/g)</td><td style="text-align:left">[ ‘o’, ‘o’ ]</td></tr><tr><td style="text-align:left">oString_1.match(“\uD87E\uDC04”))</td><td style="text-align:left">[ ‘你’, index: 2, input: ‘A 你 Z’ ]</td></tr><tr><td style="text-align:left">oString_1.match(“你”))</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString_1.normalize().match(“你”))</td><td style="text-align:left">[ ‘你’, index: 2, input: ‘A 你 Z’ ]</td></tr></tbody></table><blockquote><p>错误示例</p></blockquote><ul><li>进行匹配的时候，只要原始值是定义好的，没加双引号都可以被正常检测出来。</li><li>所有字符串检测是否包含空字符串，会当作匹配所有，返回的数组中的第一个值都是<code>&#39;&#39;</code>，第二个值都是<code>index:0</code>。</li><li>所有字符串检测是否包含自己，都会正常返回。</li><li>对于特殊的字面量，<code>true</code>，<code>false</code>，<code>null</code>和<code>NaN</code>，<code>match方法</code>会当作普通字符串。</li><li>除了字符串本身值包含<code>undefined</code>这个值，其他字符串使用<code>match方法</code>检测是否包含<code>undefined</code>，返回的数组中的第一个值都是<code>&#39;&#39;</code>，第二个值都是<code>index:0</code>。</li><li>对于本身包含<code>undefined</code>这个值的字符串，返回的数组中第一个值是<code>&#39;undefined&#39;</code>。</li><li>而且本方法不管你传入多少参数，这边只会处理传入的第一个参数值。</li><li>对于<code>object</code>这个对象，<code>match方法</code>会转化成<code>[object Object]</code>，再进行匹配处理。</li><li>对于其他除了<code>object</code>之外引用类型对象，<code>match方法</code>会按照对象的字面量进行检索。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“true”.match(true)</td><td style="text-align:left">[ ‘true’, index: 0, input: ‘true’ ]</td></tr><tr><td style="text-align:left">“true”.match(“true”)</td><td style="text-align:left">[ ‘true’, index: 0, input: ‘true’ ]</td></tr><tr><td style="text-align:left">“true”.match(oBool)</td><td style="text-align:left">[ ‘true’, index: 0, input: ‘true’ ]</td></tr><tr><td style="text-align:left">“false”.match(false)</td><td style="text-align:left">[ ‘false’, index: 0, input: ‘false’ ]</td></tr><tr><td style="text-align:left">“false”.match(“false”)</td><td style="text-align:left">[ ‘false’, index: 0, input: ‘false’ ]</td></tr><tr><td style="text-align:left">“false”.match(oBool)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">“null”.match(null)</td><td style="text-align:left">[ ‘null’, index: 0, input: ‘null’ ]</td></tr><tr><td style="text-align:left">“null”.match(“null”)</td><td style="text-align:left">[ ‘null’, index: 0, input: ‘null’ ]</td></tr><tr><td style="text-align:left">“undefined”.match(undefined)</td><td style="text-align:left">[ ‘undefined’, index: 0, input: ‘undefined’ ]</td></tr><tr><td style="text-align:left">“undefined”.match(“undefined”)</td><td style="text-align:left">[ ‘undefined’, index: 0, input: ‘undefined’ ]</td></tr><tr><td style="text-align:left">“NaN”.match(NaN)</td><td style="text-align:left">[ ‘NaN’, index: 0, input: ‘NaN’ ]</td></tr><tr><td style="text-align:left">“NaN”.match(“NaN”)</td><td style="text-align:left">[ ‘NaN’, index: 0, input: ‘NaN’ ]</td></tr><tr><td style="text-align:left">oString.match(“”)</td><td style="text-align:left">[ ‘’, index: 0, input: ‘hello world’ ]</td></tr><tr><td style="text-align:left">oString.match(oString)</td><td style="text-align:left">[ ‘hello world’, index: 0, input: ‘hello world’ ]</td></tr><tr><td style="text-align:left">oString.match(true)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(false)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(null)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(undefined)</td><td style="text-align:left">[ ‘’, index: 0, input: ‘hello world’ ]</td></tr><tr><td style="text-align:left">oString.match(NaN)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(“llo”,10.1)</td><td style="text-align:left">[ ‘llo’, index: 2, input: ‘hello watermelon’ ]</td></tr><tr><td style="text-align:left">oString.match(“llo”,10.1,10.5,10.8)</td><td style="text-align:left">[ ‘llo’, index: 2, input: ‘hello watermelon’ ]</td></tr><tr><td style="text-align:left">strString.match(oo)</td><td style="text-align:left">[ ‘e’, index: 1, input: ‘hello watermelon’ ]</td></tr><tr><td style="text-align:left">oString.match(oo)</td><td style="text-align:left">[ ‘e’, index: 1, input: ‘hello world’ ]</td></tr><tr><td style="text-align:left">tString_1.match(oo)</td><td style="text-align:left">[ ‘e’, index: 1, input: ‘hello Template’ ]</td></tr><tr><td style="text-align:left">tString_2.match(oo)</td><td style="text-align:left">[ ‘e’, index: 1, input: ‘hello line 1\n\t\t\t\thello line 2’ ]</td></tr><tr><td style="text-align:left">tString_3.match(oo)</td><td style="text-align:left">[ ‘t’, index: 3, input: ‘Fifteen is 12 and\nnot 16.’ ]</td></tr><tr><td style="text-align:left">tString_4.match(oo)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(oBool)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(oArray)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(oDate)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(Number.NaN)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(Number.MAX_VALUE)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(Number.MIN_VALUE)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(Number.NEGATIVE_INFINITY)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">oString.match(Number.POSITIVE_INFINITY)</td><td style="text-align:left">null</td></tr></tbody></table><h2 id="4-4-比较"><a href="#4-4-比较" class="headerlink" title="4.4. 比较"></a>4.4. 比较</h2><h3 id="4-4-1-概述"><a href="#4-4-1-概述" class="headerlink" title="4.4.1 概述"></a>4.4.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">localeCompare(stringExp[, locales][, options])</td><td style="text-align:left">返回一个数字，表示是否引用字符串在排序中位于比较字符串的前面，后面，或者二者相同。新的 <code>locales</code> 、 <code>options</code> 参数能让应用程序定制函数的行为即指定用来排序的语言。  <code>locales</code> 和 <code>options</code> 参数是依赖于具体实现的，在旧的实现中这两个参数是完全被忽略的。</td><td style="text-align:left">@param  stringExp 必需。用于比较的字符串。@param locales 可选。包含一种或多种语言或区域设置标记的区域设置字符串数组。如果包含多个区域设置字符串，请以降序优先级对它们进行排列，确保首个条目为首选区域位置。如果省略此参数，则使用 JavaScript 运行时的默认区域设置。此参数必须符合 <a href="https://tools.ietf.org/html/rfc5646">BCP 47</a> 标准；请参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation">Intl.Collator</a> 对象了解详细信息。@param options 可选。包含指定比较选项的一个或多个特性的对象。请参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation">Intl.Collator</a> 对象了解详细信息。</td></tr></tbody></table><h3 id="4-4-2-详细"><a href="#4-4-2-详细" class="headerlink" title="4.4.2 详细"></a>4.4.2 详细</h3><h4 id="1-localeCompare-stringExp-locales-options"><a href="#1-localeCompare-stringExp-locales-options" class="headerlink" title="1) localeCompare(stringExp[, locales][, options])"></a>1) localeCompare(stringExp[, locales][, options])</h4><ul><li>除了<code>Safari</code>之外，<code>Internet Explorer 11</code>（只有ie11这个版本） ，<code>Chrome</code>，<code>Firefox (Gecko)</code>和<code>Opera</code>都支持<code>localeCompare</code> 在内部使用 <code>Intl.Collator</code> 对象进行比较，添加对 <code>locales</code> 和 <code>options</code> 参数的支持。</li><li>所有浏览器都支持<code>localeCompare</code>的基础功能。</li><li>返回一个数字表示是否 <code>引用字符串</code> 在排序中位于 <code>比较字符串</code> 的<code>前面</code>，<code>后面</code>，或者二者<code>相同</code>。</li><li>当 引用字符串 在 比较字符串 前面时返回 <code>-1</code>。</li><li>当 引用字符串 在 比较字符串 后面时返回 <code>1</code>。</li><li>相同位置时返回 <code>0</code>。</li><li>切勿依赖于 <code>-1</code> 或 <code>1</code> 这样特定的返回值。不同浏览器之间（以及不同浏览器版本之间） 返回的正负数的值<code>各有不同</code>，因为W3C规范中只要求返回值是<code>正值</code>和<code>负值</code>，而没有规定<code>具体的值</code>。一些浏览器可能返回<code>-2</code>或<code>2</code>或其他一些负的、正的<code>值</code>。</li><li>把 <code>&lt;</code> 和 <code>&gt;</code> 运算符应用到字符串时，它们只用字符的 Unicode 编码比较字符串，而不考虑当地的排序规则。</li><li>以这种方法生成的顺序不一定是正确的。</li><li><code>ECMAscript</code> 标准并没有规定如何进行本地特定的比较操作，它只规定该函数采用底层操作系统提供的排序规则。</li><li>可以用于有多个字符串的数组进行排序</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">strString.localeCompare(“llo”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_1.localeCompare(“A”)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_1.localeCompare(“Tem”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">strString.localeCompare(“llo”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString_3.localeCompare(“Fifteen”)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_1.localeCompare(“Tem”)</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>第一个参数错误示例</p></blockquote><ul><li>如果不传入任何参数，<code>localeCompare</code>会直接返回负值。</li><li>就目前测试的相关数据结果表现，不管字符串中是什么内容，传入什么样的正则值，或者传入制表符，空格，和换行符等等特殊字符，<code>localeCompare</code>都会返回正值。</li><li>如果以字符串本身传入<code>localeCompare</code>，会直接返回<code>0</code>。</li><li>进行匹配的时候，只要原始值是定义好的，没加双引号都可以被正常检测出来。</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">strString.localeCompare()</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">oString.localeCompare(/\s/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">oString_1.localeCompare(/\s/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_1.localeCompare(/\s/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.localeCompare(/\s/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_3.localeCompare(/\s/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_4.localeCompare(/\s/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">strString.localeCompare(/\n/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">strString.localeCompare(/\t/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">strString.localeCompare(/hello world/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">strString.localeCompare(/大吉大利/)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.localeCompare(“  “)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.localeCompare(“    “)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.localeCompare(“     “)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.localeCompare(“    “)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">tString_2.localeCompare(“        “)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">strString.localeCompare(strString)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.localeCompare(true)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.localeCompare(“true”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“true”.localeCompare(oBool)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.localeCompare(false)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.localeCompare(“false”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“false”.localeCompare(oBool)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“null”.localeCompare(null)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“null”.localeCompare(“null”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.localeCompare(undefined)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“undefined”.localeCompare(“undefined”)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.localeCompare(NaN)</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“NaN”.localeCompare(“NaN”)</td><td style="text-align:left">0</td></tr></tbody></table><h4 id="2-Intl-Collator-locales-options"><a href="#2-Intl-Collator-locales-options" class="headerlink" title="2) Intl.Collator([locales[, options]])"></a>2) Intl.Collator([locales[, options]])</h4><p>是用于语言敏感字符串比较的<code>collators</code>构造函数。</p><ul><li><p>locales</p><p>可选.<code>locales</code> 参数必须是一个 <code>BCP 47 语言标记</code>的字符串，或者是一个包括<code>多个语言标记</code>的数组。如果 <code>locales</code> 参数未提供或者是 <code>undefined</code>，便会使用运行时默认的 <code>locale</code>。</p><p>一个 <code>BCP 47 语言标记</code>代表了一种<code>语</code>言或者<code>区域</code>（两者没有很大的区别）。在其最常见的格式中，它以这样的顺序囊括了这些内容：<code>语言代码</code>，<code>脚本代码</code>，和<code>国家代码</code>，全部由<code>连字符</code>分隔开。</p><ul><li>“hi”：印地语</li><li>“de-AT”：在奥地利使用的德语</li><li>“zh-Hans-CN”：在中国使用的中文简体</li></ul><p>在 <code>BCP 47</code> 中表示语言，脚本，国家（区域）和变体（少用）的语言子标记含义可以在 <a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry">IANA语言</a> 子标记注册中找到。</p><p><code>BCP 47</code> 也支持扩展，其中一个和 <code>JavaScript</code> 国际化方法相关的是：<code>u</code>（Unicode）扩展。它可以用于请求一个<code>自定义区域</code>特定行为的 <code>Collator</code>，<code>NumberFormat</code>，或者 <code>DateTimeFormat</code> 对象。</p><ul><li>“de-DE-u-co-phonebk”：使用德语的电话簿排序变体，这会把元音变音扩展成字符对：ä → ae, ö → oe, ü → ue。</li><li>“th-TH-u-nu-thai”：在数字格式中使用泰语的数值表示（๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙）</li><li>“ja-JP-u-ca-japanese”：在日期和时间格式化中使用日本的日历表示方式，所以 2013 会表示为平成 25。</li></ul><p>语言区域判定</p><p><code>locales</code> 参数，在除去所有的 <code>Unicode</code> 扩展之后，会被转化成来自应用的优先请求。运行时拿它和可用的语言区域做对比然后选择出最合适的一个。有两种匹配算法：<code>查找</code> 匹配遵循 <code>BCP 47</code> 中指定的查找算法。</p><p><code>最佳命中</code>匹配器会让运行时至少提供一个<code>语言区域</code>，但合适请求的结果可能会比查找算法的要多。如果应用没有提供一个 <code>locales</code> 参数，或者运行时没有一个匹配请求的语言区域，那么会使用运行时默认的语言区域。</p><p>如果选中的语言标记有一个 <code>Unicode</code> 扩展子字符串，这个扩展会用于自定义构造对象或者方法的行为。每一个构造函数或者方法仅支持 <code>Unicode</code> 扩展定义的 <code>key</code> 的一个子集，和依赖于语言标记的支持的值。例如，<code>co</code> 这个 key（collation）只在 <code>Collator</code> 中支持，它的值 <code>phonebk</code> 只在<code>德语</code>中支持。</p><p>关于参数 <code>locales</code> 的一般形式和解释请参见<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation">Intl page</a>. 下面的这些 <code>Unicode</code> 扩展键也是被允许的:</p><ul><li><p>co</p><p>某些区域设置的变体归类。 可能的值包括：<code>big5han</code>，<code>dict</code>，<code>direct</code>，<code>ducet</code>，<code>gb2312</code>，<code>phonebk</code>，<code>phonetic</code>，<code>pinyin</code>，<code>reformed</code>，<code>searchjl</code>，<code>stroke</code> ，<code>unihan</code>。值<code>standard</code> 和 <code>search</code> 被忽略。</p></li><li><p>kn</p><p>是否应使用数字对照，使得 <code>1</code>&lt;<code>2</code>&lt;<code>10</code>。 可能的值为 <code>true</code> 和 <code>false</code>。 此选项可以通过 <code>options</code> 属性或通过 <code>Unicode</code> 扩展 <code>key</code> 设置; 如果两者都提供，<code>options</code> 属性优先。</p></li><li><p>kf</p><p>首先排序大写或者小写。可能的值为 <code>upper</code>，<code>lower</code> 或 <code>false</code>（使用区域设置的默认值）。 此选项可以通过 <code>options</code> 属性或通过 <code>Unicode</code> 扩展 <code>key</code> 设置; 如果两者都提供，<code>options</code> 属性优先。</p></li></ul></li></ul><hr><ul><li><p>options</p><p><code>options</code> 参数必须是一个对象，其属性值在不同的构造函数和方法中会有所变化。如果 <code>options</code> 参数未提供或者为 <code>undefined</code>，所有的属性值则使用默认的。</p><p>所有语言敏感的构造函数和方法都支持的一个属性是：<code>localeMatcher</code> 属性，它的值必须是字符串 <code>lookup</code> 或者 <code>best fit</code>，用于选择上边描述的语言区域匹配算法。包含一些或所有的下面属性的对象:</p><ul><li><p>localeMatcher</p><p>使用的 <code>local</code> 的匹配算法. 可能的值有<code>lookup</code> 和 <code>best fit</code>，默认值是 <code>best fit</code>. 有关此选项的信息。</p></li><li><p>usage</p><p>比较是用于排序还是用于搜索匹配的字符串。 可能的值为 <code>sort</code> 和 <code>search</code>; 默认为 <code>sort</code>。</p></li><li><p>sensitivity</p><p>字符串中的哪些差异应导致结果值为非零(non-zero)。 可能的值有：</p><p><code>base</code>: 只有字母不同的字母比较不相等。例子: a ≠ b, a = á, a = A。<br><code>accent</code>: 只有不同的基本字母或重音符号和其他变音符号的字符串比较为不相等。 例如: a ≠ b, a ≠ á, a = A。<br><code>case</code>: 只有不同的基本字母或大小写的字符串比较不相等。 Examples: a ≠ b, a = á, a ≠ A。<br><code>variant</code>: 字符串的字母，口音和其他变音符号、或不同大小写比较不相等。 也可以考虑其他差异。例如： a ≠ b, a ≠ á, a ≠ A.<br>默认值使用 <code>sort</code>; 它的 <code>locale</code> 依赖于使用 <code>search</code>.</p></li><li><p>ignorePunctuation</p><p>是否应忽略标点。 可能的值为 <code>true</code> 和 <code>false</code>; 默认值为 <code>false</code>。</p></li><li><p>numeric</p><p>是否应使用数字对照，使得 <code>1</code>&lt;<code>2</code>&lt;<code>10</code>。 可能的值为 <code>true</code> 和 <code>false</code>。默认值为 <code>false</code> 。 此选项可以通过 <code>options</code> 属性或通过 <code>Unicode</code> 扩展 <code>key</code> 设置。如果两者都提供，<code>options</code> 属性优先。</p></li><li><p>caseFirst</p><p>首先排序大写或者小写。可能的值为 <code>upper</code>，<code>lower</code> 或 <code>false</code>（使用区域设置的默认值）。 此选项可以通过 <code>options</code> 属性或通过 <code>Unicode</code> 扩展 <code>key</code> 设置。 如果两者都提供，<code>options</code> 属性优先。</p></li></ul></li></ul><hr><blockquote><p>基础用法</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">new Intl.Collator().compare(‘a’, ‘c’)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">new Intl.Collator().compare(‘c’, ‘a’)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">new Intl.Collator().compare(‘a’, ‘a’)</td><td style="text-align:left">0</td></tr></tbody></table><blockquote><p>numeric参数用法</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“1”.localeCompare(“2”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“1”.localeCompare(“2”,”kn”,{numeric:”true”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“1”.localeCompare(“2”,”language-region-u-kn-true”,{numeric:”true”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“1”.localeCompare(“16”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“1”.localeCompare(“16”,”kn”,{numeric:”true”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“1”.localeCompare(“16”,”language-region-u-kn-true”,{numeric:”true”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“2”.localeCompare(“16”)</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">“2”.localeCompare(“16”,”kn”,{numeric:”true”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“2”.localeCompare(“16”,”language-region-u-kn-true”,{numeric:”true”})</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>sensitivity参数用法</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“a”.localeCompare(“b”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“b”,”language-region-u-search”,{sensitivity:”base”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“b”,”language-region-u-search”,{sensitivity:”accent”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“b”,”language-region-u-search”,{sensitivity:”case”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“b”,”language-region-u-search”,{sensitivity:”variant”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“á”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“á”,”language-region-u-search”,{sensitivity:”base”})</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“a”.localeCompare(“á”,”language-region-u-search”,{sensitivity:”accent”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“á”,”language-region-u-search”,{sensitivity:”case”})</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“a”.localeCompare(“á”,”language-region-u-search”,{sensitivity:”variant”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-search”,{sensitivity:”base”})</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-search”,{sensitivity:”accent”})</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-search”,{sensitivity:”case”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-search”,{sensitivity:”variant”})</td><td style="text-align:left">-1</td></tr></tbody></table><blockquote><p>caseFirst参数用法</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">“a”.localeCompare(“A”)</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”kf”,{caseFirst:”upper”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-upper”,{caseFirst:”upper”})</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-lower”,{caseFirst:”upper”})</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-false”,{caseFirst:”upper”})</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”kf”,{caseFirst:”lower”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-upper”,{caseFirst:”lower”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-lower”,{caseFirst:”lower”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-false”,{caseFirst:”lower”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”kf”,{caseFirst:”false”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-upper”,{caseFirst:”false”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-lower”,{caseFirst:”false”})</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">“a”.localeCompare(“A”,”language-region-u-kf-false”,{caseFirst:”false”})</td><td style="text-align:left">-1</td></tr></tbody></table><h2 id="4-5-拼接"><a href="#4-5-拼接" class="headerlink" title="4.5. 拼接"></a>4.5. 拼接</h2><h3 id="4-5-1-概述"><a href="#4-5-1-概述" class="headerlink" title="4.5.1 概述"></a>4.5.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">concat(string2, string3[, …, stringN])</td><td style="text-align:left">连接两个字符串文本，并返回一个新的字符串。</td><td style="text-align:left">@param string2…stringN 和原字符串连接的多个字符串</td></tr><tr><td style="text-align:left">padEnd(targetLength [, padString])</td><td style="text-align:left"><code>不推荐使用</code>， 从给定字符串的末端填充当前字符串，以从给定长度创建新字符串。</td><td style="text-align:left">@param targetLength 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。 @param padString (可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 “ “（U+0020）。返回值，在原字符串末尾填充指定的填充字符串直到目标长度所形成的新字符串。</td></tr><tr><td style="text-align:left">padStart()</td><td style="text-align:left"><code>不推荐使用</code>， 从一个给定字符串开始填充当前字符串，从给定长度创建一个新字符串。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">repeat()</td><td style="text-align:left"><code>不推荐使用</code>，返回指定重复次数的由元素组成的字符串对象。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">quote()</td><td style="text-align:left"><code>已废弃</code>，用双引号（``）包装字符串。</td><td style="text-align:left">无</td></tr></tbody></table><h3 id="4-5-2-详细"><a href="#4-5-2-详细" class="headerlink" title="4.5.2 详细"></a>4.5.2 详细</h3><h4 id="1-concat-string2-string3-…-stringN"><a href="#1-concat-string2-string3-…-stringN" class="headerlink" title="1) concat(string2, string3[, …, stringN])"></a>1) concat(string2, string3[, …, stringN])</h4><p><code>concat</code> 方法的结果等同于：<code>result = string1 + string2 + string3 + stringN</code>，即将一个或多个字符串与<code>原字符串</code>连接合并，形成一个新的字符串并返回。<code>concat</code> 方法并不影响原字符串，原字符串中或结果字符串中的值的变化都不会影响另一个字符串中的值。如果有不是字符串的参数，则它们在连接到 <code>varName</code> 之前将首先被转换为字符串。</p><blockquote><p>性能</p></blockquote><p>强烈建议使用 赋值操作符（+, +=）代替 concat 方法，<code>+</code>运算速度是<code>concat</code>的二十倍左右，是<code>join</code>的两百七十倍左右。参看 <a href="http://jsperf.com/concat-vs-plus-vs-join">性能测试（perfomance test）</a>，下图是三个函数在<code>0.1</code>秒左右的执行次数，其中<code>join</code>执行时长是最长的，接近<code>0.2</code>秒。</p><p><img src="../../../../img/concatVsPlus.png" alt="concat-vs-plus"></p><blockquote><p>正确用法</p></blockquote><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.concat()</td><td style="text-align:left">hello world</td></tr><tr><td style="text-align:left">oString.concat(“”)</td><td style="text-align:left">hello world</td></tr><tr><td style="text-align:left">oString.concat(“hell”,1))</td><td style="text-align:left">hello worldhell1</td></tr><tr><td style="text-align:left">oString.concat(“hell”,0.1))</td><td style="text-align:left">hello worldhell0.1</td></tr><tr><td style="text-align:left">oString.concat(“hell”,0.5))</td><td style="text-align:left">hello worldhell0.5</td></tr><tr><td style="text-align:left">oString.concat(“hell”,0.8))</td><td style="text-align:left">hello worldhell0.8</td></tr></tbody></table><blockquote><p>错误用法和特殊字符</p></blockquote><ul><li>不传参数和传空字符串都是会正常返回字符串原值。</li><li>对于特殊字符都可以正常拼接，如果传入的不是字符串类型，会先转成字符串类型，然后再做处理。</li><li>对于数字0，会去掉小数位和正负号</li></ul><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">oString.concat()</td><td style="text-align:left">hello world</td></tr><tr><td style="text-align:left">oString.concat(“”)</td><td style="text-align:left">hello world</td></tr><tr><td style="text-align:left">oString.concat(true)</td><td style="text-align:left">hello worldtrue</td></tr><tr><td style="text-align:left">oString.concat(“true”)</td><td style="text-align:left">hello worldtrue</td></tr><tr><td style="text-align:left">oString.concat(oBool)</td><td style="text-align:left">hello worldtrue</td></tr><tr><td style="text-align:left">oString.concat(false)</td><td style="text-align:left">hello worldfalse</td></tr><tr><td style="text-align:left">oString.concat(“false”)</td><td style="text-align:left">hello worldfalse</td></tr><tr><td style="text-align:left">oString.concat(null)</td><td style="text-align:left">hello worldnull</td></tr><tr><td style="text-align:left">oString.concat(“null”)</td><td style="text-align:left">hello worldnull</td></tr><tr><td style="text-align:left">oString.concat(undefined)</td><td style="text-align:left">hello worldundefined</td></tr><tr><td style="text-align:left">oString.concat(“undefined”)</td><td style="text-align:left">hello worldundefined</td></tr><tr><td style="text-align:left">oString.concat(NaN)</td><td style="text-align:left">hello worldNaN</td></tr><tr><td style="text-align:left">oString.concat(“NaN”)</td><td style="text-align:left">hello worldNaN</td></tr><tr><td style="text-align:left">oString.concat(Number.NaN)</td><td style="text-align:left">hello worldNaN</td></tr><tr><td style="text-align:left">oString.concat(oo)</td><td style="text-align:left">hello worldhell[object Object]</td></tr><tr><td style="text-align:left">oString.concat(oArray)</td><td style="text-align:left">hello worldhelldemo,melon,water</td></tr><tr><td style="text-align:left">oString.concat(oDate)</td><td style="text-align:left">hello worldhellThu Jan 11 2018 21:39:49 GMT+0800 (中国标准时间)</td></tr><tr><td style="text-align:left">oString.concat(Number.MAX_VALUE)</td><td style="text-align:left">hello worldhell1.7976931348623157e+308</td></tr><tr><td style="text-align:left">oString.concat(Number.MIN_VALUE)</td><td style="text-align:left">hello worldhell5e-324</td></tr><tr><td style="text-align:left">oString.concat(Number.NEGATIVE_INFINITY)</td><td style="text-align:left">hello worldhell-Infinity</td></tr><tr><td style="text-align:left">oString.concat(Number.POSITIVE_INFINITY)</td><td style="text-align:left">hello worldhellInfinity</td></tr><tr><td style="text-align:left">oString.concat(“hell”,0.0))</td><td style="text-align:left">hello worldhell0</td></tr><tr><td style="text-align:left">oString.concat(“hell”,-0))</td><td style="text-align:left">hello worldhell0</td></tr></tbody></table><h4 id="2-padEnd"><a href="#2-padEnd" class="headerlink" title="2) padEnd()"></a>2) padEnd()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.padEnd()</td></tr></tbody></table><h4 id="3-padStart"><a href="#3-padStart" class="headerlink" title="3) padStart()"></a>3) padStart()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.padStart()</td></tr></tbody></table><h4 id="4-repeat"><a href="#4-repeat" class="headerlink" title="4) repeat()"></a>4) repeat()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.repeat()</td></tr></tbody></table><h4 id="5-quote"><a href="#5-quote" class="headerlink" title="5) quote()"></a>5) quote()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.quote()</td></tr></tbody></table><h2 id="4-6-大小写转换"><a href="#4-6-大小写转换" class="headerlink" title="4.6. 大小写转换"></a>4.6. 大小写转换</h2><h3 id="4-6-1-概述"><a href="#4-6-1-概述" class="headerlink" title="4.6.1 概述"></a>4.6.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">toLowerCase()</td><td style="text-align:left">将字符串转换成小写并返回。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">toLocaleLowerCase()</td><td style="text-align:left">根据当前区域设置，将符串中的字符转换成小写。对于大多数语言来说，toLowerCase的返回值是一致的。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">toUpperCase()</td><td style="text-align:left">将字符串转换成大写并返回。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">toLocaleUpperCase()</td><td style="text-align:left">根据当前区域设置，将字符串中的字符转换成大写，对于大多数语言来说，toUpperCase的返回值是一致的。</td><td style="text-align:left">无</td></tr></tbody></table><h3 id="4-6-2-详细"><a href="#4-6-2-详细" class="headerlink" title="4.6.2 详细"></a>4.6.2 详细</h3><h4 id="1-toLowerCase"><a href="#1-toLowerCase" class="headerlink" title="1) toLowerCase()"></a>1) toLowerCase()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toLowerCase()</td></tr></tbody></table><h4 id="2-toLocaleLowerCase"><a href="#2-toLocaleLowerCase" class="headerlink" title="2) toLocaleLowerCase()"></a>2) toLocaleLowerCase()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toLocaleLowerCase()</td></tr></tbody></table><h4 id="3-toUpperCase"><a href="#3-toUpperCase" class="headerlink" title="3) toUpperCase()"></a>3) toUpperCase()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toUpperCase()</td></tr></tbody></table><h4 id="4-toLocaleUpperCase"><a href="#4-toLocaleUpperCase" class="headerlink" title="4) toLocaleUpperCase()"></a>4) toLocaleUpperCase()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toLocaleUpperCase()</td></tr></tbody></table><h1 id="5-字符串对象的强硬方法"><a href="#5-字符串对象的强硬方法" class="headerlink" title="5. 字符串对象的强硬方法"></a>5. 字符串对象的强硬方法</h1><h2 id="5-1-强制类型转化"><a href="#5-1-强制类型转化" class="headerlink" title="5.1. 强制类型转化"></a>5.1. 强制类型转化</h2><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">使用方法</th></tr></thead><tbody><tr><td style="text-align:left">String</td><td style="text-align:left">强制类型转化，将其他类型的变量转化成<code>String</code>类型</td><td style="text-align:left">String(varName)</td></tr></tbody></table><table><thead><tr><th style="text-align:left">参数值</th><th style="text-align:left">举例</th><th style="text-align:left">转换结果</th></tr></thead><tbody><tr><td style="text-align:left">负数</td><td style="text-align:left">-1</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">空</td><td style="text-align:left">null</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">未定义</td><td style="text-align:left">undefined</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">非数值</td><td style="text-align:left">NaN</td><td style="text-align:left">NaN</td></tr><tr><td style="text-align:left">对象</td><td style="text-align:left">new Object()</td><td style="text-align:left">[object Object]</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在大部分情况下String()和toString()效果相同</span></span><br><span class="line"><span class="comment">//但是 对 null 和 undefined 值强制类型转换可以生成字符串而不引发错误</span></span><br><span class="line"><span class="comment">// 而null 和 undefined 值强制使用toString()，却会引发错误</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">-0</span>))<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">-1</span>))<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>))<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">undefined</span>))<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">NaN</span>))<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将其他对象类型化成string类型的时候，其实传入String的值是每个对象原始的默认值</span></span><br><span class="line"><span class="comment">//object对象的默认值是object</span></span><br><span class="line"><span class="comment">//Boolean对象的默认值是false</span></span><br><span class="line"><span class="comment">//Number对象的默认值是0</span></span><br><span class="line"><span class="comment">//String对象的默认值是''</span></span><br><span class="line"><span class="comment">//Array对象的默认值是[]</span></span><br><span class="line"><span class="comment">//日期的默认值是当前日期</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Object</span>()))<span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Boolean</span>()))<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Number</span>()))<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">String</span>()))<span class="comment">//""</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Array</span>()))<span class="comment">//""</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()))<span class="comment">//Sat Nov 18 2017 15:45:07 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><h2 id="5-2-替换"><a href="#5-2-替换" class="headerlink" title="5.2. 替换"></a>5.2. 替换</h2><h3 id="5-2-1-概述"><a href="#5-2-1-概述" class="headerlink" title="5.2.1 概述"></a>5.2.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">replace()</td><td style="text-align:left">被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。</td><td style="text-align:left">无</td></tr></tbody></table><h3 id="5-2-2-详细"><a href="#5-2-2-详细" class="headerlink" title="5.2.2 详细"></a>5.2.2 详细</h3><h4 id="1-replace"><a href="#1-replace" class="headerlink" title="1) replace()"></a>1) replace()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.replace()</td></tr></tbody></table><h2 id="5-3-分割"><a href="#5-3-分割" class="headerlink" title="5.3. 分割"></a>5.3. 分割</h2><h3 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">slice()</td><td style="text-align:left">摘取一个字符串区域，返回一个新的字符串。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">split()</td><td style="text-align:left">通过分离字符串成字串，将字符串对象分割成字符串数组。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">substr()</td><td style="text-align:left">通过指定字符数返回在指定位置开始的字符串中的字符。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">substring()</td><td style="text-align:left">返回在字符串中指定两个下标之间的字符。</td><td style="text-align:left">无</td></tr></tbody></table><h3 id="5-3-2-详细"><a href="#5-3-2-详细" class="headerlink" title="5.3.2 详细"></a>5.3.2 详细</h3><h4 id="1-slice"><a href="#1-slice" class="headerlink" title="1) slice()"></a>1) slice()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.slice()</td></tr></tbody></table><h4 id="2-split"><a href="#2-split" class="headerlink" title="2) split()"></a>2) split()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.split()</td></tr></tbody></table><h4 id="3-substr"><a href="#3-substr" class="headerlink" title="3) substr()"></a>3) substr()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.substr()</td></tr></tbody></table><h4 id="4-substring"><a href="#4-substring" class="headerlink" title="4) substring()"></a>4) substring()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.substring()</td></tr></tbody></table><h2 id="5-4-格式转化"><a href="#5-4-格式转化" class="headerlink" title="5.4. 格式转化"></a>5.4. 格式转化</h2><h3 id="5-4-1-概述"><a href="#5-4-1-概述" class="headerlink" title="5.4.1 概述"></a>5.4.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">trim()</td><td style="text-align:left"><code>不推荐使用</code>，从字符串的开始和结尾去除空格。参照部分 ECMAScript 5 标准。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">trimLeft()</td><td style="text-align:left"><code>不推荐使用</code>， 从字符串的左侧去除空格。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">trimRight()</td><td style="text-align:left"><code>不推荐使用</code>， 从字符串的右侧去除空格。</td><td style="text-align:left">无</td></tr></tbody></table><h3 id="5-4-2-详细"><a href="#5-4-2-详细" class="headerlink" title="5.4.2 详细"></a>5.4.2 详细</h3><h4 id="1-trim"><a href="#1-trim" class="headerlink" title="1) trim()"></a>1) trim()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.trim()</td></tr></tbody></table><h4 id="2-trimLeft"><a href="#2-trimLeft" class="headerlink" title="2) trimLeft()"></a>2) trimLeft()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.trimLeft()</td></tr></tbody></table><h4 id="3-trimRight"><a href="#3-trimRight" class="headerlink" title="3) trimRight()"></a>3) trimRight()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.trimRight()</td></tr></tbody></table><h2 id="5-5-对象通用方法"><a href="#5-5-对象通用方法" class="headerlink" title="5.5. 对象通用方法"></a>5.5. 对象通用方法</h2><h3 id="5-5-1-概述"><a href="#5-5-1-概述" class="headerlink" title="5.5.1 概述"></a>5.5.1 概述</h3><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">toString()</td><td style="text-align:left"><code>不推荐使用</code>，返回用字符串表示的特定对象。重写 Object.prototype.toString 方法。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">toLocaleString()</td><td style="text-align:left"><code>不推荐使用</code>，返回用字符串表示的特定对象。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">valueOf()</td><td style="text-align:left"><code>不推荐使用</code>， 返回特定对象的原始值。重写 Object.prototype.valueOf 方法。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">toSource()</td><td style="text-align:left"><code>测试中</code>，返回一个对象文字代表着特定的对象。你可以使用这个返回值来创建新的对象。重写 <code>Object.prototype.toSource</code> 方法。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>[@@iterator]()</code></td><td style="text-align:left"><code>不推荐使用</code>，返回一个新的迭代器对象遍历一个字符串值的代码，每个代码点返回一个字符串值。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>__defineGetter__()</code></td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>__defineSetter__()</code></td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>__lookupGetter__()</code></td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>__lookupSetter__()</code></td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">hasOwnProperty()</td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">isPrototypeOf()</td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">setPrototypeOf()</td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">unwatch()</td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">watch()</td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">propertyIsEnumerable()</td><td style="text-align:left"><code>不推荐使用</code></td><td style="text-align:left">无</td></tr></tbody></table><h3 id="5-5-2-详细"><a href="#5-5-2-详细" class="headerlink" title="5.5.2 详细"></a>5.5.2 详细</h3><h4 id="1-toString"><a href="#1-toString" class="headerlink" title="1) toString()"></a>1) toString()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toString()</td></tr></tbody></table><h4 id="2-toLocaleString"><a href="#2-toLocaleString" class="headerlink" title="2) toLocaleString()"></a>2) toLocaleString()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toLocaleString()</td></tr></tbody></table><h4 id="3-valueOf"><a href="#3-valueOf" class="headerlink" title="3) valueOf()"></a>3) valueOf()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.valueOf()</td></tr></tbody></table><h4 id="4-iterator"><a href="#4-iterator" class="headerlink" title="4) [@@iterator]()"></a>4) <code>[@@iterator]()</code></h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName[0]</td></tr></tbody></table><h4 id="5-toSource"><a href="#5-toSource" class="headerlink" title="5) toSource()"></a>5) toSource()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toSource()</td></tr></tbody></table><h4 id="6-defineGetter"><a href="#6-defineGetter" class="headerlink" title="6) __defineGetter__()"></a>6) <code>__defineGetter__()</code></h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toString()</td></tr></tbody></table><h4 id="7-defineSetter"><a href="#7-defineSetter" class="headerlink" title="7) __defineSetter__()"></a>7) <code>__defineSetter__()</code></h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.valueOf()</td></tr></tbody></table><h4 id="8-lookupGetter"><a href="#8-lookupGetter" class="headerlink" title="8) __lookupGetter__()"></a>8) <code>__lookupGetter__()</code></h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName[0]</td></tr></tbody></table><h4 id="9-lookupSetter"><a href="#9-lookupSetter" class="headerlink" title="9) __lookupSetter__()"></a>9) <code>__lookupSetter__()</code></h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toSource()</td></tr></tbody></table><h4 id="10-hasOwnProperty"><a href="#10-hasOwnProperty" class="headerlink" title="10) hasOwnProperty()"></a>10) hasOwnProperty()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toString()</td></tr></tbody></table><h4 id="11-isPrototypeOf"><a href="#11-isPrototypeOf" class="headerlink" title="11) isPrototypeOf()"></a>11) isPrototypeOf()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.valueOf()</td></tr></tbody></table><h4 id="12-setPrototypeOf"><a href="#12-setPrototypeOf" class="headerlink" title="12) setPrototypeOf()"></a>12) setPrototypeOf()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName[0]</td></tr></tbody></table><h4 id="13-unwatch"><a href="#13-unwatch" class="headerlink" title="13) unwatch()"></a>13) unwatch()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toSource()</td></tr></tbody></table><h4 id="14-watch"><a href="#14-watch" class="headerlink" title="14) watch()"></a>14) watch()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName[0]</td></tr></tbody></table><h4 id="15-propertyIsEnumerable"><a href="#15-propertyIsEnumerable" class="headerlink" title="15) propertyIsEnumerable()"></a>15) propertyIsEnumerable()</h4><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">varName.toSource()</td></tr></tbody></table><h1 id="6-字符串字面量的原型方法"><a href="#6-字符串字面量的原型方法" class="headerlink" title="6. 字符串字面量的原型方法"></a>6. 字符串字面量的原型方法</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">raw()</td><td style="text-align:left">一个模板字符串的标签函数，它的作用类似于 Python 中的字符串前缀 r 和 C# 中的字符串前缀 @，是用来获取一个模板字符串的原始字面量值的。</td><td style="text-align:left">@param1 callSite 一个模板字符串的<code>调用点对象</code>。@param2 …substitutions 任意个可选的参数，表示任意个内插表达式对应的值。</td></tr></tbody></table><h2 id="6-2-详细"><a href="#6-2-详细" class="headerlink" title="6.2 详细"></a>6.2 详细</h2><h3 id="1-raw"><a href="#1-raw" class="headerlink" title="1) raw()"></a>1) raw()</h3><p>如果第一个参数没有传入一个格式良好的调用点对象，则会抛出 TypeError 异常。</p><table><thead><tr><th style="text-align:left">使用方法</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">objectName.raw(callSite, …substitutions)</td></tr></tbody></table><h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h1><h2 id="7-1-返回值为字符串的方法"><a href="#7-1-返回值为字符串的方法" class="headerlink" title="7.1 返回值为字符串的方法"></a>7.1 返回值为字符串的方法</h2><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">big()</td><td style="text-align:left"><code>不推荐使用</code>，把字符串显示为大号字体，只在页面中才会有大两个字体号效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">small()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为小号字体，只在页面中才会有小两个字体号效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">blink()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示闪动的字符串，目前没有看到有浏览器支持</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">bold()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示粗体的字符串，只在页面中才会有粗体效果，IE不兼容。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">italics()</td><td style="text-align:left"><code>不推荐使用</code>，把字符串显示为斜体，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">strike()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为加了删除线的字符串，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">fixed()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为打字机文本显示的字符串，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">sub()</td><td style="text-align:left"><code>不推荐使用</code>，把字符串显示为下标，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">sup()</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为上标，只在页面中才会有效果。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">anchor(anchorname)</td><td style="text-align:left"><code>不推荐使用</code>，创建 <code>HTML</code> 锚。将字符串输出为有唯一标识的纯粹<code>a</code>标签，只在页面中才会有效果。</td><td style="text-align:left">@param anchorname 必需，为锚定义名称。如果没有传入参数，则会输出一个<code>name</code>属性为<code>undefined</code>的<code>a</code>标签。</td></tr><tr><td style="text-align:left">link(url)</td><td style="text-align:left"><code>不推荐使用</code>， 把字符串显示为链接，只在页面中才会有效果。如果没有传入参数，则会输出一个href属性为<code>undefined</code>的a标签。</td><td style="text-align:left">@param url必需，规定要链接的 URL。</td></tr><tr><td style="text-align:left">fontcolor(color)</td><td style="text-align:left"><code>不推荐使用</code>，返回指定的颜色的字符串。只在页面中才会有效果如果没有传入参数，则会输出一个<code>color</code>属性为<code>undefined</code>的font标签。</td><td style="text-align:left">@param  color必需。为字符串规定 font-color。该值必须是颜色名(red)、RGB 值(rgb(255,0,0))或者十六进制数(#FF0000)。</td></tr><tr><td style="text-align:left">fontsize(size)</td><td style="text-align:left"><code>不推荐使用</code>， 返回指定的字体大小的字符串。只在页面中才会有效果。如果没有传入参数，则会输出一个<code>size</code>属性为<code>undefined</code>的<code>font</code>标签。</td><td style="text-align:left">@param size 参数必须是从 1 至 7 的数字，数字越大字体越大。</td></tr><tr><td style="text-align:left">charAt(index)</td><td style="text-align:left">返回特定位置的字符，不提供参数就返回第一个字符的字符，提供游标值，就返回指定游标的字符</td><td style="text-align:left">@param index 非必需，一个介于0 和字符串长度减1之间的正整数。 (0~varName.length-1)。</td></tr><tr><td style="text-align:left">normalize([form])</td><td style="text-align:left"><code>测试中</code>， 返回调用字符串值的Unicode标准化形式。</td><td style="text-align:left">@param form 四种 Unicode 正规形式 “NFC”, “NFD”, “NFKC”, 以及 “NFKD” 其中的一个, 默认值为 “NFC”.</td></tr><tr><td style="text-align:left">fromCharCode(num1, …, numN)</td><td style="text-align:left">返回一个字符串，而不是一个 String 对象。由于 fromCharCode 是 String 的静态方法，所以应该像这样使用：String.fromCharCode()，而不是作为你创建的 String 对象的方法。</td><td style="text-align:left">@param num1, …, numN 一组序列数字，表示 Unicode 值。</td></tr><tr><td style="text-align:left">fromCodePoint(num1, …, numN)</td><td style="text-align:left"><code>不推荐使用</code>， 返回使用 Unicode 编码创建的字符串，如果传入无效的 Unicode 编码，将会抛出一个RangeError (例如： “RangeError: NaN is not a valid code point”)。</td><td style="text-align:left">@param num1, …, numN 一组序列数字，表示 Unicode 值。</td></tr><tr><td style="text-align:left">concat(string2, string3[, …, stringN])</td><td style="text-align:left">连接两个字符串文本，并返回一个新的字符串。</td><td style="text-align:left">@param string2…stringN 和原字符串连接的多个字符串</td></tr><tr><td style="text-align:left">padEnd(targetLength [, padString])</td><td style="text-align:left"><code>不推荐使用</code>， 从给定字符串的末端填充当前字符串，以从给定长度创建新字符串。</td><td style="text-align:left">@param targetLength 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。 @param padString (可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 “ “（U+0020）。返回值，在原字符串末尾填充指定的填充字符串直到目标长度所形成的新字符串。</td></tr></tbody></table><h2 id="7-2-返回值为数值的方法"><a href="#7-2-返回值为数值的方法" class="headerlink" title="7.2 返回值为数值的方法"></a>7.2 返回值为数值的方法</h2><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">charCodeAt(index)</td><td style="text-align:left">返回0到65535之间的整数，表示给定索引处的<code>UTF-16</code>代码单元 (在 <code>Unicode</code> 编码单元表示一个单一的 <code>UTF-16</code> 编码单元的情况下，<code>UTF-16</code> 编码单元匹配 <code>Unicode</code> 编码单元。但在——例如 <code>Unicode</code> 编码单元 &gt; <code>0x10000</code> 的这种——不能被一个 <code>UTF-16</code> 编码单元单独表示的情况下，只能匹配 <code>Unicode</code> 代理对的第一个编码单元) 。</td><td style="text-align:left">@param index 一个大于等于 0，小于字符串长度的整数。(0~varName.length-1)，如果不是一个数值，则默认为 0。</td></tr><tr><td style="text-align:left">codePointAt(pos)</td><td style="text-align:left"><code>不推荐使用</code>， 返回使用UTF-16编码的给定位置的值的非负整数。</td><td style="text-align:left">@param pos 这个字符串中需要转码的元素的位置。</td></tr><tr><td style="text-align:left">indexOf(searchValue[, fromIndex])</td><td style="text-align:left">从字符串对象中返回首个被发现的给定值的索引值开始在 fromIndex进行搜索。如果未找到该值，则返回-1。</td><td style="text-align:left">@param searchValue 一个字符串表示被查找的值。@param fromIndex 可选 表示调用该方法的字符串中开始查找的位置。可以是任意整数。默认值为 0。如果 fromIndex &lt; 0 则查找整个字符串（如同传进了 0）。如果 fromIndex &gt;= varName.length，则该方法返回 -1，除非被查找的字符串是一个空字符串，此时返回 varName.length。</td></tr><tr><td style="text-align:left">lastIndexOf(searchValue[, fromIndex])</td><td style="text-align:left">返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。从该字符串的后面向前查找，从 fromIndex 处开始。</td><td style="text-align:left">@param searchValue 一个字符串，表示被查找的值。@param fromIndex 从调用该方法字符串的此位置处开始查找。可以是任意整数。默认值为 str.length。如果为负值，则被看作 0。如果 fromIndex &gt; str.length，则 fromIndex 被看作 str.length。</td></tr><tr><td style="text-align:left">search(regexp)</td><td style="text-align:left">对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引。否则，返回 -1。</td><td style="text-align:left">@param regexp 一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象。</td></tr><tr><td style="text-align:left">localeCompare(stringExp[, locales][, options])</td><td style="text-align:left">返回一个数字，表示是否引用字符串在排序中位于比较字符串的前面，后面，或者二者相同。新的 <code>locales</code> 、 <code>options</code> 参数能让应用程序定制函数的行为即指定用来排序的语言。  <code>locales</code> 和 <code>options</code> 参数是依赖于具体实现的，在旧的实现中这两个参数是完全被忽略的。</td><td style="text-align:left">@param  stringExp 必需。用于比较的字符串。@param locales 可选。包含一种或多种语言或区域设置标记的区域设置字符串数组。如果包含多个区域设置字符串，请以降序优先级对它们进行排列，确保首个条目为首选区域位置。如果省略此参数，则使用 JavaScript 运行时的默认区域设置。此参数必须符合 <a href="https://tools.ietf.org/html/rfc5646">BCP 47</a> 标准；@param options 可选。包含指定比较选项的一个或多个特性的对象。请参见 [Intl.Collator]<a href="https://msdn.microsoft.com/zh-cn/library/dn342821(v=vs.94).aspx">https://msdn.microsoft.com/zh-cn/library/dn342821(v=vs.94).aspx</a> 对象了解详细信息。</td></tr></tbody></table><h2 id="7-3-返回值为布尔值的方法"><a href="#7-3-返回值为布尔值的方法" class="headerlink" title="7.3 返回值为布尔值的方法"></a>7.3 返回值为布尔值的方法</h2><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">includes(searchString[, position])</td><td style="text-align:left"><code>不推荐使用</code>，判断一个字符串是否包含在另一个字符串中，根据情况返回true或false。</td><td style="text-align:left">@param searchString 要在此字符串中搜索的字符串。@param position 可选。从当前字符串的哪个索引位置开始搜寻子字符串；默认值为0。</td></tr><tr><td style="text-align:left">startsWith(searchString [, position])</td><td style="text-align:left"><code>不推荐使用</code>，判断字符串的起始位置是否匹配其他字符串中的字符。</td><td style="text-align:left">@param searchString 要搜索的子字符串。@param position 在 varName 中搜索 searchString 的开始位置，默认值为 0，也就是真正的字符串开头处。</td></tr><tr><td style="text-align:left">endsWith(searchString [, position])</td><td style="text-align:left"><code>不推荐使用</code>， 判断一个字符串的结尾是否包含其他字符串中的字符。</td><td style="text-align:left">@param searchString 要搜索的子字符串。@param position 在 varName 中搜索 searchString 的结束位置，默认值为 varName.length，也就是真正的字符串结尾处。</td></tr></tbody></table><h2 id="7-3-返回值为数组的方法"><a href="#7-3-返回值为数组的方法" class="headerlink" title="7.3 返回值为数组的方法"></a>7.3 返回值为数组的方法</h2><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">描述</th><th style="text-align:left">参数</th></tr></thead><tbody><tr><td style="text-align:left">match(regexp)</td><td style="text-align:left">将字符串与正则表达式匹配，并返回一个包含该搜索结果的数组。返回值array，一个包含了整个匹配结果以及任何括号捕获的匹配结果的 Array ；如果没有匹配项，则返回 null 。</td><td style="text-align:left">@param regexp 一个正则表达式对象。如果传入一个非正则表达式对象，则会隐式地使用 new RegExp(obj) 将其转换为一个 RegExp 。如果你未提供任何参数，直接使用 match() ，那么你会得到一个包含空字符串的 Array ：[“”] 。</td></tr></tbody></table><h1 id="8-参考网站"><a href="#8-参考网站" class="headerlink" title="8 参考网站"></a>8 参考网站</h1><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">MDN-String</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">MDN-模板字符串</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/prototype">MDN-String-prototype</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84#.E5.9F.BA.E6.9C.AC.E5.A4.9A.E6.96.87.E7.A7.8D.E5.B9.B3.E9.9D.A2">Unicode字符平面映射</a></p></li><li><p><a href="http://www.asciima.com/">ASCII码查询</a></p></li><li><p>[微软官方技术学习文档-String]<a href="https://msdn.microsoft.com/zh-cn/library/ecczf11c(v=vs.94).aspx">https://msdn.microsoft.com/zh-cn/library/ecczf11c(v=vs.94).aspx</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1. 定义&quot;&gt;&lt;/a&gt;1. 定义&lt;/h1&gt;&lt;h2 id=&quot;1-1-基本字符串&quot;&gt;&lt;a href=&quot;#1-1-基本字符串&quot; class=&quot;headerlink&quot; title=&quot;1.1 基本字符串&quot;&gt;&lt;/a&gt;1.1 基本字符串&lt;/h2&gt;&lt;p&gt;字符串字面量 (通过单引号或双引号定义) 和 直接调用 String方法(没有通过 new 生成字符串对象实例)的字符串都是基本字符串。基本字符串是没有相关扩展方法，只有将基本字符串可转化为字符串对象之后才可以使用字符串对象的方法，当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候，JavaScript会自动将基本字符串转换为字符串对象，并且调用相应的方法或者执行查询。&lt;/p&gt;
    
    </summary>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/categories/js-thinking/"/>
    
    
      <category term="watermelon" scheme="https://mowatermelon.github.io/tags/watermelon/"/>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/tags/js-thinking/"/>
    
      <category term="string" scheme="https://mowatermelon.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>西瓜有话说之Js对象学习regexp对象篇</title>
    <link href="https://mowatermelon.github.io/2017/10/30/js-Thinking-object-regexp/"/>
    <id>https://mowatermelon.github.io/2017/10/30/js-Thinking-object-regexp/</id>
    <published>2017-10-29T16:00:00.000Z</published>
    <updated>2017-12-25T01:11:27.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-修饰词"><a href="#1-修饰词" class="headerlink" title="1 修饰词"></a>1 修饰词</h1><ul><li><code>i</code> 忽略大小写</li><li><code>g</code> 全局匹配</li><li><code>m</code> 把<code>\n</code>识别为多行</li></ul><a id="more"></a><h1 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2 元字符"></a>2 元字符</h1><ul><li><code>\</code> 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符”n”。”\n”匹配一个换行符。串行”\“匹配”\”而”(“则匹配”(“</li><li><code>[abc]</code> 中括号的任意一个字符，有点像更大范围的逻辑或。</li><li><code>[^abc]</code> 除了中括号中的任意一个字符</li><li><code>(abc)</code> 必须完全包含<code>abc</code>，这三个字符，有点像更大范围的逻辑与。</li><li><code>|</code> 逻辑或，x|y    匹配x或y。例如，“z|food”能匹配”z”或”food”。”(z|f)ood”则匹配”zood”或”food”。</li><li><code>.</code>  匹配除“\n”之外的任何单个字符。要匹配包括”\n”在内的任何字符，请使用像”(.|\n)”的模式。</li><li><code>\w</code> 任意一个字母、数字或下划线</li><li><code>\W</code> 任意一个非字母、数字和下划线</li><li><code>\d</code> 任意一个数字</li><li><code>\D</code> 任意一个非数字</li><li><code>\s</code> 任意一个空格</li><li><code>\S</code> 任意一个非空格</li><li><code>\b</code> 单词边界</li><li><code>\B</code> 非单词边界</li><li><code>\n</code> 代表换行符</li><li><code>\t</code> tab缩进</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//linux或php单词</span></span><br><span class="line"><span class="comment">//可实现向后引用$1(replace替换时)</span></span><br><span class="line"><span class="keyword">var</span> str1 =<span class="string">"linux"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 =<span class="string">"dddd（sdfsdfs）dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;）"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/(linux)|(php)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.match(pattern1));<span class="comment">//["linux", "linux", undefined, index: 0, input: "linux"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.match(pattern1));<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h1 id="3-量词"><a href="#3-量词" class="headerlink" title="3 量词"></a>3 量词</h1><ul><li><code>+</code> 1个或多个</li><li><code>*</code> 任意多个</li><li><code>?</code> 1个或0个</li><li><code>{3}</code> 3个</li><li><code>{3,5}</code> 3个到5个</li><li><code>{3,}</code>  3个以上</li><li><code>^</code> 行首，匹配输入字符串的开始位置，如果设置了RegExp对象的Multiline属性，^也匹配“\n”或”\r”之后的位置。</li><li><code>$</code> 行尾，匹配输入字符串的结束位置，如果设置了RegExp对象的Multiline属性，$也匹配“\n”或”\r”之前的位置。</li><li><code>?=a</code> 后面紧挨a的</li><li><code>?!a</code> 后面不紧挨a的</li><li><code>(?=pattern)</code> 正向肯定预查，在任何匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</li><li><code>(?!pattern)</code> 正向否定预查，在任何不匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</li><li><code>(?&lt;=pattern)</code> 反向肯定预查，与正向肯定预查类拟，只是方向相反。</li><li><code>(?&lt;!pattern)</code> 反向否定预查，与正向否定预查类拟，只是方向相反。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//linux或php单词</span></span><br><span class="line"><span class="comment">//可实现向后引用$1(replace替换时)</span></span><br><span class="line"><span class="keyword">var</span> str3 =<span class="string">"Windows2000"</span>;</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">"Windows3.1"</span>;</span><br><span class="line"><span class="keyword">var</span> str5 =<span class="string">"2000Windows"</span>;</span><br><span class="line"><span class="keyword">var</span> str6 = <span class="string">"3.1Windows"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下都是  获取匹配  的 案例，也就是说，该匹配需要获取供以后使用-------------案例一</span></span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/Windows(95|98|NT|2000)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern1));<span class="comment">//["Windows2000", "2000", index: 0, input: "Windows2000"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern1));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern1));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern1));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下都是  非获取匹配  的 案例，也就是说，该匹配不需要获取供以后使用-------------案例二</span></span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/Windows(?=95|98|NT|2000)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern2));<span class="comment">//["Windows", index: 0, input: "Windows2000"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern2));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern2));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern2));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern3 = <span class="regexp">/Windows(?!95|98|NT|2000)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern3));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern3));<span class="comment">//["Windows", index: 0, input: "Windows3.1"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern3));<span class="comment">//["Windows", index: 4, input: "2000Windows"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern3));<span class="comment">//["Windows", index: 3, input: "3.1Windows"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern4 = <span class="regexp">/Windows(?&lt;=95|98|NT|2000)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern4));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern4));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern4));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern4));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern5 = <span class="regexp">/Windows(?&lt;!95|98|NT|2000)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern5));<span class="comment">//["Windows", index: 0, input: "Windows2000"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern5));<span class="comment">//["Windows", index: 0, input: "Windows3.1"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern5));<span class="comment">//["Windows", index: 4, input: "2000Windows"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern5));<span class="comment">//["Windows", index: 3, input: "3.1Windows"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern6 = <span class="regexp">/(?&lt;=95|98|NT|2000)Windows/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern6));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern6));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern6));<span class="comment">//["Windows", index: 4, input: "2000Windows"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern6));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern7 = <span class="regexp">/(?&lt;!95|98|NT|2000)Windows/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3.match(pattern7));<span class="comment">//["Windows", index: 0, input: "Windows2000"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.match(pattern7));<span class="comment">//["Windows", index: 0, input: "Windows3.1"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.match(pattern7));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.match(pattern7));<span class="comment">//["Windows", index: 3, input: "3.1Windows"]</span></span><br></pre></td></tr></table></figure><blockquote><p>小提示：获取匹配和非获取匹配的区别</p></blockquote><p><code>获取匹配</code>的意思是，如果<code>字符串</code>匹配到<code>正则</code>规范，则会返回<code>正则</code>中的<code>所有内容</code>，如上面案例中的<code>案例一</code>。<br><code>非获取匹配</code>的意思是，如果<code>字符串</code>匹配到<code>正则</code>规范，则会返回<code>正则</code>中的<code>非括号内的内容</code>，如上面案例中的<code>案例二</code>。</p><h1 id="4-相关方法"><a href="#4-相关方法" class="headerlink" title="4 相关方法"></a>4 相关方法</h1><p>js中使用正则的字符对象的方法</p><ul><li>search(regexp);</li><li>match(regexp);</li><li>replace(regexp,str);</li><li>split(regexp);</li></ul><h1 id="5-正则实例"><a href="#5-正则实例" class="headerlink" title="5 正则实例"></a>5 正则实例</h1><h2 id="5-1-匹配139开头的电话号码"><a href="#5-1-匹配139开头的电话号码" class="headerlink" title="5.1 匹配139开头的电话号码"></a>5.1 匹配139开头的电话号码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phone1=<span class="string">'13998675896'</span>;</span><br><span class="line"><span class="keyword">var</span> phone2=<span class="string">'13498675896'</span>;</span><br><span class="line"><span class="keyword">var</span> phone3=<span class="string">'1399867a896'</span>;</span><br><span class="line"><span class="keyword">var</span> phone4=<span class="string">'1399867589'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern=<span class="regexp">/^139\d&#123;8&#125;$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(phone1.match(pattern));<span class="comment">//["13998675896", index: 0, input: "13998675896"]</span></span><br><span class="line"><span class="built_in">console</span>.log(phone2.match(pattern));<span class="comment">//null   因为开头不是139，所以返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(phone3.match(pattern));<span class="comment">//null  因为139之后的八位数中包含了字母，不是纯数字，所以返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(phone4.match(pattern));<span class="comment">//null  因为139之后的只有七个数字，所以返回null</span></span><br></pre></td></tr></table></figure><h2 id="5-2-匹配邮箱格式"><a href="#5-2-匹配邮箱格式" class="headerlink" title="5.2 匹配邮箱格式"></a>5.2 匹配邮箱格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \w 任意一个字母、数字或下划线</span></span><br><span class="line"><span class="comment">// + 1个或多个</span></span><br><span class="line"><span class="keyword">var</span> mail1=<span class="string">'skdd@qq.com'</span>;</span><br><span class="line"><span class="keyword">var</span> mail2=<span class="string">'skdd@163.com'</span>;</span><br><span class="line"><span class="keyword">var</span> mail3=<span class="string">'skdd@gmail.com'</span>;</span><br><span class="line"><span class="keyword">var</span> mail4=<span class="string">'skddqq.com'</span>;</span><br><span class="line"><span class="keyword">var</span> mail5=<span class="string">'skdd@qq.22.com'</span>;</span><br><span class="line"><span class="keyword">var</span> mail6=<span class="string">'-skdd@qq.22.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern=<span class="regexp">/^\w+@\w+\.\w+$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mail1.match(pattern));<span class="comment">//[ 'skdd@qq.com', index: 0, input: 'skdd@qq.com' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(mail2.match(pattern));<span class="comment">//[ 'skdd@163.com', index: 0, input: 'skdd@163.com' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(mail3.match(pattern));<span class="comment">//[ 'skdd@gmail.com', index: 0, input: 'skdd@gmail.com' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(mail4.match(pattern));<span class="comment">//null   因为没有@符号，所以返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(mail5.match(pattern));<span class="comment">//null    因为@后面是qq.22.com分了三段，所以返回null</span></span><br></pre></td></tr></table></figure><h2 id="5-3-替换日期格式"><a href="#5-3-替换日期格式" class="headerlink" title="5.3 替换日期格式"></a>5.3 替换日期格式</h2><p>将以<code>\</code>分割的日期转化成以<code>-</code>分割的日期格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1=<span class="string">'2017/11/21'</span>;</span><br><span class="line"><span class="keyword">var</span> date2=<span class="string">'2017/11/21 13:11:15'</span>;</span><br><span class="line"><span class="keyword">var</span> date3=<span class="string">'2017/11/21 13/11/15'</span>;</span><br><span class="line"><span class="keyword">var</span> date4=<span class="string">'2017/11/21 13/11'</span>;</span><br><span class="line"><span class="keyword">var</span> date5=<span class="string">'2017-11-21'</span>;</span><br><span class="line"><span class="keyword">var</span> date6=<span class="string">'2017#11#21'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern=<span class="regexp">/(\d+)\/(\d+)\/(\d+)/g</span>;</span><br><span class="line"><span class="comment">//$1-$2-$3是向后引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(date1.replace(pattern,<span class="string">'$1-$2-$3'</span>));<span class="comment">//2017-11-21</span></span><br><span class="line"><span class="built_in">console</span>.log(date2.replace(pattern,<span class="string">'$1-$2-$3'</span>));<span class="comment">//2017-11-21 13:11:15</span></span><br><span class="line"><span class="built_in">console</span>.log(date3.replace(pattern,<span class="string">'$1-$2-$3'</span>));<span class="comment">//2017-11-21 13-11-15</span></span><br><span class="line"><span class="built_in">console</span>.log(date4.replace(pattern,<span class="string">'$1-$2-$3'</span>));<span class="comment">//2017-11-21 13/11</span></span><br><span class="line"><span class="built_in">console</span>.log(date5.replace(pattern,<span class="string">'$1-$2-$3'</span>));<span class="comment">//2017-11-21</span></span><br><span class="line"><span class="built_in">console</span>.log(date6.replace(pattern,<span class="string">'$1-$2-$3'</span>));<span class="comment">//2017#11#21</span></span><br></pre></td></tr></table></figure><h2 id="5-4-检测一百以内数"><a href="#5-4-检测一百以内数" class="headerlink" title="5.4 检测一百以内数"></a>5.4 检测一百以内数</h2><p>检测0到100两位小数的正则不包含0包含100（包含三位小数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 =<span class="string">"11"</span>;</span><br><span class="line"><span class="keyword">var</span> num2 =<span class="string">"11.123"</span>;</span><br><span class="line"><span class="keyword">var</span> num3 =<span class="string">"11.1547"</span>;</span><br><span class="line"><span class="keyword">var</span> num4 =<span class="string">"99.5"</span>;</span><br><span class="line"><span class="keyword">var</span> num5 =<span class="string">"100"</span>;</span><br><span class="line"><span class="keyword">var</span> num6 =<span class="string">"100.0000"</span>;</span><br><span class="line"><span class="keyword">var</span> num7 =<span class="string">"100.01"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern=<span class="regexp">/^([1-9]\d&#123;0,1&#125;(\.\d&#123;0,3&#125;)?|100)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1.match(pattern));<span class="comment">//["11", "11", undefined, index: 0, input: "11"]</span></span><br><span class="line"><span class="built_in">console</span>.log(num2.match(pattern));<span class="comment">//["11.123", "11.123", ".123", index: 0, input: "11.123"]</span></span><br><span class="line"><span class="built_in">console</span>.log(num3.match(pattern));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(num4.match(pattern));<span class="comment">//["99.5", "99.5", ".5", index: 0, input: "99.5"]</span></span><br><span class="line"><span class="built_in">console</span>.log(num5.match(pattern));<span class="comment">//["100", "100", undefined, index: 0, input: "100"]</span></span><br><span class="line"><span class="built_in">console</span>.log(num6.match(pattern));<span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(num7.match(pattern));<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h2 id="5-5-返回字符串中括号内文字"><a href="#5-5-返回字符串中括号内文字" class="headerlink" title="5.5 返回字符串中括号内文字"></a>5.5 返回字符串中括号内文字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 =<span class="string">"dddd（sdfsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"dddd（sdfsdfs）dddd（sdfsdfs）dddd（sdfsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 =<span class="string">"dddd（sdfsdfs）dddd（sdfsdfs）dd dd（sdfsdfs）dd dd（sdfsdfs）ddsdd（sdfsdfs）dddd（sdfs dfs）ddd d（sd fsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str4 =<span class="string">"dddd（sdfsdfs）dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd（&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;）dd dd（sdfsdfs）ddsdd（sdfsdfs）dddd（sdfs dfs）ddd d（sd fsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str5 =<span class="string">"dddd（sdfsdfs）dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd（&lt;sdfsdfssdfsdfs）dd dd（sdfsdfs）ddsdd（sdfsdfs）dddd（sdfs dfs）ddd d（sd fsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str6 =<span class="string">"dddd（sdfsdfs）dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd（sdfsdfssdfsdfs&gt;）dd dd（sdfsdfs）ddsdd（sdfsdfs）dddd（sdfs dfs）ddd d（sd fsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str7 =<span class="string">"dddd（sdfsdfs）dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd（\sdfsdfssdfsdfs）dd dd（sdfsdfs）ddsdd（sdfsdfs）dddd（sdfs dfs）ddd d（sd fsdfs）"</span>;</span><br><span class="line"><span class="keyword">var</span> str8 =<span class="string">"dddd（sdfsdfs）dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd（sdfsdfs）dd dd（sdfsdfs）ddsdd（sdfsdfs）dddd（sdfs dfs）ddd d（sd fsdfs）"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var pattern = /(?=.*\w)+\（+(\w+)\）+/g;//匹配所有中文括号中包含字母的内容</span></span><br><span class="line"><span class="comment">// var pattern = /\（+(\w+|\s)*s\）+/g;//匹配所有中文括号中包含字母或者空格的内容</span></span><br><span class="line"><span class="comment">// var pattern = /\（+(\w+|\s+\&lt;+|\&gt;+|\\)*s\）+/g;</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\（+(\w+|\s+|\&lt;+|\&gt;+|\\)*\）+/g</span>;<span class="comment">//匹配所有中文括号中包含字母或者空格或者左尖角括号或者右尖角括号或者反斜线的内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;dd dd&lt;sdfsdfs&gt;dd dd&lt;sdfsdfs&gt;ddsdd&lt;sdfsdfs&gt;dddd&lt;dfs&gt;ddd d&lt;fsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd（&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;）dd dd&lt;sdfsdfs&gt;ddsdd&lt;sdfsdfs&gt;dddd&lt;dfs&gt;ddd d&lt;fsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str5.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd&lt;sdfsdfssdfsdfs&gt;dd dd&lt;sdfsdfs&gt;ddsdd&lt;sdfsdfs&gt;dddd&lt;dfs&gt;ddd d&lt;fsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str6.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd&lt;&gt;&gt;dd dd&lt;sdfsdfs&gt;ddsdd&lt;sdfsdfs&gt;dddd&lt;dfs&gt;ddd d&lt;fsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str7.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd&lt;sdfsdfssdfsdfs&gt;dd dd&lt;sdfsdfs&gt;ddsdd&lt;sdfsdfs&gt;dddd&lt;dfs&gt;ddd d&lt;fsdfs&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(str8.replace(pattern,<span class="string">'&lt;$1&gt;'</span>));<span class="comment">//dddd&lt;sdfsdfs&gt;dddd&lt;sdfsdfs&gt;&lt;/sdfsdfs&gt;dd dd&lt;sdfsdfs&gt;dd dd&lt;sdfsdfs&gt;ddsdd&lt;sdfsdfs&gt;dddd&lt;dfs&gt;ddd d&lt;fsdfs&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-6-检测上传文件名"><a href="#5-6-检测上传文件名" class="headerlink" title="5.6 检测上传文件名"></a>5.6 检测上传文件名</h2><p>需要检测上传文件路径中，是否都是同一文件名不同格式的多个文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUnique</span>(<span class="params">filePath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isRight =<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//给数组去重</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sort(); <span class="comment">//先排序</span></span><br><span class="line">        <span class="keyword">var</span> res = [<span class="keyword">this</span>[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[i] !== res[res.length - <span class="number">1</span>]) &#123;</span><br><span class="line">                res.push(<span class="keyword">this</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> patt=<span class="regexp">/\.+[\w]&#123;3&#125;/g</span>; <span class="comment">//检测后缀名的正则</span></span><br><span class="line">    <span class="keyword">var</span> ml = filePath.replace(patt,<span class="string">''</span>);<span class="comment">//去掉文件路径中的后缀名</span></span><br><span class="line">    ml = ml.split(<span class="string">"，"</span>).unique();</span><br><span class="line">    <span class="keyword">if</span>(ml.length==<span class="number">1</span>)&#123;</span><br><span class="line">        isRight =<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log("checkUnique");</span></span><br><span class="line">    <span class="comment">// console.log(isRight);</span></span><br><span class="line">    <span class="keyword">return</span> isRight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filePath1 =<span class="string">"polygon.cpg，polygon.dbf，polygon.prj，polygon.shp，polygon.shx"</span>;</span><br><span class="line"><span class="keyword">var</span> filePath2 =<span class="string">"polygon.cpg，line.dbf，eee.prj"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(checkUnique(filePath1));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(checkUnique(filePath2));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="5-7-检测上传文件格式"><a href="#5-7-检测上传文件格式" class="headerlink" title="5.7 检测上传文件格式"></a>5.7 检测上传文件格式</h2><p>需要检测上传文件路径中，是否包含了所有要求上传的文件格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkContainer</span>(<span class="params">filePath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isRight =<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> checkType = [<span class="string">"dbf"</span>, <span class="string">"shp"</span>, <span class="string">"shx"</span>];</span><br><span class="line">    <span class="keyword">var</span> patt=<span class="regexp">/[\w]+\./g</span>;</span><br><span class="line">    <span class="keyword">var</span> ml = filePath.replace(patt,<span class="string">''</span>);</span><br><span class="line">    ml = ml.toLowerCase().split(<span class="string">"，"</span>);</span><br><span class="line">    <span class="keyword">var</span> rightArray = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;ml.length ; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> pattern = <span class="built_in">RegExp</span>(ml[i]);</span><br><span class="line">      <span class="keyword">if</span>(pattern.test(checkType)&amp;&amp; ml[i]!==<span class="literal">undefined</span>&amp;&amp;!pattern.test(rightArray))&#123;</span><br><span class="line">        rightArray.push(ml[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rightArray.length!=checkType.length)&#123;</span><br><span class="line">        isRight = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log("checkContainer");</span></span><br><span class="line">    <span class="comment">// console.log(isRight);</span></span><br><span class="line">    <span class="keyword">return</span> isRight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filePath1 =<span class="string">"polygon.cpg，polygon.dbf，polygon.prj，polygon.shp，polygon.shx"</span>;</span><br><span class="line"><span class="keyword">var</span> filePath2 =<span class="string">"polygon.cpg，line.dbf，eee.prj"</span>;</span><br><span class="line"><span class="keyword">var</span> filePath3 =<span class="string">"polygon.shp，line.dbf，eee.shx"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(checkContainer(filePath1));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(checkContainer(filePath2));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(checkContainer(filePath3));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="6-完整速查表"><a href="#6-完整速查表" class="headerlink" title="6 完整速查表"></a>6 完整速查表</h1><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">\</td><td style="text-align:left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，<code>n</code>匹配字符<code>n</code>。<code>\n</code>匹配一个换行符。串行<code>\\</code>匹配<code>\</code>而<code>\(</code>则匹配<code>(</code>。</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配输入字符串的开始位置。如果设置了<code>RegExp</code>对象的<code>Multiline</code>属性，<code>^</code>也匹配<code>\n</code>或<code>\r</code>之后的位置。</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配输入字符串的结束位置。如果设置了<code>RegExp</code>对象的<code>Multiline</code>属性，<code>$</code>也匹配<code>\n</code>或<code>\r</code>之前的位置。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配<code>z</code>以及<code>zoo</code>。<code>*</code>等价于<code>{0,}</code>。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配<code>zo</code>以及”<code>zoo</code>“，但不能匹配<code>z</code>。<code>+</code>等价于<code>{1,}</code>。</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配<code>does</code>或<code>does</code>中的<code>do</code>。<code>?</code>等价于<code>{0,1}</code>。</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left"><code>n</code>是一个非负整数。匹配确定的<code>n</code>次。例如，<code>o{2}</code>不能匹配<code>Bob</code>中的<code>o</code>，但是能匹配<code>food</code>中的两个o。</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:left"><code>n</code>是一个非负整数。至少匹配<code>n</code>次。例如，<code>o{2,}</code>不能匹配<code>Bob</code>中的<code>o</code>，但能匹配<code>foooood</code>中的所有<code>o</code>。<code>o{1,}</code>等价于<code>o+</code>。<code>o{0,}</code>则等价于<code>o*</code>。</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left"><code>m</code>和<code>n</code>均为非负整数，其中<code>n&lt;=m</code>。最少匹配<code>n</code>次且最多匹配<code>m</code>次。例如，<code>o{1,3}</code>将匹配<code>fooooood</code>中的前三个<code>o</code>。<code>o{0,1}</code>等价于<code>o?</code>。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">当该字符紧跟在任何一个其他限制符<code>（*,+,?，{n}，{n,}，{n,m}）</code>后面时，匹配模式是<code>非贪婪</code>的。<code>非贪婪模式</code>尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串<code>oooo</code>，<code>o+?</code>将匹配单个<code>o</code>，而<code>o+</code>将匹配所有<code>o</code>。</td></tr><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除<code>\n</code>之外的任何单个字符。</td></tr><tr><td style="text-align:left">(pattern)</td><td style="text-align:left">匹配<code>pattern</code>并获取这一匹配。所获取的匹配可以从产生的<code>Matches</code>集合得到，在<code>VBScript</code>中使用<code>SubMatches</code>集合，在<code>JScript</code>中则使用<code>$0…$9</code>属性。要匹配圆括号字符，请使用<code>\(</code>或<code>\)</code>。</td></tr><tr><td style="text-align:left"><code>(?:pattern)</code></td><td style="text-align:left">匹配<code>pattern</code>但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。</td></tr><tr><td style="text-align:left"><code>(?=pattern)</code></td><td style="text-align:left">正向肯定预查，在任何匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</td></tr><tr><td style="text-align:left"><code>(?!pattern)</code></td><td style="text-align:left">正向否定预查，在任何不匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</td></tr><tr><td style="text-align:left"><code>(?&lt;=pattern)</code></td><td style="text-align:left">反向肯定预查，与正向肯定预查类拟，只是方向相反。</td></tr><tr><td style="text-align:left"><code>(?&lt;!pattern)</code></td><td style="text-align:left">反向否定预查，与正向否定预查类拟，只是方向相反。</td></tr><tr><td style="text-align:left">[xyz]</td><td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如，<code>[abc]</code>可以匹配<code>plain</code>中的<code>a</code>。</td></tr><tr><td style="text-align:left">[^xyz]</td><td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如，<code>[^abc]</code>可以匹配<code>plain</code>中的<code>p</code>。</td></tr><tr><td style="text-align:left">[a-z]</td><td style="text-align:left">字符范围。匹配指定范围内的任意字符。例如，<code>[a-z]</code>可以匹配<code>a</code>到<code>z</code>范围内的任意小写字母字符。</td></tr><tr><td style="text-align:left">[^a-z]</td><td style="text-align:left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，<code>[^a-z]</code>可以匹配任何不在<code>a</code>到<code>z</code>范围内的任意字符。</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配一个单词边界，也就是指单词和空格间的位置。例如，<code>er\b</code>可以匹配<code>never</code>中的<code>er</code>，但不能匹配<code>verb</code>中的<code>er</code>。</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配非单词边界。<code>er\B</code>能匹配<code>verb</code>中的<code>er</code>，但不能匹配<code>never</code>中的<code>er</code>。</td></tr><tr><td style="text-align:left">\cx</td><td style="text-align:left">匹配由<code>x</code>指明的控制字符。例如，<code>\cM</code>匹配一个<code>Control-M</code>或回车符。<code>x</code>的值必须为<code>A-Z</code>或<code>a-z</code>之一。否则，将<code>c</code>视为一个原义的<code>c</code>字符。</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配一个数字字符。等价于<code>[0-9]</code>。</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配一个非数字字符。等价于<code>[^0-9]</code>。</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">匹配一个换页符。等价于<code>\x0c</code>和<code>\cL</code>。</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">匹配一个换行符。等价于<code>\x0a</code>和<code>\cJ</code>。</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">匹配一个回车符。等价于<code>\x0d</code>和<code>\cM</code>。</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code>。</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">匹配一个制表符。等价于<code>\x09</code>和<code>\cI</code>。</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">匹配一个垂直制表符。等价于<code>\x0b</code>和<code>\cK</code>。</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code>。</td></tr><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code>。</td></tr><tr><td style="text-align:left">\xn</td><td style="text-align:left">匹配<code>n</code>，其中<code>n</code>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，<code>\x41</code>匹配<code>A</code>。<code>\x041</code>则等价于<code>\x04&amp;1</code>。正则表达式中可以使用<code>ASCII</code>编码。</td></tr><tr><td style="text-align:left">\num</td><td style="text-align:left">匹配<code>num</code>，其中<code>num</code>是一个正整数。对所获取的匹配的引用。例如，<code>(.)\1</code>匹配两个连续的相同字符。</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果<code>\n</code>之前至少<code>n</code>个获取的子表达式，则n为向后引用。否则，如果<code>n</code>为八进制数字（0-7），则<code>n</code>为一个八进制转义值。</td></tr><tr><td style="text-align:left">\nm</td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果<code>\nm</code>之前至少有<code>nm</code>个获得子表达式，则<code>nm</code>为向后引用。如果<code>\nm</code>之前至少有n个获取，则<code>n</code>为一个后跟文字m的向后引用。如果前面的条件都不满足，若<code>n</code>和<code>m</code>均为八进制数字<code>（0-7）</code>，则<code>\nm</code>将匹配八进制转义值<code>nm</code>。</td></tr><tr><td style="text-align:left">\nml</td><td style="text-align:left">如果<code>n</code>为八进制数字<code>（0-3）</code>，且<code>m</code>和<code>l</code>均为八进制数字<code>（0-7）</code>，则匹配八进制转义值<code>nml</code>。</td></tr><tr><td style="text-align:left">\un</td><td style="text-align:left">匹配<code>n</code>，其中<code>n</code>是一个用四个十六进制数字表示的<code>Unicode</code>字符。例如，<code>\u00A9</code>匹配版权符号<code>（©）</code>。</td></tr></tbody></table><h1 id="7-特殊值正则转换表"><a href="#7-特殊值正则转换表" class="headerlink" title="7 特殊值正则转换表"></a>7 特殊值正则转换表</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strString = <span class="string">"hello watermelon"</span>;</span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> oString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">var</span> oBool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> oNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</span><br><span class="line"><span class="keyword">var</span> oArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"demo"</span>,<span class="string">"melon"</span>,<span class="string">"water"</span>);</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//Thu Dec 21 2017 19:39:40 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">原始值</th><th style="text-align:left">使用方法</th><th style="text-align:left">转化值</th></tr></thead><tbody><tr><td style="text-align:left">true</td><td style="text-align:left">new RegExp(true)</td><td style="text-align:left">/true/</td></tr><tr><td style="text-align:left">false</td><td style="text-align:left">new RegExp(false)</td><td style="text-align:left">/false/</td></tr><tr><td style="text-align:left">undefined</td><td style="text-align:left">new RegExp(undefined)</td><td style="text-align:left">/(?:)/</td></tr><tr><td style="text-align:left">null</td><td style="text-align:left">new RegExp(null)</td><td style="text-align:left">/null/</td></tr><tr><td style="text-align:left">NaN</td><td style="text-align:left">new RegExp(NaN)</td><td style="text-align:left">/NaN/</td></tr><tr><td style="text-align:left">{ name: ‘Wu Eva’ }</td><td style="text-align:left">new RegExp(oo)</td><td style="text-align:left">/[object Object]/</td></tr><tr><td style="text-align:left">[String: ‘hello world’]</td><td style="text-align:left">new RegExp(oString)</td><td style="text-align:left">/hello world/</td></tr><tr><td style="text-align:left">[Boolean: true]</td><td style="text-align:left">new RegExp(oBool)</td><td style="text-align:left">/true/</td></tr><tr><td style="text-align:left">[Number: 68]</td><td style="text-align:left">new RegExp(oNum)</td><td style="text-align:left">/68/</td></tr><tr><td style="text-align:left">oDate</td><td style="text-align:left">new RegExp(oDate)</td><td style="text-align:left">/Thu Dec 21 2017 19:39:40 GMT+0800 (中国标准时间)/</td></tr><tr><td style="text-align:left"><code>Number.MAX_VALUE</code></td><td style="text-align:left">new RegExp(Number.MAX_VALUE)</td><td style="text-align:left">/1.7976931348623157e+308/</td></tr><tr><td style="text-align:left"><code>Number.MIN_VALUE</code></td><td style="text-align:left">new RegExp(Number.MIN_VALUE)</td><td style="text-align:left">/5e-324/</td></tr><tr><td style="text-align:left">Number.NaN</td><td style="text-align:left">new RegExp(Number.NaN)</td><td style="text-align:left">/NaN/</td></tr><tr><td style="text-align:left"><code>Number.NEGATIVE_INFINITY</code></td><td style="text-align:left">new RegExp(Number.NEGATIVE_INFINITY)</td><td style="text-align:left">/-Infinity/</td></tr><tr><td style="text-align:left"><code>Number.POSITIVE_INFINITY</code></td><td style="text-align:left">new RegExp(Number.POSITIVE_INFINITY)</td><td style="text-align:left">/Infinity/</td></tr></tbody></table><h1 id="8-常用正则表达式"><a href="#8-常用正则表达式" class="headerlink" title="8 常用正则表达式"></a>8 常用正则表达式</h1><ul><li>用户名</li></ul><p><code>/^[a-z0-9_-]{3,16}$/</code></p><ul><li>密码</li></ul><p><code>/^[a-z0-9_-]{6,18}$/</code></p><ul><li>十六进制值</li></ul><p><code>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</code></p><ul><li>电子邮箱</li></ul><p><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</code></p><p><code>/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/</code></p><ul><li>URL</li></ul><p><code>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</code></p><ul><li>IP 地址</li></ul><p><code>/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/</code></p><p><code>/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</code></p><ul><li>HTML 标签</li></ul><p><code>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</code></p><ul><li>删除代码\注释</li></ul><p><code>/(?&lt;!http:|\S)//.*$/</code></p><ul><li>Unicode编码中的汉字范围</li></ul><p><code>/^[\u2E80-\u9FFF]+$/</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-修饰词&quot;&gt;&lt;a href=&quot;#1-修饰词&quot; class=&quot;headerlink&quot; title=&quot;1 修饰词&quot;&gt;&lt;/a&gt;1 修饰词&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 忽略大小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; 全局匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; 把&lt;code&gt;\n&lt;/code&gt;识别为多行&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/categories/js-thinking/"/>
    
    
      <category term="object" scheme="https://mowatermelon.github.io/tags/object/"/>
    
      <category term="watermelon" scheme="https://mowatermelon.github.io/tags/watermelon/"/>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/tags/js-thinking/"/>
    
      <category term="regexp" scheme="https://mowatermelon.github.io/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>ArcGISJS学习之规范化json数据</title>
    <link href="https://mowatermelon.github.io/2017/10/29/arcgis-learning-json/"/>
    <id>https://mowatermelon.github.io/2017/10/29/arcgis-learning-json/</id>
    <published>2017-10-28T16:00:00.000Z</published>
    <updated>2018-01-11T08:52:43.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-GeoJson规范"><a href="#1-GeoJson规范" class="headerlink" title="1 GeoJson规范"></a>1 GeoJson规范</h1><h2 id="1-1-概要"><a href="#1-1-概要" class="headerlink" title="1.1 概要"></a>1.1 概要</h2><h3 id="1-1-1-FeatureCollection"><a href="#1-1-1-FeatureCollection" class="headerlink" title="1.1.1 FeatureCollection"></a>1.1.1 FeatureCollection</h3><a id="more"></a><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">数据类型</td><td style="text-align:left">string</td><td style="text-align:left">FeatureCollection</td></tr><tr><td style="text-align:left">metadata</td><td style="text-align:left">页头信息</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>1.2 metadata</code></td></tr><tr><td style="text-align:left">features</td><td style="text-align:left">数据集</td><td style="text-align:left">array</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">feature</td><td style="text-align:left">数据集点</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>1.3 feature</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_GeoJson=&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">    <span class="string">"metadata"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"features"</span>: [feature,feature,feature]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-GeometryCollection"><a href="#1-1-2-GeometryCollection" class="headerlink" title="1.1.2 GeometryCollection"></a>1.1.2 GeometryCollection</h3><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">数据类型</td><td style="text-align:left">string</td><td style="text-align:left">GeometryCollection</td></tr><tr><td style="text-align:left">geometries</td><td style="text-align:left">数据集</td><td style="text-align:left">array</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">geometry</td><td style="text-align:left">数据集点</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>1.5 geometry</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_GeoJson=  &#123;</span><br><span class="line">  <span class="string">"type"</span> : <span class="string">"GeometryCollection"</span>,</span><br><span class="line">  <span class="string">"geometries"</span> : [geometry,geometry,geometry]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-metadata"><a href="#1-2-metadata" class="headerlink" title="1.2 metadata"></a>1.2 metadata</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">generated</td><td style="text-align:left">数据产生时间</td><td style="text-align:left">date</td><td style="text-align:left">新建时间的时间戳</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">文件路径</td><td style="text-align:left">string</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">title</td><td style="text-align:left">产生数据的公司名</td><td style="text-align:left">string</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">status</td><td style="text-align:left">获取文件返回状态值</td><td style="text-align:left">number</td><td style="text-align:left">默认为200</td></tr><tr><td style="text-align:left">count</td><td style="text-align:left">数据中features的长度</td><td style="text-align:left">number</td><td style="text-align:left">默认为0</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> starttime =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> t_metadata=&#123;</span><br><span class="line">  <span class="string">"generated"</span>: <span class="built_in">Number</span>(starttime),</span><br><span class="line">  <span class="string">"url"</span>:<span class="string">''</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"西瓜信息技术股份有限公司"</span>,</span><br><span class="line">  <span class="string">"status"</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">"api"</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="string">"count"</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-feature"><a href="#1-3-feature" class="headerlink" title="1.3 feature"></a>1.3 feature</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">数据类型</td><td style="text-align:left">string</td><td style="text-align:left">Feature</td></tr><tr><td style="text-align:left">properties</td><td style="text-align:left">功能属性</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>1.4 properties</code></td></tr><tr><td style="text-align:left">geometry</td><td style="text-align:left">地理信息点集合</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>1.5 geometry</code></td></tr><tr><td style="text-align:left">id</td><td style="text-align:left">唯一标识的属性值</td><td style="text-align:left">string</td><td style="text-align:left">默认为空</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_feature=&#123;</span><br><span class="line">  type: <span class="string">'Feature'</span>,</span><br><span class="line">  properties:  &#123;&#125;,</span><br><span class="line">  geometry:  &#123;&#125;,</span><br><span class="line">  id:<span class="string">'Feature_1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-properties"><a href="#1-4-properties" class="headerlink" title="1.4 properties"></a>1.4 properties</h2><blockquote><p>属性参数值完全自定义，仅列出几个常用的</p></blockquote><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">time</td><td style="text-align:left">文件创建时间戳</td><td style="text-align:left">date</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">updated</td><td style="text-align:left">文件更新时间戳</td><td style="text-align:left">date</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">net</td><td style="text-align:left">区分不同feature的前缀</td><td style="text-align:left">string</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">code</td><td style="text-align:left">区分不同feature的唯一标识后缀</td><td style="text-align:left">string</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">place</td><td style="text-align:left">地点所属信息</td><td style="text-align:left">string</td><td style="text-align:left">默认为空</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_properties=&#123;</span><br><span class="line">    time: <span class="number">1513318909100</span>,</span><br><span class="line">    updated: <span class="number">1513319134021</span>,</span><br><span class="line">    net: <span class="string">"ci"</span>,</span><br><span class="line">    code: <span class="string">"37830103"</span>,</span><br><span class="line">    place: <span class="string">"9km NE of Aguanga, CA"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-geometry"><a href="#1-5-geometry" class="headerlink" title="1.5 geometry"></a>1.5 geometry</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">数据类型</td><td style="text-align:left">string</td><td style="text-align:left">[“Point”,”LineString”,”Polygon”,”MultiPoint”,”MultiLineString”,”MultiPolygon”]</td></tr><tr><td style="text-align:left">coordinates</td><td style="text-align:left">坐标点</td><td style="text-align:left">array</td><td style="text-align:left">默认为空</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_geometry=&#123;</span><br><span class="line">    type: <span class="string">"Point"</span>,</span><br><span class="line">    coordinates: [</span><br><span class="line">      <span class="number">-116.7933333</span>,</span><br><span class="line">      <span class="number">33.4948333</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="2-ArcGISJson规范"><a href="#2-ArcGISJson规范" class="headerlink" title="2 ArcGISJson规范"></a>2 ArcGISJson规范</h1><h2 id="2-1-概要"><a href="#2-1-概要" class="headerlink" title="2.1 概要"></a>2.1 概要</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">geometry</td><td style="text-align:left">数据点集合</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>2.2 geometry</code></td></tr><tr><td style="text-align:left">attributes</td><td style="text-align:left">从数据库带出来的点数据属性</td><td style="text-align:left">json</td><td style="text-align:left">默认为空</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_ArcGISJson=&#123;</span><br><span class="line">    geometry: &#123;&#125;,</span><br><span class="line">    attributes:&#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-geometry"><a href="#2-2-geometry" class="headerlink" title="2.2 geometry"></a>2.2 geometry</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">rings</td><td style="text-align:left">数据点数据集合</td><td style="text-align:left">array</td><td style="text-align:left">默认为空</td></tr><tr><td style="text-align:left">spatialReference</td><td style="text-align:left">坐标系相关信息</td><td style="text-align:left">json</td><td style="text-align:left">详细参考<code>2.3 spatialReference</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_geometry=&#123;</span><br><span class="line">    rings: [],</span><br><span class="line">    spatialReference:&#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-spatialReference"><a href="#2-3-spatialReference" class="headerlink" title="2.3 spatialReference"></a>2.3 spatialReference</h2><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">含义</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">wkid</td><td style="text-align:left">当前坐标系</td><td style="text-align:left">number</td><td style="text-align:left">默认为102100</td></tr><tr><td style="text-align:left">latestWkid</td><td style="text-align:left">上形状的一个坐标系</td><td style="text-align:left">number</td><td style="text-align:left">默认为3857</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个栗子</span></span><br><span class="line"><span class="keyword">var</span> t_spatialReference=&#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">2361</span>,</span><br><span class="line">    <span class="string">"latestWkid"</span>: <span class="number">4358</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="3-dataJson规范"><a href="#3-dataJson规范" class="headerlink" title="3 dataJson规范"></a>3 dataJson规范</h1><h2 id="3-1-Point"><a href="#3-1-Point" class="headerlink" title="3.1 Point"></a>3.1 Point</h2><h3 id="3-1-1-Point数据"><a href="#3-1-1-Point数据" class="headerlink" title="3.1.1 Point数据"></a>3.1.1 Point数据</h3><blockquote><p>xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="gb2312" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">GeoStar</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"point"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403538.6587504"</span> <span class="attr">y</span>=<span class="string">"3074587.77015091"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GeoStar</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">  <span class="string">"coordinates"</span>: [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"x"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">"y"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">"spatialReference"</span>:&#123;</span><br><span class="line">    <span class="string">"wkid"</span>:<span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-MultiPoint数据"><a href="#3-1-2-MultiPoint数据" class="headerlink" title="3.1.2 MultiPoint数据"></a>3.1.2 MultiPoint数据</h3><blockquote><p>xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="gb2312" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">GeoStar</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"point"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403538.6587504"</span> <span class="attr">y</span>=<span class="string">"3074587.77015091"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39403543.4112997"</span> <span class="attr">y</span>=<span class="string">"3074417.86005092"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">x</span>=<span class="string">"39403540.6814504"</span> <span class="attr">y</span>=<span class="string">"3074422.05055086"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">x</span>=<span class="string">"39403533.3421502"</span> <span class="attr">y</span>=<span class="string">"3074433.35985036"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GeoStar</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"MultiPoint"</span>,</span><br><span class="line">  <span class="string">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403538.6587504</span>,</span><br><span class="line">      <span class="number">3074587.77015091</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403543.4112997</span>,</span><br><span class="line">      <span class="number">3074417.86005092</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403540.6814504</span>,</span><br><span class="line">      <span class="number">3074422.05055086</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403533.3421502</span>,</span><br><span class="line">      <span class="number">3074433.35985036</span></span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"points"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403538.6587504</span>,</span><br><span class="line">      <span class="number">3074587.77015091</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403543.4112997</span>,</span><br><span class="line">      <span class="number">3074417.86005092</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403540.6814504</span>,</span><br><span class="line">      <span class="number">3074422.05055086</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39403533.3421502</span>,</span><br><span class="line">      <span class="number">3074433.35985036</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Polyline"><a href="#3-2-Polyline" class="headerlink" title="3.2 Polyline"></a>3.2 Polyline</h2><h3 id="3-2-1-Polyline数据"><a href="#3-2-1-Polyline数据" class="headerlink" title="3.2.1 Polyline数据"></a>3.2.1 Polyline数据</h3><blockquote><p>xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="gb2312" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">GeoStar</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39402074.9148183"</span> <span class="attr">y</span>=<span class="string">"3085203.38736518"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39402075.2866289"</span> <span class="attr">y</span>=<span class="string">"3085201.19406264"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GeoStar</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">  <span class="string">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39402074.9148183</span>,</span><br><span class="line">      <span class="number">3085203.38736518</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">39402075.2866289</span>,</span><br><span class="line">      <span class="number">3085201.19406264</span></span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"paths"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39402074.9148183</span>,</span><br><span class="line">        <span class="number">3085203.38736518</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39402075.2866289</span>,</span><br><span class="line">        <span class="number">3085201.19406264</span></span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-MultiPolyline数据"><a href="#3-2-2-MultiPolyline数据" class="headerlink" title="3.2.2 MultiPolyline数据"></a>3.2.2 MultiPolyline数据</h3><blockquote><p>xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="gb2312" ?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">GeoStar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39402074.9148183"</span> <span class="attr">y</span>=<span class="string">"3085203.38736518"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39402075.2866289"</span> <span class="attr">y</span>=<span class="string">"3085201.19406264"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39402088.7842049"</span> <span class="attr">y</span>=<span class="string">"3085954.221558"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39402089.6243769"</span> <span class="attr">y</span>=<span class="string">"3085957.43230666"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39402089.6243769"</span> <span class="attr">y</span>=<span class="string">"3085957.43230666"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39402099.5382456"</span> <span class="attr">y</span>=<span class="string">"3085954.811617"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">type</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39402099.5382456"</span> <span class="attr">y</span>=<span class="string">"3085954.811617"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39402097.2217816"</span> <span class="attr">y</span>=<span class="string">"3085946.92696906"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">GeoStar</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"MultiLineString"</span>,</span><br><span class="line">  <span class="string">"coordinates"</span>: [</span><br><span class="line">    [ [<span class="number">39402074.9148183</span>,<span class="number">3085203.38736518</span>],[<span class="number">39402075.2866289</span>,<span class="number">3085201.19406264</span>] ],</span><br><span class="line">    [ [<span class="number">39402088.7842049</span>,<span class="number">3085954.221558</span>],[<span class="number">39402089.6243769</span>,<span class="number">3085957.4323066</span>] ],</span><br><span class="line">    [ [<span class="number">39402089.6243769</span>,<span class="number">3085957.43230666</span>],[<span class="number">39402099.5382456</span>,<span class="number">3085954.811617</span>] ],</span><br><span class="line">    [ [<span class="number">39402099.5382456</span>,<span class="number">3085954.811617</span>],[<span class="number">39402097.2217816</span>,<span class="number">3085946.92696906</span>] ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"paths"</span>: [</span><br><span class="line">    [ [<span class="number">39402074.9148183</span>,<span class="number">3085203.38736518</span>],[<span class="number">39402075.2866289</span>,<span class="number">3085201.19406264</span>] ],</span><br><span class="line">    [ [<span class="number">39402088.7842049</span>,<span class="number">3085954.221558</span>],[<span class="number">39402089.6243769</span>,<span class="number">3085957.4323066</span>] ],</span><br><span class="line">    [ [<span class="number">39402089.6243769</span>,<span class="number">3085957.43230666</span>],[<span class="number">39402099.5382456</span>,<span class="number">3085954.811617</span>] ],</span><br><span class="line">    [ [<span class="number">39402099.5382456</span>,<span class="number">3085954.811617</span>],[<span class="number">39402097.2217816</span>,<span class="number">3085946.92696906</span>] ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"spatialReference"</span>:&#123;</span><br><span class="line">    <span class="string">"wkid"</span>:<span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Polygon"><a href="#3-3-Polygon" class="headerlink" title="3.3 Polygon"></a>3.3 Polygon</h2><h3 id="3-3-1-Polygon数据"><a href="#3-3-1-Polygon数据" class="headerlink" title="3.3.1 Polygon数据"></a>3.3.1 Polygon数据</h3><blockquote><p>xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="gb2312" ?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">GeoStar</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403576.9029002"</span> <span class="attr">y</span>=<span class="string">"3074528.48695056"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39403553.7662496"</span> <span class="attr">y</span>=<span class="string">"3074513.69820033"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">x</span>=<span class="string">"39403551.5182278"</span> <span class="attr">y</span>=<span class="string">"3074517.19848639"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">x</span>=<span class="string">"39403548.3623503"</span> <span class="attr">y</span>=<span class="string">"3074522.11235071"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"5"</span> <span class="attr">x</span>=<span class="string">"39403571.3602499"</span> <span class="attr">y</span>=<span class="string">"3074537.01955018"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"6"</span> <span class="attr">x</span>=<span class="string">"39403574.5269088"</span> <span class="attr">y</span>=<span class="string">"3074532.1446557"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"7"</span> <span class="attr">x</span>=<span class="string">"39403576.9029002"</span> <span class="attr">y</span>=<span class="string">"3074528.48695056"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">GeoStar</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">  <span class="string">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403576.9029002</span>,</span><br><span class="line">        <span class="number">3074528.48695056</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403553.7662496</span>,</span><br><span class="line">        <span class="number">3074513.69820033</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403551.5182278</span>,</span><br><span class="line">        <span class="number">3074517.19848639</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403548.3623503</span>,</span><br><span class="line">        <span class="number">3074522.11235071</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403571.3602499</span>,</span><br><span class="line">        <span class="number">3074537.01955018</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403574.5269088</span>,</span><br><span class="line">        <span class="number">3074532.1446557</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403576.9029002</span>,</span><br><span class="line">        <span class="number">3074528.48695056</span></span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"rings"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403576.9029002</span>,</span><br><span class="line">        <span class="number">3074528.48695056</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403553.7662496</span>,</span><br><span class="line">        <span class="number">3074513.69820033</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403551.5182278</span>,</span><br><span class="line">        <span class="number">3074517.19848639</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403548.3623503</span>,</span><br><span class="line">        <span class="number">3074522.11235071</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403571.3602499</span>,</span><br><span class="line">        <span class="number">3074537.01955018</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403574.5269088</span>,</span><br><span class="line">        <span class="number">3074532.1446557</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="number">39403576.9029002</span>,</span><br><span class="line">        <span class="number">3074528.48695056</span></span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-MultiPolygon数据"><a href="#3-3-2-MultiPolygon数据" class="headerlink" title="3.3.2 MultiPolygon数据"></a>3.3.2 MultiPolygon数据</h3><blockquote><p>xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="gb2312" ?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">GeoStar</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403576.9029002"</span> <span class="attr">y</span>=<span class="string">"3074528.48695056"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39403553.7662496"</span> <span class="attr">y</span>=<span class="string">"3074513.69820033"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">x</span>=<span class="string">"39403551.5182278"</span> <span class="attr">y</span>=<span class="string">"3074517.19848639"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">x</span>=<span class="string">"39403548.3623503"</span> <span class="attr">y</span>=<span class="string">"3074522.11235071"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"5"</span> <span class="attr">x</span>=<span class="string">"39403571.3602499"</span> <span class="attr">y</span>=<span class="string">"3074537.01955018"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"6"</span> <span class="attr">x</span>=<span class="string">"39403574.5269088"</span> <span class="attr">y</span>=<span class="string">"3074532.1446557"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"7"</span> <span class="attr">x</span>=<span class="string">"39403576.9029002"</span> <span class="attr">y</span>=<span class="string">"3074528.48695056"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403571.5510812"</span> <span class="attr">y</span>=<span class="string">"3074204.91445576"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39403606.1226998"</span> <span class="attr">y</span>=<span class="string">"3074150.2527506"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">x</span>=<span class="string">"39403557.7287"</span> <span class="attr">y</span>=<span class="string">"3074119.98975049"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">x</span>=<span class="string">"39403502.7917"</span> <span class="attr">y</span>=<span class="string">"3074207.79574996"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"5"</span> <span class="attr">x</span>=<span class="string">"39403550.6100553"</span> <span class="attr">y</span>=<span class="string">"3074238.02463336"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"6"</span> <span class="attr">x</span>=<span class="string">"39403550.657939"</span> <span class="attr">y</span>=<span class="string">"3074237.94859318"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"7"</span> <span class="attr">x</span>=<span class="string">"39403571.5510812"</span> <span class="attr">y</span>=<span class="string">"3074204.91445576"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403611.6048495"</span> <span class="attr">y</span>=<span class="string">"3074470.44865039"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39403589.647"</span> <span class="attr">y</span>=<span class="string">"3074456.46835047"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">x</span>=<span class="string">"39403588.0641691"</span> <span class="attr">y</span>=<span class="string">"3074459.0560815"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">x</span>=<span class="string">"39403586.5204"</span> <span class="attr">y</span>=<span class="string">"3074461.57995062"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"5"</span> <span class="attr">x</span>=<span class="string">"39403583.09385"</span> <span class="attr">y</span>=<span class="string">"3074466.70520084"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"6"</span> <span class="attr">x</span>=<span class="string">"39403604.79485"</span> <span class="attr">y</span>=<span class="string">"3074481.21385012"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"7"</span> <span class="attr">x</span>=<span class="string">"39403608.22145"</span> <span class="attr">y</span>=<span class="string">"3074476.0886009"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"8"</span> <span class="attr">x</span>=<span class="string">"39403609.9761004"</span> <span class="attr">y</span>=<span class="string">"3074473.0069"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"9"</span> <span class="attr">x</span>=<span class="string">"39403611.6048495"</span> <span class="attr">y</span>=<span class="string">"3074470.44865039"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pts</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">type</span>=<span class="string">"polygon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"1"</span> <span class="attr">x</span>=<span class="string">"39403602.4861997"</span> <span class="attr">y</span>=<span class="string">"3074075.92495068"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"2"</span> <span class="attr">x</span>=<span class="string">"39403606.2165827"</span> <span class="attr">y</span>=<span class="string">"3074069.99364024"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"3"</span> <span class="attr">x</span>=<span class="string">"39403610.4104819"</span> <span class="attr">y</span>=<span class="string">"3074063.32533933"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"4"</span> <span class="attr">x</span>=<span class="string">"39403613.1025495"</span> <span class="attr">y</span>=<span class="string">"3074059.04495028"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"5"</span> <span class="attr">x</span>=<span class="string">"39403600.9451504"</span> <span class="attr">y</span>=<span class="string">"3074051.29040028"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"6"</span> <span class="attr">x</span>=<span class="string">"39403598.2374224"</span> <span class="attr">y</span>=<span class="string">"3074055.56076534"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"7"</span> <span class="attr">x</span>=<span class="string">"39403593.9818085"</span> <span class="attr">y</span>=<span class="string">"3074062.27230567"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"8"</span> <span class="attr">x</span>=<span class="string">"39403590.2175995"</span> <span class="attr">y</span>=<span class="string">"3074068.20885092"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pt</span> <span class="attr">num</span>=<span class="string">"9"</span> <span class="attr">x</span>=<span class="string">"39403602.4861997"</span> <span class="attr">y</span>=<span class="string">"3074075.92495068"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pts</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">GeoStar</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">  <span class="string">"coordinates"</span>: [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403576.9029002</span>,<span class="number">3074528.48695056</span>],[<span class="number">39403553.7662496</span>,<span class="number">3074513.69820033</span>],[<span class="number">39403551.5182278</span>,<span class="number">3074517.19848639</span>],[<span class="number">39403548.3623503</span>,<span class="number">3074522.11235071</span>],[<span class="number">39403571.3602499</span>,<span class="number">3074537.01955018</span>],[<span class="number">39403574.5269088</span>,<span class="number">3074532.1446557</span>],[<span class="number">39403576.9029002</span>,<span class="number">3074528.48695056</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403571.5510812</span>,<span class="number">3074204.91445576</span>],[<span class="number">39403606.1226998</span>,<span class="number">3074150.2527506</span>],[<span class="number">39403557.7287</span>,<span class="number">3074119.98975049</span>],[<span class="number">39403502.7917</span>,<span class="number">3074207.79574996</span>],[<span class="number">39403550.6100553</span>,<span class="number">3074238.02463336</span>],[<span class="number">39403550.657939</span>,<span class="number">3074237.94859318</span>],[<span class="number">39403571.5510812</span>,<span class="number">3074204.91445576</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403611.6048495</span>,<span class="number">3074470.44865039</span>],[<span class="number">39403589.647</span>,<span class="number">3074456.46835047</span>],[<span class="number">39403588.0641691</span>,<span class="number">3074459.0560815</span>],[<span class="number">39403586.5204</span>,<span class="number">3074461.57995062</span>],[<span class="number">39403583.09385</span>,<span class="number">3074466.70520084</span>],[<span class="number">39403604.79485</span>,<span class="number">3074481.21385012</span>],[<span class="number">39403608.22145</span>,<span class="number">3074476.0886009</span>],[<span class="number">39403609.9761004</span>,<span class="number">3074473.0069</span>],[<span class="number">39403611.6048495</span>,<span class="number">3074470.44865039</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403602.4861997</span>,<span class="number">3074075.92495068</span>],[<span class="number">39403606.2165827</span>,<span class="number">3074069.99364024</span>],[<span class="number">39403610.4104819</span>,<span class="number">3074063.32533933</span>],[<span class="number">39403613.1025495</span>,<span class="number">3074059.04495028</span>],[<span class="number">39403600.9451504</span>,<span class="number">3074051.29040028</span>],[<span class="number">39403598.2374224</span>,<span class="number">3074055.56076534</span>],[<span class="number">39403593.9818085</span>,<span class="number">3074062.27230567</span>],[<span class="number">39403590.2175995</span>,<span class="number">3074068.20885092</span>],[<span class="number">39403602.4861997</span>,<span class="number">3074075.92495068</span>]</span><br><span class="line">      ],</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"rings"</span>: [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403576.9029002</span>,<span class="number">3074528.48695056</span>],[<span class="number">39403553.7662496</span>,<span class="number">3074513.69820033</span>],[<span class="number">39403551.5182278</span>,<span class="number">3074517.19848639</span>],[<span class="number">39403548.3623503</span>,<span class="number">3074522.11235071</span>],[<span class="number">39403571.3602499</span>,<span class="number">3074537.01955018</span>],[<span class="number">39403574.5269088</span>,<span class="number">3074532.1446557</span>],[<span class="number">39403576.9029002</span>,<span class="number">3074528.48695056</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403571.5510812</span>,<span class="number">3074204.91445576</span>],[<span class="number">39403606.1226998</span>,<span class="number">3074150.2527506</span>],[<span class="number">39403557.7287</span>,<span class="number">3074119.98975049</span>],[<span class="number">39403502.7917</span>,<span class="number">3074207.79574996</span>],[<span class="number">39403550.6100553</span>,<span class="number">3074238.02463336</span>],[<span class="number">39403550.657939</span>,<span class="number">3074237.94859318</span>],[<span class="number">39403571.5510812</span>,<span class="number">3074204.91445576</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403611.6048495</span>,<span class="number">3074470.44865039</span>],[<span class="number">39403589.647</span>,<span class="number">3074456.46835047</span>],[<span class="number">39403588.0641691</span>,<span class="number">3074459.0560815</span>],[<span class="number">39403586.5204</span>,<span class="number">3074461.57995062</span>],[<span class="number">39403583.09385</span>,<span class="number">3074466.70520084</span>],[<span class="number">39403604.79485</span>,<span class="number">3074481.21385012</span>],[<span class="number">39403608.22145</span>,<span class="number">3074476.0886009</span>],[<span class="number">39403609.9761004</span>,<span class="number">3074473.0069</span>],[<span class="number">39403611.6048495</span>,<span class="number">3074470.44865039</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">39403602.4861997</span>,<span class="number">3074075.92495068</span>],[<span class="number">39403606.2165827</span>,<span class="number">3074069.99364024</span>],[<span class="number">39403610.4104819</span>,<span class="number">3074063.32533933</span>],[<span class="number">39403613.1025495</span>,<span class="number">3074059.04495028</span>],[<span class="number">39403600.9451504</span>,<span class="number">3074051.29040028</span>],[<span class="number">39403598.2374224</span>,<span class="number">3074055.56076534</span>],[<span class="number">39403593.9818085</span>,<span class="number">3074062.27230567</span>],[<span class="number">39403590.2175995</span>,<span class="number">3074068.20885092</span>],[<span class="number">39403602.4861997</span>,<span class="number">3074075.92495068</span>]</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  <span class="string">"spatialReference"</span>:&#123;</span><br><span class="line">    <span class="string">"wkid"</span>:<span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="混合数据"><a href="#混合数据" class="headerlink" title="混合数据"></a>混合数据</h2><blockquote><p>GeoJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span> : <span class="string">"GeometryCollection"</span>,</span><br><span class="line">  <span class="string">"geometries"</span> : [&#123;</span><br><span class="line">    <span class="string">"type"</span> : <span class="string">"Polygon"</span>,</span><br><span class="line">    <span class="string">"coordinates"</span> : [[[<span class="number">-95</span>, <span class="number">43</span>], [<span class="number">-95</span>, <span class="number">50</span>], [<span class="number">-90</span>, <span class="number">50</span>], [<span class="number">-91</span>, <span class="number">42</span>], [<span class="number">-95</span>, <span class="number">43</span>]]]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"type"</span> : <span class="string">"LineString"</span>,</span><br><span class="line">    <span class="string">"coordinates"</span> : [[<span class="number">-89</span>, <span class="number">42</span>], [<span class="number">-89</span>, <span class="number">50</span>], [<span class="number">-80</span>, <span class="number">50</span>], [<span class="number">-80</span>, <span class="number">42</span>]]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"type"</span> : <span class="string">"Point"</span>,</span><br><span class="line">    <span class="string">"coordinates"</span> : [<span class="number">-94</span>, <span class="number">46</span>]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="string">"features"</span>: [&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [<span class="number">102.0</span>, <span class="number">0.5</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">        [<span class="number">102.0</span>, <span class="number">0.0</span>],[<span class="number">103.0</span>, <span class="number">1.0</span>],[<span class="number">104.0</span>, <span class="number">0.0</span>],[<span class="number">105.0</span>, <span class="number">1.0</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">        [ [<span class="number">100.0</span>, <span class="number">0.0</span>],[<span class="number">101.0</span>, <span class="number">0.0</span>],[<span class="number">101.0</span>, <span class="number">1.0</span>],[<span class="number">100.0</span>, <span class="number">1.0</span>],[<span class="number">100.0</span>, <span class="number">0.0</span>] ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ArcGISJson</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="string">"rings"</span>: [</span><br><span class="line">    [[<span class="number">-95</span>, <span class="number">43</span>],[<span class="number">-95</span>, <span class="number">50</span>],[<span class="number">-90</span>, <span class="number">50</span>],[<span class="number">-91</span>, <span class="number">42</span>],[<span class="number">-95</span>, <span class="number">43</span>]]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"paths"</span>: [</span><br><span class="line">    [[<span class="number">-89</span>, <span class="number">42</span>],[<span class="number">-89</span>, <span class="number">50</span>],[<span class="number">-80</span>, <span class="number">50</span>],[<span class="number">-80</span>, <span class="number">42</span>]]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"x"</span>: <span class="number">-94</span>,</span><br><span class="line">  <span class="string">"y"</span>: <span class="number">46</span>,</span><br><span class="line">  <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">    <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[&#123;</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">    <span class="string">"x"</span>: <span class="number">102</span>,</span><br><span class="line">    <span class="string">"y"</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">      <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"attributes"</span>: &#123;</span><br><span class="line">    <span class="string">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">    <span class="string">"paths"</span>: [</span><br><span class="line">      [[<span class="number">102</span>, <span class="number">0</span>],[<span class="number">103</span>, <span class="number">1</span>],[<span class="number">104</span>, <span class="number">0</span>],[<span class="number">105</span>, <span class="number">1</span>]]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">      <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"attributes"</span>: &#123;</span><br><span class="line">    <span class="string">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">    <span class="string">"rings"</span>: [</span><br><span class="line">      [ [<span class="number">100</span>,<span class="number">0</span>],[<span class="number">100</span>,<span class="number">1</span>],[<span class="number">101</span>,<span class="number">1</span>],[<span class="number">101</span>,<span class="number">0</span>],[<span class="number">100</span>,<span class="number">0</span>] ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"spatialReference"</span>: &#123;</span><br><span class="line">      <span class="string">"wkid"</span>: <span class="number">4326</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"attributes"</span>: &#123;</span><br><span class="line">    <span class="string">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-GeoJson规范&quot;&gt;&lt;a href=&quot;#1-GeoJson规范&quot; class=&quot;headerlink&quot; title=&quot;1 GeoJson规范&quot;&gt;&lt;/a&gt;1 GeoJson规范&lt;/h1&gt;&lt;h2 id=&quot;1-1-概要&quot;&gt;&lt;a href=&quot;#1-1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.1 概要&quot;&gt;&lt;/a&gt;1.1 概要&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-FeatureCollection&quot;&gt;&lt;a href=&quot;#1-1-1-FeatureCollection&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 FeatureCollection&quot;&gt;&lt;/a&gt;1.1.1 FeatureCollection&lt;/h3&gt;
    
    </summary>
    
      <category term="ArcGIS" scheme="https://mowatermelon.github.io/categories/ArcGIS/"/>
    
    
      <category term="GeoJson" scheme="https://mowatermelon.github.io/tags/GeoJson/"/>
    
      <category term="ArcGIS Geometries" scheme="https://mowatermelon.github.io/tags/ArcGIS-Geometries/"/>
    
      <category term="ArcGIS for JS" scheme="https://mowatermelon.github.io/tags/ArcGIS-for-JS/"/>
    
  </entry>
  
  <entry>
    <title>前端思考之接手新项目</title>
    <link href="https://mowatermelon.github.io/2017/10/28/thinking-in-the-front-end-knowledge-receive-new-project/"/>
    <id>https://mowatermelon.github.io/2017/10/28/thinking-in-the-front-end-knowledge-receive-new-project/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2017-12-19T09:36:07.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近接手了一个比较老的项目，整理一下我接手之后操作流程</p></blockquote><a id="more"></a><h1 id="1-阅读项目代码"><a href="#1-阅读项目代码" class="headerlink" title="1 阅读项目代码"></a>1 阅读项目代码</h1><h2 id="1-1-配置代码"><a href="#1-1-配置代码" class="headerlink" title="1.1 配置代码"></a>1.1 配置代码</h2><h3 id="1-1-1-参数配置代码"><a href="#1-1-1-参数配置代码" class="headerlink" title="1.1.1 参数配置代码"></a>1.1.1 参数配置代码</h3><p>  <code>&lt;serverInfor&gt;&lt;/serverInfor&gt;</code>,<code>&lt;map&gt;&lt;/map&gt;</code></p><h3 id="1-1-1-组件配置代码"><a href="#1-1-1-组件配置代码" class="headerlink" title="1.1.1 组件配置代码"></a>1.1.1 组件配置代码</h3><p>  <code>&lt;formInfo&gt;&lt;/formInfo&gt;</code>,<code>&lt;business&gt;&lt;/business&gt;</code></p><h3 id="1-1-1-路由配置代码"><a href="#1-1-1-路由配置代码" class="headerlink" title="1.1.1 路由配置代码"></a>1.1.1 路由配置代码</h3><p>  <code>&lt;widgetcontainer&gt;&lt;/widgetcontainer&gt;</code></p><h2 id="1-2-使用到的前端库"><a href="#1-2-使用到的前端库" class="headerlink" title="1.2 使用到的前端库"></a>1.2 使用到的前端库</h2><h3 id="1-2-1-样式库"><a href="#1-2-1-样式库" class="headerlink" title="1.2.1 样式库"></a>1.2.1 样式库</h3><p>  <code>esri.dijit</code>,<code>esri.symbol</code>,<code>ligerUI</code></p><h3 id="1-2-2-控制库"><a href="#1-2-2-控制库" class="headerlink" title="1.2.2 控制库"></a>1.2.2 控制库</h3><p>  <code>dojo</code>,<code>esri.map</code>,<code>esri.geometry</code></p><h1 id="2-分析新增功能需求"><a href="#2-分析新增功能需求" class="headerlink" title="2 分析新增功能需求"></a>2 分析新增功能需求</h1><ul><li><p>2.1 添加对应功能按钮到主页面</p></li><li><p>2.2 绑定功能对应的面板功能</p></li><li><p>2.3 面板能够选择本地文件夹</p></li><li><p>2.4 上传文件到后台</p></li><li><p>2.5 后台分析文件内容</p></li><li><p>2.6 后台返回对应规范的结果集</p></li><li><p>2.7 前台获取到数据</p></li><li><p>2.8 对于获取到的数据信息进行分析</p></li><li><p>2.9 获取需要的参数</p></li><li><p>2.10 通过获取的参数，调用相关方法进行页面展示</p></li></ul><h1 id="3-确认技术实现逻辑"><a href="#3-确认技术实现逻辑" class="headerlink" title="3 确认技术实现逻辑"></a>3 确认技术实现逻辑</h1><h2 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h2><p>在<code>&lt;widgetcontainer&gt;</code>中添加一个新的<code>widget</code>，并寻找合适的功能按钮图片。</p><h2 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h2><p>在<code>项目/javascript/Widget</code>文件路径中，参考其他组件js模版，新建<code>OverlayfileMsg.js</code>。</p><h2 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h2><p>在页面拼接Template中添加<code>input[type=file]</code>的组件，并添加相关样式，优化显示效果。为了更好的提示效果，绑定一个<code>span</code>标签实时进行显示上传文件路径。</p><h2 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h2><p>先将上传文件的类型进行判断，是否为空和或者用户选择的上传类型是否匹配。</p><h2 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h2><p>将通过判断的数据，读取相关配置，通过<code>dojo.io.iframe.send()</code>方法传到对应的<code>c#</code>后台，后台通过<code>HttpFileCollection files = context.Request.Files;HttpPostedFile fileObj = files[i];</code>进行获取，先判断文件上传格式是否正确，如果都正确，则进行文件保存到服务器指定路径处理，并返回处理结果。</p><h2 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h2><blockquote><p>后台返回对应规范的结果集</p></blockquote><ul><li>文件上传失败！（初始值）</li><li>请选择文件。</li><li>目录名不正确。</li><li>上传文件大小超过限制。</li><li>上传文件扩展名是不允许的扩展名。</li><li>上传成功</li></ul><h2 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h2><blockquote><p>前台获取到数据，获取后台实际返回值，判断后台处理状态，根据不同状态做对应处理。</p></blockquote><h3 id="3-7-1-上传成功"><a href="#3-7-1-上传成功" class="headerlink" title="3.7.1 上传成功"></a>3.7.1 上传成功</h3><p>获取需要的参数，调用相关方法进行页面展示</p><h3 id="3-7-2-上传失败"><a href="#3-7-2-上传失败" class="headerlink" title="3.7.2 上传失败"></a>3.7.2 上传失败</h3><p>对于请求后台失败的情况下进行直接弹窗报错</p><h1 id="4-开始写代码"><a href="#4-开始写代码" class="headerlink" title="4 开始写代码"></a>4 开始写代码</h1><p>  通过对应代码编辑器，编写代码，如果遇见错误，通过相关<a href="https://github.com/">开源社区</a>，搜索相关案例，了解<a href="http://dojotoolkit.org/reference-guide/1.9/">dojo实现机制</a>，了解<a href="https://developers.arcgis.com/javascript/3/jsapi/">esri实现机制</a>。</p><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">widget</span> <span class="attr">label</span> =<span class="string">"叠加"</span>  <span class="attr">visible</span>=<span class="string">"true"</span> <span class="attr">index</span>=<span class="string">"8"</span>   <span class="attr">config</span>=<span class="string">"Widget.OverlayfileMsg"</span> <span class="attr">icon</span>=<span class="string">"images/img/sharp.png"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">dojo.declare(<span class="string">"Widget.OverlayfileMsg"</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">    title: <span class="string">"叠加外部数据"</span>,</span><br><span class="line">    divID: <span class="string">"LoadDiv"</span>,</span><br><span class="line">    btnLoad: <span class="string">"btnLoadFileByName"</span>,</span><br><span class="line">    formFile:<span class="string">"fileForm"</span>,</span><br><span class="line">    ConfigTool: <span class="literal">null</span>,</span><br><span class="line">    map: <span class="literal">null</span>,</span><br><span class="line">    opened: <span class="literal">false</span>,</span><br><span class="line">    graphicLayer: <span class="literal">null</span>,</span><br><span class="line">    floatPanel: <span class="literal">null</span>,</span><br><span class="line">    floatPanelHeight: <span class="number">128</span>,</span><br><span class="line">    floatPanelWith: <span class="number">288</span>,</span><br><span class="line">    qryTemplate: <span class="string">""</span>,</span><br><span class="line">    adjust: <span class="number">12</span>,</span><br><span class="line">    highlightSymbol: <span class="literal">null</span>,</span><br><span class="line">    EmptyGraphicLayer: <span class="literal">null</span>, <span class="comment">//空白图层</span></span><br><span class="line">    handleMapOnClickHandle: <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">constructor</span>: function (param) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    CreateQryTemplate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    startup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    adjustFloatPanelTitle: <span class="function"><span class="keyword">function</span> (<span class="params">adjust</span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    setSubmit:<span class="function"><span class="keyword">function</span>(<span class="params">fileType</span>)</span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    initalPanel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"l-button"</span> <span class="attr">id</span>=<span class="string">"addfile"</span>  <span class="attr">style</span>=<span class="string">"position: relative;display:inline-block;margin:0 auto;line-height: 24px;text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"fileUp"</span> <span class="attr">id</span> =<span class="string">"btnLoadFile"</span> <span class="attr">style</span>=<span class="string">"position: absolute;right: 0;top: 0;opacity: 0;width: 100%;cursor: pointer;text-indent: -2em;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------------------------OverlayfileMsg.js*/</span></span><br><span class="line"></span><br><span class="line">dojo.connect(dojo.byId(<span class="keyword">this</span>.btnFileLoad), <span class="string">"onchange"</span>, <span class="keyword">this</span>, <span class="string">"changeFile"</span>);</span><br><span class="line">changeFile:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">    <span class="keyword">var</span> fileObj = dojo.byId(<span class="keyword">this</span>.btnFileLoad);</span><br><span class="line">    <span class="keyword">var</span> nameObj = dojo.byId(<span class="keyword">this</span>.spanFileLoad);</span><br><span class="line">    <span class="keyword">if</span>(fileObj.value.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        nameObj.innerHTML=fileObj.files[<span class="number">0</span>].name;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        nameObj.innerHTML=<span class="string">"未选择任何文件"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> arrRadioItem = dojo.query(<span class="string">"input[type='radio']"</span>);</span><br><span class="line">dojo.forEach(arrRadioItem, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    dojo.connect(item, <span class="string">"onclick"</span>, item, _this.checkRadio);</span><br><span class="line">&#125;);</span><br><span class="line">checkRadio: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//保证单选按钮的唯一性</span></span><br><span class="line">    dojo.query(<span class="string">".radio"</span> + obj.srcElement.name).parent().siblings().children().attr(<span class="string">"checked"</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;,</span><br><span class="line">checkFileType: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.map &amp;&amp; <span class="keyword">this</span>.opened) &#123;</span><br><span class="line">        <span class="keyword">var</span> fileType = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> TempText = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> dataHTML = <span class="keyword">this</span>.dataTemplate();</span><br><span class="line">        <span class="keyword">var</span> fileTypeL = dataHTML.length;</span><br><span class="line">        <span class="keyword">if</span> (fileTypeL == <span class="number">0</span>) &#123;</span><br><span class="line">            fileType = <span class="string">"SHARP"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileTypeL == <span class="number">1</span>) &#123;</span><br><span class="line">            fileType = dataHTML[<span class="number">0</span>].ID;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileTypeL &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            fileType = dojo.query(<span class="string">"input[type='radio']::checked"</span>).attr(<span class="string">"value"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fileType.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fileType = fileType.toString();</span><br><span class="line">            <span class="keyword">var</span> filePath =<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">var</span> fileObj = dojo.byId(<span class="keyword">this</span>.btnFileLoad);</span><br><span class="line">            <span class="keyword">var</span> fileLength =fileObj.files.length;</span><br><span class="line">            <span class="keyword">if</span>(fileType!=<span class="string">"SHARP"</span>)&#123;</span><br><span class="line">                filePath = fileObj.files[<span class="number">0</span>].name;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                filePath = dojo.byId(<span class="keyword">this</span>.spanFileLoad).innerHTML;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// debugger;</span></span><br><span class="line"></span><br><span class="line">            filePath = filePath.toString();</span><br><span class="line">            filePath = filePath.toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (fileLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// debugger;</span></span><br><span class="line">                <span class="keyword">this</span>.addFile(fileType, filePath,fileLength);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TempText = <span class="string">"必须要选择一个文件"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TempText = <span class="string">"必须要选择一个文件类型"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(TempText.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            showMessage(TempText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">checkUnique:<span class="function"><span class="keyword">function</span>(<span class="params">filePath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isRight =<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//给数组去重</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sort(); <span class="comment">//先排序</span></span><br><span class="line">        <span class="keyword">var</span> res = [<span class="keyword">this</span>[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[i] !== res[res.length - <span class="number">1</span>]) &#123;</span><br><span class="line">                res.push(<span class="keyword">this</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> patt=<span class="regexp">/\.+[\w]&#123;3&#125;/g</span></span><br><span class="line">    <span class="keyword">var</span> ml = filePath.replace(patt,<span class="string">''</span>);</span><br><span class="line">    ml = ml.split(<span class="string">"，"</span>).unique();</span><br><span class="line">    <span class="keyword">if</span>(ml.length==<span class="number">1</span>)&#123;</span><br><span class="line">        isRight =<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log("checkUnique");</span></span><br><span class="line">    <span class="comment">// console.log(isRight);</span></span><br><span class="line">    <span class="keyword">return</span> isRight;</span><br><span class="line">&#125;,</span><br><span class="line">checkContainer:<span class="function"><span class="keyword">function</span>(<span class="params">filePath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isRight =<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> checkType = [<span class="string">"dbf"</span>, <span class="string">"shp"</span>, <span class="string">"shx"</span>];</span><br><span class="line">    <span class="keyword">var</span> patt=<span class="regexp">/[\w]+\./g</span>;</span><br><span class="line">    <span class="keyword">var</span> ml = filePath.replace(patt,<span class="string">''</span>);</span><br><span class="line">    ml = ml.toLowerCase().split(<span class="string">"，"</span>);</span><br><span class="line">    <span class="keyword">var</span> rightArray = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;ml.length ; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> pattern = <span class="built_in">RegExp</span>(ml[i]);</span><br><span class="line">      <span class="keyword">if</span>(pattern.test(checkType)&amp;&amp; ml[i]!==<span class="literal">undefined</span>&amp;&amp;!pattern.test(rightArray))&#123;</span><br><span class="line">        rightArray.push(ml[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rightArray.length!=checkType.length)&#123;</span><br><span class="line">        isRight = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log("checkContainer");</span></span><br><span class="line">    <span class="comment">// console.log(isRight);</span></span><br><span class="line">    <span class="keyword">return</span> isRight;</span><br><span class="line">&#125;,</span><br><span class="line">addFile: <span class="function"><span class="keyword">function</span> (<span class="params">fileType, filePath,fileLength</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var filePath = dojo.byId(this.btnFileLoad).attr("value");</span></span><br><span class="line">    <span class="keyword">var</span> isRight = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> TempText = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">    <span class="keyword">switch</span> (fileType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"SHARP"</span>:</span><br><span class="line">            <span class="comment">// debugger;</span></span><br><span class="line">            <span class="keyword">var</span> TempTxt = <span class="string">"请上传同一个Sharp文件，并且至少要选择后缀名为.shp、.dbf和.shx这三种格式，请重新选择！"</span>;</span><br><span class="line">            <span class="keyword">if</span>(fileLength&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                TempText = TempTxt;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fileLength&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.checkUnique(filePath))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">this</span>.checkContainer(filePath)) &#123;</span><br><span class="line">                        TempText = TempTxt;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    TempText = TempTxt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">//判断Shape文件</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"CAD"</span>:</span><br><span class="line">            <span class="keyword">if</span> (filePath.indexOf(<span class="string">".dwg"</span>) == <span class="number">-1</span>||fileLength!=<span class="number">1</span>) &#123;</span><br><span class="line">                TempText = <span class="string">"请只上传一个文件，并且上传文件类型属于CAD文件！请重新选择"</span>;</span><br><span class="line">            &#125;<span class="comment">//判断CAD文件</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"TXT"</span>:</span><br><span class="line">            <span class="keyword">if</span> (filePath.indexOf(<span class="string">".txt"</span>) == <span class="number">-1</span>||fileLength!=<span class="number">1</span>) &#123;</span><br><span class="line">                TempText = <span class="string">"请只上传一个文件，并且上传文件类型属于TXT文件！请重新选择"</span>;</span><br><span class="line">            &#125;<span class="comment">//判断TXT文件</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">if</span> (filePath.indexOf(<span class="string">".txt"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                TempText = <span class="string">"请只上传一个文件，并且上传文件类型属于TXT文件！请重新选择"</span>;</span><br><span class="line">            &#125;<span class="comment">//判断TXT文件</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(TempText.length==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSubmit(fileType);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        showMessage(TempText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------------------------layoutOther.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析文件路径</span></span><br><span class="line">getFXWJLJQueryMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> arrServer = <span class="keyword">this</span>.getFileQueryServerInfo();</span><br><span class="line">    <span class="keyword">var</span> strMethodID = <span class="string">"分析文件路径"</span>;</span><br><span class="line">    result = <span class="keyword">this</span>.getMethod(arrServer, strMethodID);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//获取文件分析服务信息</span></span><br><span class="line">getFileQueryServerInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------------OverlayfileMsg.js*/</span></span><br><span class="line">setSubmit:<span class="function"><span class="keyword">function</span>(<span class="params">fileType</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> method = <span class="keyword">this</span>.ConfigTool.getFXWJLJQueryMethod();</span><br><span class="line">    <span class="keyword">if</span> (method) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadUrl = method.url;</span><br><span class="line">        <span class="keyword">var</span> uploadMethod = method.name;</span><br><span class="line">        <span class="keyword">var</span> _this =<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dojo.io.iframe.send(&#123;</span><br><span class="line">                form:_this.formFile, <span class="comment">//某个form元素包含本地文件路径</span></span><br><span class="line">                method: <span class="string">"GET"</span>,</span><br><span class="line">                handleAs: <span class="string">"html"</span>, <span class="comment">//服务器将返回html页面</span></span><br><span class="line">                url: uploadUrl,</span><br><span class="line">                content:&#123;</span><br><span class="line">                    dir:fileType,</span><br><span class="line">                    method:uploadMethod,</span><br><span class="line">                    global:_this</span><br><span class="line">                &#125;,</span><br><span class="line">                load: <span class="keyword">this</span>.onSubmitted, <span class="comment">//提交成功</span></span><br><span class="line">                error: <span class="keyword">this</span>.onSubmitError <span class="comment">//提交失败</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            showMessage(<span class="string">"查找文件实际路径出错，错误原因是"</span> + e.message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        showMessage(<span class="string">"读取配置失败，请检查配置"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">onSubmitted:<span class="function"><span class="keyword">function</span>(<span class="params">response, ioArgs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = response.childNodes[<span class="number">0</span>].innerText;</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">    <span class="keyword">var</span> _this =<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(!!res)&#123;</span><br><span class="line">        res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">        <span class="keyword">if</span>(res.success!=<span class="string">"false"</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> fileType = _this.content.dir;</span><br><span class="line">            _this.content.global.readFile(res.msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            showMessage(res.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">onSubmitError:<span class="function"><span class="keyword">function</span>(<span class="params">response, ioArgs</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">    showMessage(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6"><a href="#4-6" class="headerlink" title="4.6"></a>4.6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void showSuc(HttpContext context, string message)</span><br><span class="line">&#123;</span><br><span class="line">    string res = &quot;&#123;\&quot;success\&quot;:\&quot;true\&quot;,\&quot;msg\&quot;:&quot; + message + &quot;&#125;&quot;;</span><br><span class="line">    context.Response.AddHeader(&quot;Content-Type&quot;, &quot;text/html; charset=UTF-8&quot;);</span><br><span class="line">    context.Response.Write(res);</span><br><span class="line">    context.Response.End();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void showError(HttpContext context, string message)</span><br><span class="line">&#123;</span><br><span class="line">    string res = &quot;&#123;\&quot;success\&quot;:\&quot;false\&quot;,\&quot;msg\&quot;:\&quot;&quot; + message + &quot;\&quot;&#125;&quot;;</span><br><span class="line">    context.Response.AddHeader(&quot;Content-Type&quot;, &quot;text/html; charset=UTF-8&quot;);</span><br><span class="line">    context.Response.Write(res);</span><br><span class="line">    context.Response.End();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7"><a href="#4-7" class="headerlink" title="4.7"></a>4.7</h2><h3 id="4-7-1-上传成功"><a href="#4-7-1-上传成功" class="headerlink" title="4.7.1 上传成功"></a>4.7.1 上传成功</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">onSubmitted:<span class="function"><span class="keyword">function</span>(<span class="params">response, ioArgs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = response.childNodes[<span class="number">0</span>].innerText;</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">    <span class="keyword">var</span> _this =<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(!!res)&#123;</span><br><span class="line">        res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">        <span class="keyword">if</span>(res.success!=<span class="string">"false"</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> fileType = _this.content.dir;</span><br><span class="line">            _this.content.global.readFile(res.msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            showMessage(res.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">initArcJson:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> starttime =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> getAttr = data;</span><br><span class="line">  getAttr.spatialReference= <span class="keyword">this</span>.map.spatialReference;</span><br><span class="line">  <span class="keyword">var</span> demo =&#123;</span><br><span class="line">      <span class="string">"geometry"</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">"attributes"</span>: &#123;</span><br><span class="line">          <span class="string">"generated"</span>: <span class="built_in">Number</span>(starttime),</span><br><span class="line">          <span class="string">"title"</span>: <span class="string">"西瓜信息技术股份有限公司"</span>,</span><br><span class="line">          <span class="string">"status"</span>: <span class="number">200</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  demo.geometry = getAttr;</span><br><span class="line">  <span class="keyword">return</span> demo;</span><br><span class="line">&#125;,</span><br><span class="line">readFile: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// debugger;</span></span><br><span class="line">  <span class="comment">// var starttime =new Date();</span></span><br><span class="line">  <span class="comment">// console.log("starttime"+starttime);</span></span><br><span class="line">  <span class="comment">// console.log(data);</span></span><br><span class="line">  <span class="keyword">this</span>.EmptyGraphicLayer.clear();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">      <span class="comment">// debugger;</span></span><br><span class="line">      <span class="keyword">var</span> tempType = data[i].type;</span><br><span class="line">      <span class="keyword">var</span> tempData = <span class="keyword">this</span>.initArcJson(data[i]);</span><br><span class="line">      <span class="keyword">switch</span> (tempType)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"point"</span>:</span><br><span class="line">              <span class="keyword">this</span>.loadPoint(tempData);      <span class="comment">//加载point信息</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"line"</span>:</span><br><span class="line">              <span class="keyword">this</span>.loadLine(tempData);      <span class="comment">//加载line信息</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"polygon"</span>:</span><br><span class="line">              <span class="keyword">this</span>.loadPolyon(tempData);    <span class="comment">//加载polygon信息</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">this</span>.loadPoint(tempData);    <span class="comment">//加载point信息</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log("this.EmptyGraphicLayer"+this.EmptyGraphicLayer);</span></span><br><span class="line">  <span class="comment">// console.log("took", new Date - starttime, "milliseconds");</span></span><br><span class="line">&#125;,</span><br><span class="line">loadPoint: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// debugger;</span></span><br><span class="line">      <span class="keyword">if</span>(!!data)&#123;</span><br><span class="line">          <span class="keyword">var</span> markerSymbol = <span class="keyword">new</span> esri.symbol.SimpleMarkerSymbol();</span><br><span class="line">          markerSymbol.setColor(<span class="keyword">new</span> esri.Color([<span class="number">192</span>, <span class="number">64</span>, <span class="number">223</span>,<span class="number">0.5</span>]));</span><br><span class="line">          <span class="keyword">var</span> labelPoint = data.geometry.points;</span><br><span class="line">          <span class="keyword">var</span> labelSr =data.geometry.spatialReference;</span><br><span class="line">          <span class="keyword">var</span> labelAttr =data.attributes;</span><br><span class="line">          <span class="comment">// debugger;</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> labelPoint)&#123;</span><br><span class="line">                  <span class="keyword">var</span> point = <span class="keyword">new</span> esri.geometry.Point([<span class="built_in">Number</span>(labelPoint[item][<span class="number">0</span>]), <span class="built_in">Number</span>(labelPoint[item][<span class="number">1</span>])], labelSr);</span><br><span class="line">                  <span class="keyword">var</span> wmpoint = esri.geometry.webMercatorUtils.geographicToWebMercator(point);</span><br><span class="line">                  <span class="keyword">var</span> textSymbol = <span class="keyword">new</span> esri.symbols.TextSymbol(<span class="string">"item: "</span> + item );</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (!<span class="keyword">this</span>.EmptyGraphicLayer)&#123;</span><br><span class="line">                          <span class="keyword">this</span>.EmptyGraphicLayer = getEmptyGraphicLayer();</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">var</span> grPp = <span class="keyword">new</span> esri.Graphic(point, markerSymbol);</span><br><span class="line">                  <span class="keyword">var</span> grPt = <span class="keyword">new</span> esri.Graphic(point, textSymbol);</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (grPp) &#123;</span><br><span class="line">                          grPp.visible = <span class="literal">true</span>;</span><br><span class="line">                          grPp.attributes = labelAttr;</span><br><span class="line">                          grPt.visible = <span class="literal">true</span>;</span><br><span class="line">                          grPt.attributes = labelAttr;</span><br><span class="line">                          <span class="keyword">this</span>.EmptyGraphicLayer.add(grPp);</span><br><span class="line">                          <span class="comment">// this.EmptyGraphicLayer.add(grPt);</span></span><br><span class="line">                          <span class="keyword">this</span>.EmptyGraphicLayer.visible = <span class="literal">true</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span>(item==labelPoint.length<span class="number">-1</span>)&#123;</span><br><span class="line">                      <span class="comment">// debugger;</span></span><br><span class="line">                      <span class="keyword">this</span>.map.centerAndZoom(point,<span class="number">18</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          showMessage(<span class="string">"数据为空"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          showMessage(<span class="string">"加载点信息错误，错误原因是"</span> + e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">loadLine: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> LineSymbol = <span class="keyword">new</span> esri.symbols.CartographicLineSymbol();</span><br><span class="line">      LineSymbol.setWidth(<span class="number">5</span>);</span><br><span class="line">      <span class="keyword">var</span> labelAttr =data.attributes;</span><br><span class="line">      <span class="keyword">if</span>(!!data)&#123;</span><br><span class="line">          data.visible = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">var</span> t_graphic =<span class="keyword">new</span> esri.Graphic(data);</span><br><span class="line">          t_graphic.symbol=LineSymbol;</span><br><span class="line">          t_graphic.attributes = labelAttr;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.EmptyGraphicLayer)&#123;</span><br><span class="line">              <span class="keyword">this</span>.EmptyGraphicLayer = getEmptyGraphicLayer();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.EmptyGraphicLayer.add(t_graphic);</span><br><span class="line">          <span class="keyword">var</span> centerPoint =t_graphic.geometry.getExtent().getCenter();</span><br><span class="line">          <span class="built_in">console</span>.log(centerPoint);</span><br><span class="line">          <span class="keyword">this</span>.map.centerAndZoom(centerPoint,<span class="number">18</span>);</span><br><span class="line">          <span class="keyword">this</span>.EmptyGraphicLayer.visible = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">this</span>.EmptyGraphicLayer.opacity=<span class="number">0.75</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          showMessage(<span class="string">"数据为空"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          showMessage(<span class="string">"加载线信息错误，错误原因是"</span> + e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">loadPolyon: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> labelAttr =data.attributes;</span><br><span class="line">      <span class="keyword">var</span> fillSymbol = <span class="keyword">new</span> esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_NULL,<span class="keyword">new</span> esri.symbol.SimpleLineSymbol(<span class="string">"solid"</span>, <span class="keyword">new</span> esri.Color([<span class="number">82</span>, <span class="number">158</span>, <span class="number">229</span>, <span class="number">0.7</span>]), <span class="number">5</span>),<span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (!!data) &#123;</span><br><span class="line">          data.visible = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">var</span> t_graphic =<span class="keyword">new</span> esri.Graphic(data);</span><br><span class="line">          t_graphic.symbol=fillSymbol;</span><br><span class="line">          t_graphic.attributes = labelAttr;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.EmptyGraphicLayer)&#123;</span><br><span class="line">              <span class="keyword">this</span>.EmptyGraphicLayer = getEmptyGraphicLayer();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.EmptyGraphicLayer.add(t_graphic);</span><br><span class="line">          <span class="keyword">var</span> centerPoint =t_graphic.geometry.getExtent().getCenter();</span><br><span class="line">          <span class="comment">// debugger;</span></span><br><span class="line">          <span class="keyword">this</span>.map.centerAndZoom(centerPoint,<span class="number">18</span>);</span><br><span class="line">          <span class="comment">// var markerSymbol = new esri.symbol.SimpleMarkerSymbol();</span></span><br><span class="line">          <span class="comment">// var textSymbol = new esri.symbols.TextSymbol("中心点");</span></span><br><span class="line">          <span class="comment">// var grPt = new esri.Graphic(centerPoint, textSymbol);</span></span><br><span class="line">          <span class="comment">// var grPm = new esri.Graphic(centerPoint, markerSymbol);</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// this.EmptyGraphicLayer.add(grPt);</span></span><br><span class="line">          <span class="comment">// this.EmptyGraphicLayer.add(grPm);</span></span><br><span class="line">          <span class="keyword">this</span>.EmptyGraphicLayer.visible = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">this</span>.EmptyGraphicLayer.opacity=<span class="number">0.75</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          showMessage(<span class="string">"数据为空"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          showMessage(<span class="string">"加载面信息错误，错误原因是"</span> + e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-2-上传失败"><a href="#4-7-2-上传失败" class="headerlink" title="4.7.2 上传失败"></a>4.7.2 上传失败</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提示错误原因</span></span><br><span class="line">onSubmitError:<span class="function"><span class="keyword">function</span>(<span class="params">response, ioArgs</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// debugger;</span></span><br><span class="line">  showMessage(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-测试代码运行效果"><a href="#5-测试代码运行效果" class="headerlink" title="5 测试代码运行效果"></a>5 测试代码运行效果</h1><p>  在本地部署项目，利用后台断点和前台debugger进行相关排错。</p><h1 id="6-保证代码持续运行"><a href="#6-保证代码持续运行" class="headerlink" title="6 保证代码持续运行"></a>6 保证代码持续运行</h1><ul><li>上传文件格式错误，进行合理报错</li><li>上传文件过多，进行合理报错</li><li>上传文件中包含正确的文件，但是也包含不正确的文件，进行合理报错</li><li>解析图形文件是否正确绘制在页面，进行合理报错</li><li>三种类型文件上传解析是否都正确，进行合理报错</li><li>后续需要处理大文件上传的文件，前后台是否存在异步，进行合理报错</li><li>后续补充</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近接手了一个比较老的项目，整理一下我接手之后操作流程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/categories/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
    
      <category term="前端思考" scheme="https://mowatermelon.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%9D%E8%80%83/"/>
    
      <category term="接手新项目" scheme="https://mowatermelon.github.io/tags/%E6%8E%A5%E6%89%8B%E6%96%B0%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>西瓜有话说之Js学习object方法总结</title>
    <link href="https://mowatermelon.github.io/2017/10/27/js-Thinking-object-function/"/>
    <id>https://mowatermelon.github.io/2017/10/27/js-Thinking-object-function/</id>
    <published>2017-10-26T16:00:00.000Z</published>
    <updated>2018-01-15T10:08:27.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-String"><a href="#1-String" class="headerlink" title="1 String"></a>1 String</h1><p>String引用类型方法速览表</p><a id="more"></a><h2 id="1-1-柔和方法"><a href="#1-1-柔和方法" class="headerlink" title="1.1 柔和方法"></a>1.1 柔和方法</h2><table><thead><tr><th style="text-align:left">方法分类</th><th style="text-align:left">含义</th><th style="text-align:left">方法名</th></tr></thead><tbody><tr><td style="text-align:left">编码</td><td style="text-align:left">返回字符串内容中对应位置的值或者编码单元</td><td style="text-align:left">- charAt(index) - charCodeAt(index) - codePointAt(pos) - normalize([form]) - fromCharCode(num1, …, numN) - fromCodePoint(num1, …, numN)</td></tr><tr><td style="text-align:left">检索</td><td style="text-align:left">将字符串中内容进行检索返回对应结果</td><td style="text-align:left">- indexOf(searchValue[, fromIndex]) - lastIndexOf(searchValue[, fromIndex]) - search(regexp) - includes(searchString[, position]) - startsWith(searchString [, position]) - endsWith(searchString [, position]) - match(regexp)</td></tr><tr><td style="text-align:left">对比</td><td style="text-align:left">返回一个数字，表示是否引用字符串在排序中位于比较字符串的前面，后面，或者二者相同。</td><td style="text-align:left">localeCompare(stringExp[, locales][, options])</td></tr><tr><td style="text-align:left">拼接</td><td style="text-align:left">将字符串和其他内容进行拼接</td><td style="text-align:left">- concat() - padEnd() - padStart()</td></tr><tr><td style="text-align:left">大小写转换</td><td style="text-align:left">将字符串中的字母进行大小写转换</td><td style="text-align:left">- toLowerCase() - toLocaleLowerCase() - toUpperCase() - toLocaleUpperCase()</td></tr><tr><td style="text-align:left">HTML相关方法</td><td style="text-align:left">将字符串转成对应的Dom内容</td><td style="text-align:left">- big() - small() - blink() - bold() - italics() - strike() - fixed() - sub() - sup() - anchor(anchorname) - link(url) - fontcolor(color) - fontsize(size)</td></tr></tbody></table><h2 id="1-2-强硬方法"><a href="#1-2-强硬方法" class="headerlink" title="1.2 强硬方法"></a>1.2 强硬方法</h2><table><thead><tr><th style="text-align:left">方法分类</th><th style="text-align:left">含义</th><th style="text-align:left">方法名</th></tr></thead><tbody><tr><td style="text-align:left">替换</td><td style="text-align:left">相关对象类型名称</td><td style="text-align:left">replace()</td></tr><tr><td style="text-align:left">分割</td><td style="text-align:left">相关对象类型名称</td><td style="text-align:left">- slice() - split() - substr() - substring()</td></tr><tr><td style="text-align:left">格式转化</td><td style="text-align:left">相关对象类型名称</td><td style="text-align:left">- trim() - trimLeft() - trimRight()</td></tr><tr><td style="text-align:left">对象通用方法</td><td style="text-align:left">相关对象类型名称</td><td style="text-align:left">- valueOf() - hasOwnProperty() - isPrototypeOf() - setPrototypeOf() - unwatch() - watch() - propertyIsEnumerable()</td></tr></tbody></table><h2 id="1-3-相似函数"><a href="#1-3-相似函数" class="headerlink" title="1.3 相似函数"></a>1.3 相似函数</h2><h3 id="1-3-1-编码"><a href="#1-3-1-编码" class="headerlink" title="1.3.1 编码"></a>1.3.1 编码</h3><blockquote><p>将BMP字符进行转码</p></blockquote><ul><li>charCodeAt(index)</li><li>fromCharCode(num1, …, numN)</li></ul><blockquote><p>能够将非BMP字符也可以进行转码</p></blockquote><ul><li>codePointAt(pos)</li><li>normalize([form])</li><li>fromCodePoint(num1, …, numN)</li></ul><h3 id="1-3-2-正则相关"><a href="#1-3-2-正则相关" class="headerlink" title="1.3.2 正则相关"></a>1.3.2 正则相关</h3><ul><li>search(regexp)</li><li>match(regexp)</li><li>replace(regexp,str)</li><li>split(regexp)</li></ul><h3 id="1-3-3-检索包含"><a href="#1-3-3-检索包含" class="headerlink" title="1.3.3 检索包含"></a>1.3.3 检索包含</h3><blockquote><p>与正则无关的，可以指定检测位置的</p></blockquote><ul><li>indexOf(searchValue[, fromIndex])，返回值为<code>int数字</code>或者<code>-1</code>。</li><li>lastIndexOf(searchValue[, fromIndex])，返回值为<code>int数字</code>或者<code>-1</code>。</li><li>includes(searchString[, position])，返回值为<code>true</code>或者<code>false</code>。</li></ul><blockquote><p>只检测首尾匹配包含，不可以指定检测位置的</p></blockquote><ul><li>startsWith(searchString [, position])，返回值为<code>true</code>或者<code>false</code>。</li><li>endsWith(searchString [, position])，返回值为<code>true</code>或者<code>false</code>。</li></ul><blockquote><p>与正则有关的</p></blockquote><ul><li>search(regexp)，返回值为<code>int数字</code>或者<code>-1</code>。</li><li>match(regexp)，返回值为<code>字符串</code>或者<code>null</code>。</li></ul><h3 id="1-3-4-数据拼接"><a href="#1-3-4-数据拼接" class="headerlink" title="1.3.4 数据拼接"></a>1.3.4 数据拼接</h3><ul><li>赋值操作符（+, +=），<code>string1 += string2+ string2 + string3</code>，运算速度是concat的二十倍左右，是join的两百七十倍左右。</li><li>str.concat(string2, string3[, …, stringN])，运算速度是join的十倍左右。</li><li>arr.join(separator)。</li></ul><h1 id="2-Array"><a href="#2-Array" class="headerlink" title="2 Array"></a>2 Array</h1><p>Array引用类型方法速览表</p><h1 id="3-Date"><a href="#3-Date" class="headerlink" title="3 Date"></a>3 Date</h1><p>Date引用类型方法速览表</p><h1 id="4-Number"><a href="#4-Number" class="headerlink" title="4 Number"></a>4 Number</h1><p>Number引用类型方法速览表</p><h1 id="5-Boolean"><a href="#5-Boolean" class="headerlink" title="5 Boolean"></a>5 Boolean</h1><p>Boolean引用类型方法速览表</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-String&quot;&gt;&lt;a href=&quot;#1-String&quot; class=&quot;headerlink&quot; title=&quot;1 String&quot;&gt;&lt;/a&gt;1 String&lt;/h1&gt;&lt;p&gt;String引用类型方法速览表&lt;/p&gt;
    
    </summary>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/categories/js-thinking/"/>
    
    
      <category term="object" scheme="https://mowatermelon.github.io/tags/object/"/>
    
      <category term="function" scheme="https://mowatermelon.github.io/tags/function/"/>
    
      <category term="watermelon" scheme="https://mowatermelon.github.io/tags/watermelon/"/>
    
      <category term="js_thinking" scheme="https://mowatermelon.github.io/tags/js-thinking/"/>
    
  </entry>
  
  <entry>
    <title>知识储备之理解服务概念</title>
    <link href="https://mowatermelon.github.io/2017/10/26/knowledge-Service/"/>
    <id>https://mowatermelon.github.io/2017/10/26/knowledge-Service/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2017-12-28T02:01:18.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-无服务"><a href="#1-无服务" class="headerlink" title="1 无服务"></a>1 无服务</h1><h2 id="1-1-on-premises"><a href="#1-1-on-premises" class="headerlink" title="1.1 on-premises"></a>1.1 on-premises</h2><p>  本地部署</p><a id="more"></a><h3 id="1-1-1-概念"><a href="#1-1-1-概念" class="headerlink" title="1.1.1 概念"></a>1.1.1 概念</h3><ul><li>应用(客户管理)<br>  种子—–&gt;西瓜</li><li>安全&amp;整合(客户管理)<br>  农药&amp;锄头</li><li>数据库(客户管理)<br>  大棚</li><li>操作系统(客户管理)<br>  菜地</li><li>虚拟化(客户管理)<br>  藤蔓</li><li>服务器硬件(客户管理)<br>  货车</li><li>存储(客户管理)<br>  仓库</li><li>网络(客户管理)<br>  菜市场</li></ul><h3 id="1-1-2-解释"><a href="#1-1-2-解释" class="headerlink" title="1.1.2 解释"></a>1.1.2 解释</h3><p>  你想吃西瓜，自己去买种子，买刀和买农药，买地，弄大棚，买锄头。<br>  而且种子在还没有长成西瓜之前，你需要时刻去大棚关注种子的成长情况，农药，大棚，菜地和锄头可能由于某些原因出了问题，导致种子长不大，成不了一个西瓜。<br>  而且一不小心种多了，你还要需要弄个仓库，还要自己开货车拿到菜市场卖，但是自己养的瓜，在自己吃的时候会更甜。<br>  最后你自己选了一个长的不错的甜西瓜，自己切好，放到桌子上，你就可以吃了。<br>  这一种就是完全自负盈亏，不需要外界提供什么帮助，完全独立的开发</p><h1 id="2-云服务"><a href="#2-云服务" class="headerlink" title="2 云服务"></a>2 云服务</h1><h2 id="2-1-IaaS"><a href="#2-1-IaaS" class="headerlink" title="2.1 IaaS"></a>2.1 IaaS</h2><p>Infrastructure as a Service，基础设施即服务</p><h3 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1 概念"></a>2.1.1 概念</h3><ul><li>应用(客户管理)<br>  种子—–&gt;西瓜</li><li>安全&amp;整合(客户管理)<br>  农药&amp;锄头</li><li>数据库(客户管理)<br>  大棚</li><li>操作系统(服务商管理)<br>  菜地</li><li>虚拟化(服务商管理)<br>  藤蔓</li><li>服务器硬件(服务商管理)<br>  货车</li><li>存储(服务商管理)<br>  仓库</li><li>网络(服务商管理)<br>  菜市场</li></ul><h3 id="2-1-2-解释"><a href="#2-1-2-解释" class="headerlink" title="2.1.2 解释"></a>2.1.2 解释</h3><p>  你想吃西瓜，阿莫提供了一块地给你，并且告诉你西瓜成熟之后，她可以帮你用货车拉到菜市场卖。<br>  你需要自己买种子，锄头和农药，在菜地上搭好你的大棚。<br>  如果农药，锄头，种子或者大棚出问题了，你需要自己负责，但是如果是菜地什么的出问题了，你就可以找阿莫，让她赔偿。<br>  最后你自己选了一个长的不错的甜西瓜，自己切好，放到桌子上，你就可以吃了。<br>  这种就是借助了一些现有的基础设施，在项目没有成型之前，有个伙伴帮你承担一部分风险，但是还是参与了一定项目的开发</p><h2 id="2-2-PaaS"><a href="#2-2-PaaS" class="headerlink" title="2.2 PaaS"></a>2.2 PaaS</h2><p>Platform as a Service，平台即服务</p><h3 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h3><ul><li>应用(客户管理)<br>  种子—–&gt;西瓜</li><li>安全&amp;整合(服务商管理)<br>  农药&amp;锄头</li><li>数据库(服务商管理)<br>  大棚</li><li>操作系统(服务商管理)<br>  菜地</li><li>虚拟化(服务商管理)<br>  藤蔓</li><li>服务器硬件(服务商管理)<br>  货车</li><li>存储(服务商管理)<br>  仓库</li><li>网络(服务商管理)<br>  菜市场</li></ul><h3 id="2-2-2-解释"><a href="#2-2-2-解释" class="headerlink" title="2.2.2 解释"></a>2.2.2 解释</h3><p>  你想吃西瓜， 阿莫直接给你推荐了一个地方，你把种子放进去就行了。<br>  不用管西瓜怎么长大的，怎么运输到你面前的之类，但是由于没有参与种子成长过程，对于长成的西瓜，你需要经过多次品尝，才能知道最适合自己的甜西瓜是哪个。<br>  需要考虑一些可能由于大棚，菜地和货车等等导致的问题，如果发现阿莫提供这个地方，长出来的都是坏西瓜，你可以找阿莫赔偿。<br>  最后你自己找到了一个适合自己的甜西瓜，自己切好，放到桌子上，你就可以吃了。<br>  找个现有平台帮你做大部分环节，需要自己负责的地方很少，但是由于不是自己开发的，需要和平台进行多次磨合，才能得出好项目</p><h2 id="2-3-SaaS"><a href="#2-3-SaaS" class="headerlink" title="2.3 SaaS"></a>2.3 SaaS</h2><p>Software as a Service，软件即服务</p><h3 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h3><ul><li>应用(服务商管理)<br>  种子—–&gt;西瓜</li><li>安全&amp;整合(服务商管理)<br>  农药&amp;锄头</li><li>数据库(服务商管理)<br>  大棚</li><li>操作系统(服务商管理)<br>  菜地</li><li>虚拟化(服务商管理)<br>  藤蔓</li><li>服务器硬件(服务商管理)<br>  货车</li><li>存储(服务商管理)<br>  仓库</li><li>网络(服务商管理)<br>  菜市场</li></ul><h3 id="2-3-1-解释"><a href="#2-3-1-解释" class="headerlink" title="2.3.1 解释"></a>2.3.1 解释</h3><p>  你想吃西瓜，阿莫直接帮你切好，放到桌子上，你直接吃就好，不用管瓜怎么长大，什么都不用管，一旦西瓜有问题你可以直接找阿莫咨询</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>  <img src="../../../../img/project.png" alt="对于IaaS/PaaS/SaaS理解"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-无服务&quot;&gt;&lt;a href=&quot;#1-无服务&quot; class=&quot;headerlink&quot; title=&quot;1 无服务&quot;&gt;&lt;/a&gt;1 无服务&lt;/h1&gt;&lt;h2 id=&quot;1-1-on-premises&quot;&gt;&lt;a href=&quot;#1-1-on-premises&quot; class=&quot;headerlink&quot; title=&quot;1.1 on-premises&quot;&gt;&lt;/a&gt;1.1 on-premises&lt;/h2&gt;&lt;p&gt;  本地部署&lt;/p&gt;
    
    </summary>
    
      <category term="知识储备" scheme="https://mowatermelon.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
      <category term="IaaS" scheme="https://mowatermelon.github.io/tags/IaaS/"/>
    
      <category term="PaaS" scheme="https://mowatermelon.github.io/tags/PaaS/"/>
    
      <category term="SaaS" scheme="https://mowatermelon.github.io/tags/SaaS/"/>
    
      <category term="on-premises" scheme="https://mowatermelon.github.io/tags/on-premises/"/>
    
      <category term="知识储备" scheme="https://mowatermelon.github.io/tags/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
  </entry>
  
</feed>
